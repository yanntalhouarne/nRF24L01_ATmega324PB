
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800158  00800158  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002158  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcb  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114a  00000000  00000000  000038ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00004a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000188b  00000000  00000000  00005877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00007102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 e9       	ldi	r30, 0x90	; 144
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 35       	cpi	r26, 0x58	; 88
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e5       	ldi	r26, 0x58	; 88
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ad 38       	cpi	r26, 0x8D	; 141
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 88 00 	call	0x110	; 0x110 <main>
 102:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<LED_PIN); // set LED gpio as output 
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	08 95       	ret

00000110 <main>:

void setup_gpios();

int main(void)
{
	setup_gpios();
 110:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_9600); // for FTDI debugging (terminal)
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	0e 94 3d 02 	call	0x47a	; 0x47a <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 11a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <spi1_master_initialize>
	mirf_init();
 11e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f e7       	ldi	r18, 0x7F	; 127
 124:	38 e3       	ldi	r19, 0x38	; 56
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x18>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x22>
 132:	00 00       	nop
	_delay_ms(50);	
	
	sei(); // enable global interrupts
 134:	78 94       	sei
	
	mirf_config();
 136:	0e 94 13 01 	call	0x226	; 0x226 <mirf_config>

	println_0("nRF24L01 initialized...;");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 bb 01 	call	0x376	; 0x376 <println_0>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x36>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x3c>
 14c:	00 00       	nop
	_delay_ms(1);

	println_0("Testing comunication...;");
 14e:	89 e1       	ldi	r24, 0x19	; 25
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 bb 01 	call	0x376	; 0x376 <println_0>
 156:	8f ec       	ldi	r24, 0xCF	; 207
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x4a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x50>
 160:	00 00       	nop
	_delay_ms(1);
	mirf_send(buffer, BUFFER_SIZE);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	8a e8       	ldi	r24, 0x8A	; 138
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 37 01 	call	0x26e	; 0x26e <mirf_send>

	println_0("Waiting for echo...;");
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 bb 01 	call	0x376	; 0x376 <println_0>
	while(!mirf_data_ready());
 174:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <mirf_data_ready>
 178:	88 23       	and	r24, r24
 17a:	e1 f3       	breq	.-8      	; 0x174 <main+0x64>
	mirf_get_data(buffer);
 17c:	8a e8       	ldi	r24, 0x8A	; 138
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 23 01 	call	0x246	; 0x246 <mirf_get_data>

	print_0("Echo received: ;");
 184:	87 e4       	ldi	r24, 0x47	; 71
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 98 01 	call	0x330	; 0x330 <print_0>
	print_char_0(buffer[0]);
 18c:	ca e8       	ldi	r28, 0x8A	; 138
 18e:	d1 e0       	ldi	r29, 0x01	; 1
 190:	88 81       	ld	r24, Y
 192:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>
	print_char_0(',');
 196:	8c e2       	ldi	r24, 0x2C	; 44
 198:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>
	print_char_0(' ');
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>
	print_char_0(buffer[1]);
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>
	print_char_0(NL);
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>

    while (1) 
    {
		TOGGLE_LED;
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	89 27       	eor	r24, r25
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	34 e3       	ldi	r19, 0x34	; 52
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0xac>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xb6>
 1c6:	00 00       	nop
 1c8:	f3 cf       	rjmp	.-26     	; 0x1b0 <main+0xa0>

000001ca <mirf_init>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr, 5);
 1ca:	54 9a       	sbi	0x0a, 4	; 10
 1cc:	56 9a       	sbi	0x0a, 6	; 10
 1ce:	5c 98       	cbi	0x0b, 4	; 11
 1d0:	5e 9a       	sbi	0x0b, 6	; 11
 1d2:	e8 98       	cbi	0x1d, 0	; 29
 1d4:	e9 e6       	ldi	r30, 0x69	; 105
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
 1de:	e8 9a       	sbi	0x1d, 0	; 29
 1e0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <spi1_master_initialize>
 1e4:	08 95       	ret

000001e6 <mirf_data_ready>:
 1e6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <PTX>
 1ea:	81 11       	cpse	r24, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <mirf_data_ready+0x16>
 1ee:	5e 98       	cbi	0x0b, 6	; 11
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi1_exchange_char>
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	80 74       	andi	r24, 0x40	; 64
 1fa:	08 95       	ret
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret

00000200 <mirf_config_register>:
 200:	cf 93       	push	r28
 202:	c6 2f       	mov	r28, r22
 204:	5e 98       	cbi	0x0b, 6	; 11
 206:	8f 71       	andi	r24, 0x1F	; 31
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi1_send_char>
 20e:	5e 9a       	sbi	0x0b, 6	; 11
 210:	85 e8       	ldi	r24, 0x85	; 133
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <mirf_config_register+0x12>
 216:	00 00       	nop
 218:	5e 98       	cbi	0x0b, 6	; 11
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi1_send_char>
 220:	5e 9a       	sbi	0x0b, 6	; 11
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <mirf_config>:
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
 22e:	60 e1       	ldi	r22, 0x10	; 16
 230:	81 e1       	ldi	r24, 0x11	; 17
 232:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
 236:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <PTX>
 23a:	6b e4       	ldi	r22, 0x4B	; 75
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
 242:	5c 9a       	sbi	0x0b, 4	; 11
 244:	08 95       	ret

00000246 <mirf_get_data>:
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
 24c:	5e 98       	cbi	0x0b, 6	; 11
 24e:	81 e6       	ldi	r24, 0x61	; 97
 250:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi1_exchange_char>
 254:	40 e1       	ldi	r20, 0x10	; 16
 256:	be 01       	movw	r22, r28
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 11 02 	call	0x422	; 0x422 <spi1_exchange_bytes>
 25e:	5e 9a       	sbi	0x0b, 6	; 11
 260:	60 e4       	ldi	r22, 0x40	; 64
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	16 2f       	mov	r17, r22

	while (PTX)
 278:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <PTX>
 27c:	81 11       	cpse	r24, r1
 27e:	fc cf       	rjmp	.-8      	; 0x278 <mirf_send+0xa>
	{
				
	} // Wait until last packet is send

	mirf_CE_lo;
 280:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	print_char_0(NL);
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	0e 94 95 01 	call	0x32a	; 0x32a <print_char_0>
	TX_POWERUP; // Power up
 28e:	6a e4       	ldi	r22, 0x4A	; 74
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 296:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 298:	81 ee       	ldi	r24, 0xE1	; 225
 29a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 29e:	5e 9a       	sbi	0x0b, 6	; 11
	
	mirf_CSN_lo;                     // Pull down chip select
 2a0:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 2a2:	80 ea       	ldi	r24, 0xA0	; 160
 2a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 2a8:	61 2f       	mov	r22, r17
 2aa:	ce 01       	movw	r24, r28
 2ac:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 2b0:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 2b2:	5c 9a       	sbi	0x0b, 4	; 11
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 2de:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <PTX>
 2e2:	88 23       	and	r24, r24
 2e4:	89 f0       	breq	.+34     	; 0x308 <__vector_1+0x4c>
	{

		// Read MiRF status
		mirf_CSN_lo;                     // Pull down chip select
 2e6:	5e 98       	cbi	0x0b, 6	; 11
		status = spi1_exchange_char(NOP); // Read status register
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi1_exchange_char>
		mirf_CSN_hi;                     // Pull up chip select
 2ee:	5e 9a       	sbi	0x0b, 6	; 11

		mirf_CE_lo; // Deactivate transreceiver
 2f0:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP; // Power up in receiving mode
 2f2:	6b e4       	ldi	r22, 0x4B	; 75
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
		mirf_CE_hi; // Listening for pakets
 2fa:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;    // Set to receiving mode
 2fc:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <PTX>

		// Reset status register for further interaction
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 300:	60 e3       	ldi	r22, 0x30	; 48
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	0e 94 00 01 	call	0x200	; 0x200 <mirf_config_register>
	}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <print_char_0>:
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 32a:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
 32e:	08 95       	ret

00000330 <print_0>:
}


void print_0(char char_array[]) // prints to usart
{
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	fc 01       	movw	r30, r24
	for (int i=0; i<200 ; i++)
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
 33a:	80 81       	ld	r24, Z
 33c:	8a 30       	cpi	r24, 0x0A	; 10
 33e:	b1 f0       	breq	.+44     	; 0x36c <print_0+0x3c>
 340:	8b 33       	cpi	r24, 0x3B	; 59
 342:	61 f4       	brne	.+24     	; 0x35c <print_0+0x2c>
 344:	13 c0       	rjmp	.+38     	; 0x36c <print_0+0x3c>
 346:	89 91       	ld	r24, Y+
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	81 f0       	breq	.+32     	; 0x36c <print_0+0x3c>
 34c:	8b 33       	cpi	r24, 0x3B	; 59
 34e:	71 f0       	breq	.+28     	; 0x36c <print_0+0x3c>
			break;
		usart0_send_char(char_array[i]);
 350:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
}


void print_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 354:	0c 17       	cp	r16, r28
 356:	1d 07       	cpc	r17, r29
 358:	b1 f7       	brne	.-20     	; 0x346 <print_0+0x16>
 35a:	08 c0       	rjmp	.+16     	; 0x36c <print_0+0x3c>
 35c:	8f 01       	movw	r16, r30
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 35e:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
 362:	e8 01       	movw	r28, r16
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	08 53       	subi	r16, 0x38	; 56
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	ed cf       	rjmp	.-38     	; 0x346 <print_0+0x16>
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <println_0>:

void println_0(char char_array[]) // prints to usart
{
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	8a 30       	cpi	r24, 0x0A	; 10
 386:	69 f0       	breq	.+26     	; 0x3a2 <println_0+0x2c>
 388:	8b 33       	cpi	r24, 0x3B	; 59
 38a:	79 f4       	brne	.+30     	; 0x3aa <println_0+0x34>
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <println_0+0x2c>
 38e:	89 91       	ld	r24, Y+
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	39 f0       	breq	.+14     	; 0x3a2 <println_0+0x2c>
 394:	8b 33       	cpi	r24, 0x3B	; 59
 396:	29 f0       	breq	.+10     	; 0x3a2 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 398:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 39c:	0c 17       	cp	r16, r28
 39e:	1d 07       	cpc	r17, r29
 3a0:	b1 f7       	brne	.-20     	; 0x38e <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
}
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 3aa:	0e 94 35 02 	call	0x46a	; 0x46a <usart0_send_char>
 3ae:	e8 01       	movw	r28, r16
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	08 53       	subi	r16, 0x38	; 56
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	eb cf       	rjmp	.-42     	; 0x38e <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 3c2:	6b 9a       	sbi	0x0d, 3	; 13
 3c4:	57 9a       	sbi	0x0a, 7	; 10
 3c6:	56 9a       	sbi	0x0a, 6	; 10
 3c8:	86 e5       	ldi	r24, 0x56	; 86
 3ca:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 3ce:	08 95       	ret

000003d0 <spi1_send_char>:
 3d0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3d4:	ed ea       	ldi	r30, 0xAD	; 173
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	ec f7       	brge	.-6      	; 0x3d8 <spi1_send_char+0x8>
 3de:	08 95       	ret

000003e0 <spi1_exchange_char>:
 3e0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3e4:	ed ea       	ldi	r30, 0xAD	; 173
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 23       	and	r24, r24
 3ec:	ec f7       	brge	.-6      	; 0x3e8 <spi1_exchange_char+0x8>
 3ee:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3f2:	08 95       	ret

000003f4 <spi1_send_bytes>:
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	66 23       	and	r22, r22
 3fa:	81 f0       	breq	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fc:	dc 01       	movw	r26, r24
 3fe:	9c 01       	movw	r18, r24
 400:	26 0f       	add	r18, r22
 402:	31 1d       	adc	r19, r1
 404:	ce ea       	ldi	r28, 0xAE	; 174
 406:	d0 e0       	ldi	r29, 0x00	; 0
 408:	ed ea       	ldi	r30, 0xAD	; 173
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	9d 91       	ld	r25, X+
 40e:	98 83       	st	Y, r25
 410:	90 81       	ld	r25, Z
 412:	99 23       	and	r25, r25
 414:	ec f7       	brge	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 416:	a2 17       	cp	r26, r18
 418:	b3 07       	cpc	r27, r19
 41a:	c1 f7       	brne	.-16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 42a:	44 23       	and	r20, r20
 42c:	c9 f0       	breq	.+50     	; 0x460 <spi1_exchange_bytes+0x3e>
 42e:	dc 01       	movw	r26, r24
 430:	06 2f       	mov	r16, r22
 432:	17 2f       	mov	r17, r23
 434:	9c 01       	movw	r18, r24
 436:	24 0f       	add	r18, r20
 438:	31 1d       	adc	r19, r1
 43a:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 43c:	2e ea       	ldi	r18, 0xAE	; 174
 43e:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 440:	ed ea       	ldi	r30, 0xAD	; 173
 442:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 444:	9d 91       	ld	r25, X+
 446:	e9 01       	movw	r28, r18
 448:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 44a:	90 81       	ld	r25, Z
 44c:	99 23       	and	r25, r25
 44e:	ec f7       	brge	.-6      	; 0x44a <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 450:	e9 01       	movw	r28, r18
 452:	98 81       	ld	r25, Y
 454:	e8 01       	movw	r28, r16
 456:	99 93       	st	Y+, r25
 458:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 45a:	a4 17       	cp	r26, r20
 45c:	b5 07       	cpc	r27, r21
 45e:	91 f7       	brne	.-28     	; 0x444 <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 46a:	e0 ec       	ldi	r30, 0xC0	; 192
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	90 81       	ld	r25, Z
 470:	95 ff       	sbrs	r25, 5
 472:	fd cf       	rjmp	.-6      	; 0x46e <usart0_send_char+0x4>
 474:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 478:	08 95       	ret

0000047a <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 47a:	98 e9       	ldi	r25, 0x98	; 152
 47c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 480:	96 e0       	ldi	r25, 0x06	; 6
 482:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 486:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
