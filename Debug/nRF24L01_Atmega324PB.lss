
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080012e  0080012e  000005f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002592  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fdc  00000000  00000000  00002df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000126b  00000000  00000000  00003dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  0000503c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cf  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bdc  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e3       	ldi	r30, 0x34	; 52
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 32       	cpi	r26, 0x2E	; 46
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e2       	ldi	r26, 0x2E	; 46
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a1 33       	cpi	r26, 0x31	; 49
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 102:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output 
 10a:	6c 9a       	sbi	0x0d, 4	; 13
 10c:	08 95       	ret

0000010e <main>:
uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

int main(void)
{
	setup_gpios();
 10e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 8f 02 	call	0x51e	; 0x51e <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 118:	0e 94 57 02 	call	0x4ae	; 0x4ae <spi1_master_initialize>
	mirf_init();
 11c:	0e 94 2d 01 	call	0x25a	; 0x25a <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	38 e3       	ldi	r19, 0x38	; 56
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x22>
 130:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 132:	9e b1       	in	r25, 0x0e	; 14
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	98 27       	eor	r25, r24
 138:	9e b9       	out	0x0e, r25	; 14
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	20 e7       	ldi	r18, 0x70	; 112
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 14c:	9e b1       	in	r25, 0x0e	; 14
 14e:	98 27       	eor	r25, r24
 150:	9e b9       	out	0x0e, r25	; 14
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	20 e7       	ldi	r18, 0x70	; 112
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x54>
 162:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 164:	9e b1       	in	r25, 0x0e	; 14
 166:	98 27       	eor	r25, r24
 168:	9e b9       	out	0x0e, r25	; 14
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	20 e7       	ldi	r18, 0x70	; 112
 16e:	32 e0       	ldi	r19, 0x02	; 2
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x62>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x6c>
 17a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 17c:	9e b1       	in	r25, 0x0e	; 14
 17e:	98 27       	eor	r25, r24
 180:	9e b9       	out	0x0e, r25	; 14
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	20 e7       	ldi	r18, 0x70	; 112
 186:	32 e0       	ldi	r19, 0x02	; 2
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 194:	9e b1       	in	r25, 0x0e	; 14
 196:	98 27       	eor	r25, r24
 198:	9e b9       	out	0x0e, r25	; 14
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x92>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x9c>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	9e b1       	in	r25, 0x0e	; 14
 1ae:	98 27       	eor	r25, r24
 1b0:	9e b9       	out	0x0e, r25	; 14
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	20 e7       	ldi	r18, 0x70	; 112
 1b6:	32 e0       	ldi	r19, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xaa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb4>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	9e b1       	in	r25, 0x0e	; 14
 1c6:	98 27       	eor	r25, r24
 1c8:	9e b9       	out	0x0e, r25	; 14
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xc2>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xcc>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 1dc:	9e b1       	in	r25, 0x0e	; 14
 1de:	89 27       	eor	r24, r25
 1e0:	8e b9       	out	0x0e, r24	; 14
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	99 e6       	ldi	r25, 0x69	; 105
 1e6:	28 e1       	ldi	r18, 0x18	; 24
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xda>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xe4>
 1f2:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 1f4:	78 94       	sei
	
	//mirf_config_register(EN_AA, (0<<0)); // disable auto ACK for pipe 0
	//mirf_config_register(EN_AA, (0<<1));

	mirf_config();
 1f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config>
	
	mirf_set_TADDR(tx_address);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 b7 01 	call	0x36e	; 0x36e <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 af 01 	call	0x35e	; 0x35e <mirf_set_RADDR>

	println_0("nRF24L01 initialized...;");
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 31 02 	call	0x462	; 0x462 <println_0>
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	9e e4       	ldi	r25, 0x4E	; 78
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x108>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x10e>
 21c:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 21e:	10 e1       	ldi	r17, 0x10	; 16
		//print_char_0(',');
		buffer[0]++;
 220:	ce e2       	ldi	r28, 0x2E	; 46
 222:	d1 e0       	ldi	r29, 0x01	; 1
	println_0("nRF24L01 initialized...;");
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 224:	8e b1       	in	r24, 0x0e	; 14
 226:	81 27       	eor	r24, r17
 228:	8e b9       	out	0x0e, r24	; 14
		//print_char_0(',');
		buffer[0]++;
 22a:	88 81       	ld	r24, Y
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	88 83       	st	Y, r24
		//buffer[1] = 2;
		TOGGLE_LED;
 230:	8e b1       	in	r24, 0x0e	; 14
 232:	81 27       	eor	r24, r17
 234:	8e b9       	out	0x0e, r24	; 14
		//println_0("Sending data...;");
		//_delay_ms(1);
		mirf_send(buffer, mirf_PAYLOAD);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 c7 01 	call	0x38e	; 0x38e <mirf_send>
		//_delay_ms(30);
		while (!mirf_data_sent());
 23e:	0e 94 3b 01 	call	0x276	; 0x276 <mirf_data_sent>
 242:	88 23       	and	r24, r24
 244:	e1 f3       	breq	.-8      	; 0x23e <main+0x130>
		TOGGLE_LED;
 246:	8e b1       	in	r24, 0x0e	; 14
 248:	81 27       	eor	r24, r17
 24a:	8e b9       	out	0x0e, r24	; 14
 24c:	8f e5       	ldi	r24, 0x5F	; 95
 24e:	9a ee       	ldi	r25, 0xEA	; 234
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x142>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x148>
 256:	00 00       	nop
 258:	e5 cf       	rjmp	.-54     	; 0x224 <main+0x116>

0000025a <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 25a:	54 9a       	sbi	0x0a, 4	; 10
 25c:	56 9a       	sbi	0x0a, 6	; 10
 25e:	5c 98       	cbi	0x0b, 4	; 11
 260:	5e 9a       	sbi	0x0b, 6	; 11
 262:	e8 98       	cbi	0x1d, 0	; 29
 264:	e9 e6       	ldi	r30, 0x69	; 105
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	80 83       	st	Z, r24
 26e:	e8 9a       	sbi	0x1d, 0	; 29
 270:	0e 94 57 02 	call	0x4ae	; 0x4ae <spi1_master_initialize>
 274:	08 95       	ret

00000276 <mirf_data_sent>:
 276:	5e 98       	cbi	0x0b, 6	; 11
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	0e 94 66 02 	call	0x4cc	; 0x4cc <spi1_exchange_char>
 27e:	5e 9a       	sbi	0x0b, 6	; 11
 280:	80 72       	andi	r24, 0x20	; 32
 282:	08 95       	ret

00000284 <mirf_config_register>:
 284:	cf 93       	push	r28
 286:	c6 2f       	mov	r28, r22
 288:	5e 98       	cbi	0x0b, 6	; 11
 28a:	8f 71       	andi	r24, 0x1F	; 31
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <mirf_config_register+0x10>
 298:	00 c0       	rjmp	.+0      	; 0x29a <mirf_config_register+0x16>
 29a:	8c 2f       	mov	r24, r28
 29c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
 2a0:	5e 9a       	sbi	0x0b, 6	; 11
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <mirf_config_register+0x20>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <mirf_config_register+0x26>
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <mirf_config>:
 2ae:	6c e6       	ldi	r22, 0x6C	; 108
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2b6:	6f ef       	ldi	r22, 0xFF	; 255
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e1       	ldi	r24, 0x11	; 17
 2c2:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	82 e1       	ldi	r24, 0x12	; 18
 2ca:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	83 e1       	ldi	r24, 0x13	; 19
 2d2:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	85 e1       	ldi	r24, 0x15	; 21
 2e2:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	86 e1       	ldi	r24, 0x16	; 22
 2ea:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2ee:	66 e2       	ldi	r22, 0x26	; 38
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 306:	6f e4       	ldi	r22, 0x4F	; 79
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 30e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
 312:	60 e7       	ldi	r22, 0x70	; 112
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 31a:	5e 98       	cbi	0x0b, 6	; 11
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
 322:	5e 9a       	sbi	0x0b, 6	; 11
 324:	6b e5       	ldi	r22, 0x5B	; 91
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
 32c:	5c 9a       	sbi	0x0b, 4	; 11
 32e:	08 95       	ret

00000330 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	eb 01       	movw	r28, r22
 338:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 33a:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 33c:	8f 71       	andi	r24, 0x1F	; 31
 33e:	80 62       	ori	r24, 0x20	; 32
 340:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
	spi1_send_bytes(value, len);
 344:	61 2f       	mov	r22, r17
 346:	ce 01       	movw	r24, r28
 348:	0e 94 70 02 	call	0x4e0	; 0x4e0 <spi1_send_bytes>
	mirf_CSN_hi;
 34c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	8a 95       	dec	r24
 352:	f1 f7       	brne	.-4      	; 0x350 <mirf_write_register+0x20>
 354:	00 c0       	rjmp	.+0      	; 0x356 <mirf_write_register+0x26>
	_delay_us(25);
	
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	08 95       	ret

0000035e <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 35e:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
 360:	45 e0       	ldi	r20, 0x05	; 5
 362:	bc 01       	movw	r22, r24
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	0e 94 98 01 	call	0x330	; 0x330 <mirf_write_register>
	mirf_CE_hi;
 36a:	5c 9a       	sbi	0x0b, 4	; 11
 36c:	08 95       	ret

0000036e <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 374:	45 e0       	ldi	r20, 0x05	; 5
 376:	bc 01       	movw	r22, r24
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	0e 94 98 01 	call	0x330	; 0x330 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 37e:	45 e0       	ldi	r20, 0x05	; 5
 380:	be 01       	movw	r22, r28
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	0e 94 98 01 	call	0x330	; 0x330 <mirf_write_register>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
 396:	16 2f       	mov	r17, r22
	while (PTX)
 398:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 39c:	88 23       	and	r24, r24
 39e:	41 f0       	breq	.+16     	; 0x3b0 <mirf_send+0x22>
	{
		println_0("while(PTX)")	;
 3a0:	83 e2       	ldi	r24, 0x23	; 35
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 31 02 	call	0x462	; 0x462 <println_0>

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
	while (PTX)
 3a8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 3ac:	81 11       	cpse	r24, r1
 3ae:	f8 cf       	rjmp	.-16     	; 0x3a0 <mirf_send+0x12>
	{
		println_0("while(PTX)")	;
	} // Wait until last packet is send

	mirf_CE_lo;
 3b0:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 3b8:	6a e5       	ldi	r22, 0x5A	; 90
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 3c0:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 3c2:	81 ee       	ldi	r24, 0xE1	; 225
 3c4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 3c8:	5e 9a       	sbi	0x0b, 6	; 11
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <mirf_send+0x3e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <mirf_send+0x44>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 3d2:	60 e7       	ldi	r22, 0x70	; 112
 3d4:	87 e0       	ldi	r24, 0x07	; 7
 3d6:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 3da:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 3dc:	80 ea       	ldi	r24, 0xA0	; 160
 3de:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spi1_send_char>
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <mirf_send+0x56>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <mirf_send+0x5c>
	_delay_us(25);
	spi1_send_bytes(value, len);      // Write payload
 3ea:	61 2f       	mov	r22, r17
 3ec:	ce 01       	movw	r24, r28
 3ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <spi1_send_bytes>
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <mirf_send+0x66>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <mirf_send+0x6c>
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select
 3fa:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 3fc:	5c 9a       	sbi	0x0b, 4	; 11
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	08 95       	ret

00000406 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	//char status;
	// If still in transmitting mode then finish transmission
	
	if (PTX)
 428:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 42c:	88 23       	and	r24, r24
 42e:	41 f0       	breq	.+16     	; 0x440 <__vector_1+0x3a>
		//status = spi1_exchange_char(NOP); // Read status register
		//print_0("STATUS: ;");
		//println_int_0(status);
		//mirf_CSN_hi;                     // Pull up chip select
		//_delay_us(25);
		mirf_CE_lo;                             // Deactivate transreceiver
 430:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 432:	6b e5       	ldi	r22, 0x5B	; 91
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 42 01 	call	0x284	; 0x284 <mirf_config_register>
		mirf_CE_hi;                             // Listening for packets
 43a:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode
 43c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
	
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 46c:	fc 01       	movw	r30, r24
 46e:	80 81       	ld	r24, Z
 470:	8a 30       	cpi	r24, 0x0A	; 10
 472:	69 f0       	breq	.+26     	; 0x48e <println_0+0x2c>
 474:	8b 33       	cpi	r24, 0x3B	; 59
 476:	79 f4       	brne	.+30     	; 0x496 <println_0+0x34>
 478:	0a c0       	rjmp	.+20     	; 0x48e <println_0+0x2c>
 47a:	89 91       	ld	r24, Y+
 47c:	8a 30       	cpi	r24, 0x0A	; 10
 47e:	39 f0       	breq	.+14     	; 0x48e <println_0+0x2c>
 480:	8b 33       	cpi	r24, 0x3B	; 59
 482:	29 f0       	breq	.+10     	; 0x48e <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 484:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 488:	0c 17       	cp	r16, r28
 48a:	1d 07       	cpc	r17, r29
 48c:	b1 f7       	brne	.-20     	; 0x47a <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
}
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 496:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
 49a:	e8 01       	movw	r28, r16
 49c:	21 96       	adiw	r28, 0x01	; 1
 49e:	08 53       	subi	r16, 0x38	; 56
 4a0:	1f 4f       	sbci	r17, 0xFF	; 255
 4a2:	eb cf       	rjmp	.-42     	; 0x47a <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <spi1_master_initialize>:

void spi0_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 4ae:	6b 9a       	sbi	0x0d, 3	; 13
 4b0:	57 9a       	sbi	0x0a, 7	; 10
 4b2:	56 9a       	sbi	0x0a, 6	; 10
 4b4:	82 e5       	ldi	r24, 0x52	; 82
 4b6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 4ba:	08 95       	ret

000004bc <spi1_send_char>:
 4bc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4c0:	ed ea       	ldi	r30, 0xAD	; 173
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	ec f7       	brge	.-6      	; 0x4c4 <spi1_send_char+0x8>
 4ca:	08 95       	ret

000004cc <spi1_exchange_char>:
 4cc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4d0:	ed ea       	ldi	r30, 0xAD	; 173
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	88 23       	and	r24, r24
 4d8:	ec f7       	brge	.-6      	; 0x4d4 <spi1_exchange_char+0x8>
 4da:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4de:	08 95       	ret

000004e0 <spi1_send_bytes>:
		while (!(SPSR0 & (1 << SPIF)))
		; // wait for transmission complete
	}
}
void spi1_send_bytes(char *pdata, char bytes)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 4e4:	66 23       	and	r22, r22
 4e6:	81 f0       	breq	.+32     	; 0x508 <spi1_send_bytes+0x28>
 4e8:	dc 01       	movw	r26, r24
 4ea:	9c 01       	movw	r18, r24
 4ec:	26 0f       	add	r18, r22
 4ee:	31 1d       	adc	r19, r1
	{
		SPDR1 = pdata[i]; // start transmission
 4f0:	ce ea       	ldi	r28, 0xAE	; 174
 4f2:	d0 e0       	ldi	r29, 0x00	; 0
		while (!(SPSR1 & (1 << SPIF)))
 4f4:	ed ea       	ldi	r30, 0xAD	; 173
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = pdata[i]; // start transmission
 4f8:	9d 91       	ld	r25, X+
 4fa:	98 83       	st	Y, r25
		while (!(SPSR1 & (1 << SPIF)))
 4fc:	90 81       	ld	r25, Z
 4fe:	99 23       	and	r25, r25
 500:	ec f7       	brge	.-6      	; 0x4fc <spi1_send_bytes+0x1c>
}
void spi1_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 502:	a2 17       	cp	r26, r18
 504:	b3 07       	cpc	r27, r19
 506:	c1 f7       	brne	.-16     	; 0x4f8 <spi1_send_bytes+0x18>
	{
		SPDR1 = pdata[i]; // start transmission
		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
	}
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 50e:	e0 ec       	ldi	r30, 0xC0	; 192
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	90 81       	ld	r25, Z
 514:	95 ff       	sbrs	r25, 5
 516:	fd cf       	rjmp	.-6      	; 0x512 <usart0_send_char+0x4>
 518:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 51c:	08 95       	ret

0000051e <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 51e:	98 e9       	ldi	r25, 0x98	; 152
 520:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 524:	96 e0       	ldi	r25, 0x06	; 6
 526:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 52a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
