
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000c3c  00000cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800130  00800130  00000d00  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026a1  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ac  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001331  00000000  00000000  00004735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  00005a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0a  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c22  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ec e3       	ldi	r30, 0x3C	; 60
  e0:	fc e0       	ldi	r31, 0x0C	; 12
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 33       	cpi	r26, 0x30	; 48
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e3       	ldi	r26, 0x30	; 48
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 33       	cpi	r26, 0x3B	; 59
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 ca 00 	call	0x194	; 0x194 <main>
 102:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& FUNCTIONS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 10a:	6c 9a       	sbi	0x0d, 4	; 13
	DDRC |= (1<<4);
 10c:	3c 9a       	sbi	0x07, 4	; 7
 10e:	08 95       	ret

00000110 <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	69 f0       	breq	.+26     	; 0x12e <delay_ms+0x1e>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_ms+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <delay_ms+0x12>
 122:	00 00       	nop
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	a9 f7       	brne	.-22     	; 0x118 <delay_ms+0x8>
 12e:	08 95       	ret

00000130 <flash_LED>:
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <flash_LED+0x2c>
 13e:	8b 01       	movw	r16, r22
 140:	d8 2f       	mov	r29, r24
 142:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 144:	68 94       	set
 146:	ff 24       	eor	r15, r15
 148:	f4 f8       	bld	r15, 4
 14a:	9e b1       	in	r25, 0x0e	; 14
 14c:	9f 25       	eor	r25, r15
 14e:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 150:	c8 01       	movw	r24, r16
 152:	0e 94 88 00 	call	0x110	; 0x110 <delay_ms>
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	dc 13       	cpse	r29, r28
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	08 95       	ret

00000168 <setup_timer_1>:
	}
}
void setup_timer_1()
{
	
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0); // clear OCRA on compare
 168:	e0 e8       	ldi	r30, 0x80	; 128
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 6c       	ori	r24, 0xC0	; 192
 170:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12); // 1024 prescaler, CTC mode
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8d 60       	ori	r24, 0x0D	; 13
 17a:	80 83       	st	Z, r24
	OCR1A = 7812; // 1 second period
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	9e e1       	ldi	r25, 0x1E	; 30
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1<<OCIE1A); // set interrupt on OCA compare
 188:	ef e6       	ldi	r30, 0x6F	; 111
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <main>:
volatile float signal_strength = 0;


int main(void)
{
	setup_gpios(); 
 194:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	
	/* USART setup */
	setup_usart0(BR_38400); // for NEO6 GPS
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	0e 94 84 03 	call	0x708	; 0x708 <setup_usart0>
	
	/* nRF24L01 setup */
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 19e:	0e 94 4c 03 	call	0x698	; 0x698 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 1a2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <mirf_init>
	mirf_config(); // configure nRF24L01
 1a6:	0e 94 31 02 	call	0x462	; 0x462 <mirf_config>
	mirf_set_TADDR(tx_address);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mirf_set_TADDR>
	setup_timer_1();
 1b2:	0e 94 b4 00 	call	0x168	; 0x168 <setup_timer_1>
	
	buffer[0] = 10;
 1b6:	e8 e3       	ldi	r30, 0x38	; 56
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	80 83       	st	Z, r24
	buffer[1] = 20;
 1be:	84 e1       	ldi	r24, 0x14	; 20
 1c0:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = 30;
 1c2:	8e e1       	ldi	r24, 0x1E	; 30
 1c4:	82 83       	std	Z+2, r24	; 0x02
			
	sei(); // enable global interrupts
 1c6:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 1c8:	62 e3       	ldi	r22, 0x32	; 50
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	0e 94 98 00 	call	0x130	; 0x130 <flash_LED>
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x42>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x48>
 1dc:	00 00       	nop
	_delay_ms(10);
	
    while (1) 
    {
		TOGGLE_LED;
 1de:	68 94       	set
 1e0:	ff 24       	eor	r15, r15
 1e2:	f4 f8       	bld	r15, 4
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1e4:	c8 e3       	ldi	r28, 0x38	; 56
 1e6:	d1 e0       	ldi	r29, 0x01	; 1
 1e8:	0c 2f       	mov	r16, r28
 1ea:	1d 2f       	mov	r17, r29
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
	_delay_ms(10);
	
    while (1) 
    {
		TOGGLE_LED;
 1ec:	8e b1       	in	r24, 0x0e	; 14
 1ee:	8f 25       	eor	r24, r15
 1f0:	8e b9       	out	0x0e, r24	; 14
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1f2:	88 81       	ld	r24, Y
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	88 83       	st	Y, r24
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	8a 83       	std	Y+2, r24	; 0x02
		  
		mirf_send(buffer, mirf_PAYLOAD);
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	80 2f       	mov	r24, r16
 208:	91 2f       	mov	r25, r17
 20a:	0e 94 89 02 	call	0x512	; 0x512 <mirf_send>
		
		transmission_count++;
 20e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <transmission_count>
 212:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <transmission_count+0x1>
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <transmission_count+0x1>
 21c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <transmission_count>
		
		while (!mirf_data_sent())
 220:	0e c0       	rjmp	.+28     	; 0x23e <main+0xaa>
		{
			if (mirf_read_MAX_RT())
 222:	0e 94 0e 02 	call	0x41c	; 0x41c <mirf_read_MAX_RT>
 226:	88 23       	and	r24, r24
 228:	51 f0       	breq	.+20     	; 0x23e <main+0xaa>
			{
				max_rt_count++;	
 22a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <max_rt_count>
 22e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <max_rt_count+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <max_rt_count+0x1>
 238:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <max_rt_count>
				break;
 23c:	d7 cf       	rjmp	.-82     	; 0x1ec <main+0x58>
		  
		mirf_send(buffer, mirf_PAYLOAD);
		
		transmission_count++;
		
		while (!mirf_data_sent())
 23e:	0e 94 01 02 	call	0x402	; 0x402 <mirf_data_sent>
 242:	88 23       	and	r24, r24
 244:	71 f3       	breq	.-36     	; 0x222 <main+0x8e>
 246:	d2 cf       	rjmp	.-92     	; 0x1ec <main+0x58>

00000248 <__vector_13>:


//&&&&&&&&&&&&&&&&&&&&&& ISRs &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
ISR(TIMER1_COMPA_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	print_0("data rate: ;");
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 b0 02 	call	0x560	; 0x560 <print_0>
	print_int_0(transmission_count);
 27e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <transmission_count>
 282:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <transmission_count+0x1>
 286:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <print_int_0>
	println_0(" pkt/sec;");
 28a:	82 e1       	ldi	r24, 0x12	; 18
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <println_0>
	
	signal_strength = ((float)max_rt_count/(float)transmission_count);
 292:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <max_rt_count>
 296:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <max_rt_count+0x1>
 29a:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <transmission_count>
 29e:	d0 91 35 01 	lds	r29, 0x0135	; 0x800135 <transmission_count+0x1>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 9b 04 	call	0x936	; 0x936 <__floatunsisf>
 2aa:	6b 01       	movw	r12, r22
 2ac:	7c 01       	movw	r14, r24
 2ae:	be 01       	movw	r22, r28
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 9b 04 	call	0x936	; 0x936 <__floatunsisf>
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3>
 2c4:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 2c8:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 2cc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 2d0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	if (signal_strength>.99)
 2d4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 2d8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 2dc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 2e0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 2e4:	24 ea       	ldi	r18, 0xA4	; 164
 2e6:	30 e7       	ldi	r19, 0x70	; 112
 2e8:	4d e7       	ldi	r20, 0x7D	; 125
 2ea:	5f e3       	ldi	r21, 0x3F	; 63
 2ec:	0e 94 29 05 	call	0xa52	; 0xa52 <__gesf2>
 2f0:	18 16       	cp	r1, r24
 2f2:	64 f4       	brge	.+24     	; 0x30c <__vector_13+0xc4>
		signal_strength = .99;
 2f4:	84 ea       	ldi	r24, 0xA4	; 164
 2f6:	90 e7       	ldi	r25, 0x70	; 112
 2f8:	ad e7       	ldi	r26, 0x7D	; 125
 2fa:	bf e3       	ldi	r27, 0x3F	; 63
 2fc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 300:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 304:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <__data_end+0x2>
 308:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <__data_end+0x3>
	
	signal_strength = 1-signal_strength;
 30c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 310:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
 314:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end+0x2>
 318:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x3>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	9f e3       	ldi	r25, 0x3F	; 63
 324:	0e 94 8d 03 	call	0x71a	; 0x71a <__subsf3>
 328:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 32c:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 330:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 334:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	
	signal_strength *= 100;
 338:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 33c:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 340:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 344:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	48 ec       	ldi	r20, 0xC8	; 200
 34e:	52 e4       	ldi	r21, 0x42	; 66
 350:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3>
 354:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 358:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 35c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 360:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	
	max_rt_count = (uint16_t)signal_strength;
 364:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 368:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 36c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 370:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 374:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fixunssfsi>
 378:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <max_rt_count+0x1>
 37c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <max_rt_count>
	
	print_0("Signal strength: ;");
 380:	8c e1       	ldi	r24, 0x1C	; 28
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 b0 02 	call	0x560	; 0x560 <print_0>
	print_int_0(max_rt_count);
 388:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <max_rt_count>
 38c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <max_rt_count+0x1>
 390:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <print_int_0>
	print_char_0('%');
 394:	85 e2       	ldi	r24, 0x25	; 37
 396:	0e 94 ad 02 	call	0x55a	; 0x55a <print_char_0>
	print_char_0(NL);
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	0e 94 ad 02 	call	0x55a	; 0x55a <print_char_0>
	print_char_0(NL);
 3a0:	8a e0       	ldi	r24, 0x0A	; 10
 3a2:	0e 94 ad 02 	call	0x55a	; 0x55a <print_char_0>
	
	transmission_count = 0;
 3a6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <transmission_count+0x1>
 3aa:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <transmission_count>
	signal_strength = 0;
 3ae:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 3b2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 3b6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end+0x2>
 3ba:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x3>
	max_rt_count = 0;
 3be:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <max_rt_count+0x1>
 3c2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <max_rt_count>
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <mirf_init>:
void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
	mirf_write_register(RX_ADDR_P1, adr, 5);
	mirf_CE_hi;
 3f4:	3f 9a       	sbi	0x07, 7	; 7
 3f6:	56 9a       	sbi	0x0a, 6	; 10
 3f8:	47 98       	cbi	0x08, 7	; 8
 3fa:	5e 9a       	sbi	0x0b, 6	; 11
 3fc:	0e 94 4c 03 	call	0x698	; 0x698 <spi1_master_initialize>
 400:	08 95       	ret

00000402 <mirf_data_sent>:
 402:	5e 98       	cbi	0x0b, 6	; 11
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi1_exchange_char>
 40a:	5e 9a       	sbi	0x0b, 6	; 11
 40c:	ef ec       	ldi	r30, 0xCF	; 207
 40e:	f7 e0       	ldi	r31, 0x07	; 7
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <mirf_data_sent+0xe>
 414:	00 c0       	rjmp	.+0      	; 0x416 <mirf_data_sent+0x14>
 416:	00 00       	nop
 418:	80 72       	andi	r24, 0x20	; 32
 41a:	08 95       	ret

0000041c <mirf_read_MAX_RT>:
 41c:	5e 98       	cbi	0x0b, 6	; 11
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi1_exchange_char>
 424:	5e 9a       	sbi	0x0b, 6	; 11
 426:	ef ec       	ldi	r30, 0xCF	; 207
 428:	f7 e0       	ldi	r31, 0x07	; 7
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <mirf_read_MAX_RT+0xe>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <mirf_read_MAX_RT+0x14>
 430:	00 00       	nop
 432:	82 95       	swap	r24
 434:	81 70       	andi	r24, 0x01	; 1
 436:	08 95       	ret

00000438 <mirf_config_register>:
 438:	cf 93       	push	r28
 43a:	c6 2f       	mov	r28, r22
 43c:	5e 98       	cbi	0x0b, 6	; 11
 43e:	8f 71       	andi	r24, 0x1F	; 31
 440:	80 62       	ori	r24, 0x20	; 32
 442:	0e 94 53 03 	call	0x6a6	; 0x6a6 <spi1_send_char>
 446:	82 e4       	ldi	r24, 0x42	; 66
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <mirf_config_register+0x10>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <mirf_config_register+0x16>
 44e:	8c 2f       	mov	r24, r28
 450:	0e 94 53 03 	call	0x6a6	; 0x6a6 <spi1_send_char>
 454:	5e 9a       	sbi	0x0b, 6	; 11
 456:	82 e4       	ldi	r24, 0x42	; 66
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <mirf_config_register+0x20>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <mirf_config_register+0x26>
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <mirf_config>:
 462:	6c e6       	ldi	r22, 0x6C	; 108
 464:	85 e0       	ldi	r24, 0x05	; 5
 466:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	81 e1       	ldi	r24, 0x11	; 17
 46e:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	82 e1       	ldi	r24, 0x12	; 18
 476:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	83 e1       	ldi	r24, 0x13	; 19
 47e:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	84 e1       	ldi	r24, 0x14	; 20
 486:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	85 e1       	ldi	r24, 0x15	; 21
 48e:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	86 e1       	ldi	r24, 0x16	; 22
 496:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 49a:	66 e0       	ldi	r22, 0x06	; 6
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 4b2:	6f ef       	ldi	r22, 0xFF	; 255
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 4ba:	60 e7       	ldi	r22, 0x70	; 112
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
 4c2:	08 95       	ret

000004c4 <mirf_write_register>:
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	eb 01       	movw	r28, r22
 4cc:	14 2f       	mov	r17, r20
 4ce:	5e 98       	cbi	0x0b, 6	; 11
 4d0:	8f 71       	andi	r24, 0x1F	; 31
 4d2:	80 62       	ori	r24, 0x20	; 32
 4d4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <spi1_send_char>
 4d8:	61 2f       	mov	r22, r17
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi1_send_bytes>
 4e0:	5e 9a       	sbi	0x0b, 6	; 11
 4e2:	82 e4       	ldi	r24, 0x42	; 66
 4e4:	8a 95       	dec	r24
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <mirf_write_register+0x20>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <mirf_write_register+0x26>
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	08 95       	ret

000004f2 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 4f8:	45 e0       	ldi	r20, 0x05	; 5
 4fa:	bc 01       	movw	r22, r24
 4fc:	8a e0       	ldi	r24, 0x0A	; 10
 4fe:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 502:	45 e0       	ldi	r20, 0x05	; 5
 504:	be 01       	movw	r22, r28
 506:	80 e1       	ldi	r24, 0x10	; 16
 508:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mirf_write_register>
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
 51a:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 51c:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 51e:	6a e5       	ldi	r22, 0x5A	; 90
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	82 e4       	ldi	r24, 0x42	; 66
 528:	8a 95       	dec	r24
 52a:	f1 f7       	brne	.-4      	; 0x528 <mirf_send+0x16>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <mirf_send+0x1c>
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 52e:	60 e7       	ldi	r22, 0x70	; 112
 530:	87 e0       	ldi	r24, 0x07	; 7
 532:	0e 94 1c 02 	call	0x438	; 0x438 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 536:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 538:	80 ea       	ldi	r24, 0xA0	; 160
 53a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 53e:	61 2f       	mov	r22, r17
 540:	ce 01       	movw	r24, r28
 542:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 546:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 548:	47 9a       	sbi	0x08, 7	; 8
 54a:	88 e2       	ldi	r24, 0x28	; 40
 54c:	8a 95       	dec	r24
 54e:	f1 f7       	brne	.-4      	; 0x54c <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 550:	47 98       	cbi	0x08, 7	; 8
}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	08 95       	ret

0000055a <print_char_0>:
		usart1_send_char(char_array[i]);
		
	}
	usart1_send_char(0x0D); // CR
	usart1_send_char(0x0A); // NL
}
 55a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 55e:	08 95       	ret

00000560 <print_0>:
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	fc 01       	movw	r30, r24
 56a:	80 81       	ld	r24, Z
 56c:	8a 30       	cpi	r24, 0x0A	; 10
 56e:	b1 f0       	breq	.+44     	; 0x59c <print_0+0x3c>
 570:	8b 33       	cpi	r24, 0x3B	; 59
 572:	61 f4       	brne	.+24     	; 0x58c <print_0+0x2c>
 574:	13 c0       	rjmp	.+38     	; 0x59c <print_0+0x3c>
 576:	89 91       	ld	r24, Y+
 578:	8a 30       	cpi	r24, 0x0A	; 10
 57a:	81 f0       	breq	.+32     	; 0x59c <print_0+0x3c>
 57c:	8b 33       	cpi	r24, 0x3B	; 59
 57e:	71 f0       	breq	.+28     	; 0x59c <print_0+0x3c>
 580:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 584:	0c 17       	cp	r16, r28
 586:	1d 07       	cpc	r17, r29
 588:	b1 f7       	brne	.-20     	; 0x576 <print_0+0x16>
 58a:	08 c0       	rjmp	.+16     	; 0x59c <print_0+0x3c>
 58c:	8f 01       	movw	r16, r30
 58e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 592:	e8 01       	movw	r28, r16
 594:	21 96       	adiw	r28, 0x01	; 1
 596:	08 53       	subi	r16, 0x38	; 56
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	ed cf       	rjmp	.-38     	; 0x576 <print_0+0x16>
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <println_0>:
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	8c 01       	movw	r16, r24
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	8a 30       	cpi	r24, 0x0A	; 10
 5b6:	69 f0       	breq	.+26     	; 0x5d2 <println_0+0x2c>
 5b8:	8b 33       	cpi	r24, 0x3B	; 59
 5ba:	79 f4       	brne	.+30     	; 0x5da <println_0+0x34>
 5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <println_0+0x2c>
 5be:	89 91       	ld	r24, Y+
 5c0:	8a 30       	cpi	r24, 0x0A	; 10
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <println_0+0x2c>
 5c4:	8b 33       	cpi	r24, 0x3B	; 59
 5c6:	29 f0       	breq	.+10     	; 0x5d2 <println_0+0x2c>
 5c8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 5cc:	0c 17       	cp	r16, r28
 5ce:	1d 07       	cpc	r17, r29
 5d0:	b1 f7       	brne	.-20     	; 0x5be <println_0+0x18>
 5d2:	8a e0       	ldi	r24, 0x0A	; 10
 5d4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <println_0+0x42>
 5da:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
 5de:	e8 01       	movw	r28, r16
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	08 53       	subi	r16, 0x38	; 56
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	eb cf       	rjmp	.-42     	; 0x5be <println_0+0x18>
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <print_int_0>:

void print_int_0(int number)
{
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	c0 54       	subi	r28, 0x40	; 64
 604:	d1 09       	sbc	r29, r1
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	8c 01       	movw	r16, r24
	if (number == 0)
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	31 f4       	brne	.+12     	; 0x622 <print_int_0+0x30>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 616:	80 e3       	ldi	r24, 0x30	; 48
 618:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
{
	if (number == 0)
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
 61c:	e1 2c       	mov	r14, r1
 61e:	f1 2c       	mov	r15, r1
 620:	16 c0       	rjmp	.+44     	; 0x64e <print_int_0+0x5c>
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 626:	ea e0       	ldi	r30, 0x0A	; 10
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	01 c0       	rjmp	.+2      	; 0x62e <print_int_0+0x3c>
		num_digit++;
 62c:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 62e:	bf 01       	movw	r22, r30
 630:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__divmodhi4>
 634:	cb 01       	movw	r24, r22
		num_digit++;
 636:	79 01       	movw	r14, r18
 638:	4f ef       	ldi	r20, 0xFF	; 255
 63a:	e4 1a       	sub	r14, r20
 63c:	f4 0a       	sbc	r15, r20
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	a9 f7       	brne	.-22     	; 0x62c <print_int_0+0x3a>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 642:	11 23       	and	r17, r17
 644:	24 f4       	brge	.+8      	; 0x64e <print_int_0+0x5c>
 646:	79 01       	movw	r14, r18
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	e8 0e       	add	r14, r24
 64c:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 64e:	4a e0       	ldi	r20, 0x0A	; 10
 650:	be 01       	movw	r22, r28
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	c8 01       	movw	r24, r16
 658:	0e 94 e7 05 	call	0xbce	; 0xbce <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 65c:	1e 14       	cp	r1, r14
 65e:	1f 04       	cpc	r1, r15
 660:	6c f4       	brge	.+26     	; 0x67c <print_int_0+0x8a>
 662:	8e 01       	movw	r16, r28
 664:	0f 5f       	subi	r16, 0xFF	; 255
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	e0 0e       	add	r14, r16
 66a:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 66c:	f8 01       	movw	r30, r16
 66e:	81 91       	ld	r24, Z+
 670:	8f 01       	movw	r16, r30
 672:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 676:	0e 15       	cp	r16, r14
 678:	1f 05       	cpc	r17, r15
 67a:	c1 f7       	brne	.-16     	; 0x66c <print_int_0+0x7a>
	{
		usart0_send_char(char_array[i]);
	}
}
 67c:	c0 5c       	subi	r28, 0xC0	; 192
 67e:	df 4f       	sbci	r29, 0xFF	; 255
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	f8 94       	cli
 684:	de bf       	out	0x3e, r29	; 62
 686:	0f be       	out	0x3f, r0	; 63
 688:	cd bf       	out	0x3d, r28	; 61
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	08 95       	ret

00000698 <spi1_master_initialize>:
 698:	6b 9a       	sbi	0x0d, 3	; 13
 69a:	57 9a       	sbi	0x0a, 7	; 10
 69c:	56 9a       	sbi	0x0a, 6	; 10
 69e:	82 e5       	ldi	r24, 0x52	; 82
 6a0:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 6a4:	08 95       	ret

000006a6 <spi1_send_char>:
 6a6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6aa:	ed ea       	ldi	r30, 0xAD	; 173
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	88 23       	and	r24, r24
 6b2:	ec f7       	brge	.-6      	; 0x6ae <spi1_send_char+0x8>
 6b4:	08 95       	ret

000006b6 <spi1_exchange_char>:
 6b6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6ba:	ed ea       	ldi	r30, 0xAD	; 173
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	88 23       	and	r24, r24
 6c2:	ec f7       	brge	.-6      	; 0x6be <spi1_exchange_char+0x8>
 6c4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6c8:	08 95       	ret

000006ca <spi1_send_bytes>:
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	66 23       	and	r22, r22
 6d0:	81 f0       	breq	.+32     	; 0x6f2 <spi1_send_bytes+0x28>
 6d2:	dc 01       	movw	r26, r24
 6d4:	9c 01       	movw	r18, r24
 6d6:	26 0f       	add	r18, r22
 6d8:	31 1d       	adc	r19, r1
 6da:	ce ea       	ldi	r28, 0xAE	; 174
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
 6de:	ed ea       	ldi	r30, 0xAD	; 173
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	9d 91       	ld	r25, X+
 6e4:	98 83       	st	Y, r25
 6e6:	90 81       	ld	r25, Z
 6e8:	99 23       	and	r25, r25
 6ea:	ec f7       	brge	.-6      	; 0x6e6 <spi1_send_bytes+0x1c>
 6ec:	a2 17       	cp	r26, r18
 6ee:	b3 07       	cpc	r27, r19
 6f0:	c1 f7       	brne	.-16     	; 0x6e2 <spi1_send_bytes+0x18>
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 6f8:	e0 ec       	ldi	r30, 0xC0	; 192
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	90 81       	ld	r25, Z
 6fe:	95 ff       	sbrs	r25, 5
 700:	fd cf       	rjmp	.-6      	; 0x6fc <usart0_send_char+0x4>
 702:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 706:	08 95       	ret

00000708 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 708:	98 e9       	ldi	r25, 0x98	; 152
 70a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 70e:	96 e0       	ldi	r25, 0x06	; 6
 710:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 714:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 718:	08 95       	ret

0000071a <__subsf3>:
 71a:	50 58       	subi	r21, 0x80	; 128

0000071c <__addsf3>:
 71c:	bb 27       	eor	r27, r27
 71e:	aa 27       	eor	r26, r26
 720:	0e 94 a5 03 	call	0x74a	; 0x74a <__addsf3x>
 724:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 728:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 72c:	38 f0       	brcs	.+14     	; 0x73c <__addsf3+0x20>
 72e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 732:	20 f0       	brcs	.+8      	; 0x73c <__addsf3+0x20>
 734:	39 f4       	brne	.+14     	; 0x744 <__addsf3+0x28>
 736:	9f 3f       	cpi	r25, 0xFF	; 255
 738:	19 f4       	brne	.+6      	; 0x740 <__addsf3+0x24>
 73a:	26 f4       	brtc	.+8      	; 0x744 <__addsf3+0x28>
 73c:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>
 740:	0e f4       	brtc	.+2      	; 0x744 <__addsf3+0x28>
 742:	e0 95       	com	r30
 744:	e7 fb       	bst	r30, 7
 746:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>

0000074a <__addsf3x>:
 74a:	e9 2f       	mov	r30, r25
 74c:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 750:	58 f3       	brcs	.-42     	; 0x728 <__addsf3+0xc>
 752:	ba 17       	cp	r27, r26
 754:	62 07       	cpc	r22, r18
 756:	73 07       	cpc	r23, r19
 758:	84 07       	cpc	r24, r20
 75a:	95 07       	cpc	r25, r21
 75c:	20 f0       	brcs	.+8      	; 0x766 <__addsf3x+0x1c>
 75e:	79 f4       	brne	.+30     	; 0x77e <__addsf3x+0x34>
 760:	a6 f5       	brtc	.+104    	; 0x7ca <__addsf3x+0x80>
 762:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_zero>
 766:	0e f4       	brtc	.+2      	; 0x76a <__addsf3x+0x20>
 768:	e0 95       	com	r30
 76a:	0b 2e       	mov	r0, r27
 76c:	ba 2f       	mov	r27, r26
 76e:	a0 2d       	mov	r26, r0
 770:	0b 01       	movw	r0, r22
 772:	b9 01       	movw	r22, r18
 774:	90 01       	movw	r18, r0
 776:	0c 01       	movw	r0, r24
 778:	ca 01       	movw	r24, r20
 77a:	a0 01       	movw	r20, r0
 77c:	11 24       	eor	r1, r1
 77e:	ff 27       	eor	r31, r31
 780:	59 1b       	sub	r21, r25
 782:	99 f0       	breq	.+38     	; 0x7aa <__addsf3x+0x60>
 784:	59 3f       	cpi	r21, 0xF9	; 249
 786:	50 f4       	brcc	.+20     	; 0x79c <__addsf3x+0x52>
 788:	50 3e       	cpi	r21, 0xE0	; 224
 78a:	68 f1       	brcs	.+90     	; 0x7e6 <__addsf3x+0x9c>
 78c:	1a 16       	cp	r1, r26
 78e:	f0 40       	sbci	r31, 0x00	; 0
 790:	a2 2f       	mov	r26, r18
 792:	23 2f       	mov	r18, r19
 794:	34 2f       	mov	r19, r20
 796:	44 27       	eor	r20, r20
 798:	58 5f       	subi	r21, 0xF8	; 248
 79a:	f3 cf       	rjmp	.-26     	; 0x782 <__addsf3x+0x38>
 79c:	46 95       	lsr	r20
 79e:	37 95       	ror	r19
 7a0:	27 95       	ror	r18
 7a2:	a7 95       	ror	r26
 7a4:	f0 40       	sbci	r31, 0x00	; 0
 7a6:	53 95       	inc	r21
 7a8:	c9 f7       	brne	.-14     	; 0x79c <__addsf3x+0x52>
 7aa:	7e f4       	brtc	.+30     	; 0x7ca <__addsf3x+0x80>
 7ac:	1f 16       	cp	r1, r31
 7ae:	ba 0b       	sbc	r27, r26
 7b0:	62 0b       	sbc	r22, r18
 7b2:	73 0b       	sbc	r23, r19
 7b4:	84 0b       	sbc	r24, r20
 7b6:	ba f0       	brmi	.+46     	; 0x7e6 <__addsf3x+0x9c>
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	a1 f0       	breq	.+40     	; 0x7e4 <__addsf3x+0x9a>
 7bc:	ff 0f       	add	r31, r31
 7be:	bb 1f       	adc	r27, r27
 7c0:	66 1f       	adc	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	c2 f7       	brpl	.-16     	; 0x7b8 <__addsf3x+0x6e>
 7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <__addsf3x+0x9c>
 7ca:	ba 0f       	add	r27, r26
 7cc:	62 1f       	adc	r22, r18
 7ce:	73 1f       	adc	r23, r19
 7d0:	84 1f       	adc	r24, r20
 7d2:	48 f4       	brcc	.+18     	; 0x7e6 <__addsf3x+0x9c>
 7d4:	87 95       	ror	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f7 95       	ror	r31
 7de:	9e 3f       	cpi	r25, 0xFE	; 254
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <__addsf3x+0x9a>
 7e2:	b0 cf       	rjmp	.-160    	; 0x744 <__addsf3+0x28>
 7e4:	93 95       	inc	r25
 7e6:	88 0f       	add	r24, r24
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <__addsf3x+0xa2>
 7ea:	99 27       	eor	r25, r25
 7ec:	ee 0f       	add	r30, r30
 7ee:	97 95       	ror	r25
 7f0:	87 95       	ror	r24
 7f2:	08 95       	ret

000007f4 <__divsf3>:
 7f4:	0e 94 0e 04 	call	0x81c	; 0x81c <__divsf3x>
 7f8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 7fc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 800:	58 f0       	brcs	.+22     	; 0x818 <__divsf3+0x24>
 802:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 806:	40 f0       	brcs	.+16     	; 0x818 <__divsf3+0x24>
 808:	29 f4       	brne	.+10     	; 0x814 <__divsf3+0x20>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	29 f0       	breq	.+10     	; 0x818 <__divsf3+0x24>
 80e:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 812:	51 11       	cpse	r21, r1
 814:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 818:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>

0000081c <__divsf3x>:
 81c:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 820:	68 f3       	brcs	.-38     	; 0x7fc <__divsf3+0x8>

00000822 <__divsf3_pse>:
 822:	99 23       	and	r25, r25
 824:	b1 f3       	breq	.-20     	; 0x812 <__divsf3+0x1e>
 826:	55 23       	and	r21, r21
 828:	91 f3       	breq	.-28     	; 0x80e <__divsf3+0x1a>
 82a:	95 1b       	sub	r25, r21
 82c:	55 0b       	sbc	r21, r21
 82e:	bb 27       	eor	r27, r27
 830:	aa 27       	eor	r26, r26
 832:	62 17       	cp	r22, r18
 834:	73 07       	cpc	r23, r19
 836:	84 07       	cpc	r24, r20
 838:	38 f0       	brcs	.+14     	; 0x848 <__divsf3_pse+0x26>
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	22 0f       	add	r18, r18
 840:	33 1f       	adc	r19, r19
 842:	44 1f       	adc	r20, r20
 844:	aa 1f       	adc	r26, r26
 846:	a9 f3       	breq	.-22     	; 0x832 <__divsf3_pse+0x10>
 848:	35 d0       	rcall	.+106    	; 0x8b4 <__divsf3_pse+0x92>
 84a:	0e 2e       	mov	r0, r30
 84c:	3a f0       	brmi	.+14     	; 0x85c <__divsf3_pse+0x3a>
 84e:	e0 e8       	ldi	r30, 0x80	; 128
 850:	32 d0       	rcall	.+100    	; 0x8b6 <__divsf3_pse+0x94>
 852:	91 50       	subi	r25, 0x01	; 1
 854:	50 40       	sbci	r21, 0x00	; 0
 856:	e6 95       	lsr	r30
 858:	00 1c       	adc	r0, r0
 85a:	ca f7       	brpl	.-14     	; 0x84e <__divsf3_pse+0x2c>
 85c:	2b d0       	rcall	.+86     	; 0x8b4 <__divsf3_pse+0x92>
 85e:	fe 2f       	mov	r31, r30
 860:	29 d0       	rcall	.+82     	; 0x8b4 <__divsf3_pse+0x92>
 862:	66 0f       	add	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	bb 1f       	adc	r27, r27
 86a:	26 17       	cp	r18, r22
 86c:	37 07       	cpc	r19, r23
 86e:	48 07       	cpc	r20, r24
 870:	ab 07       	cpc	r26, r27
 872:	b0 e8       	ldi	r27, 0x80	; 128
 874:	09 f0       	breq	.+2      	; 0x878 <__divsf3_pse+0x56>
 876:	bb 0b       	sbc	r27, r27
 878:	80 2d       	mov	r24, r0
 87a:	bf 01       	movw	r22, r30
 87c:	ff 27       	eor	r31, r31
 87e:	93 58       	subi	r25, 0x83	; 131
 880:	5f 4f       	sbci	r21, 0xFF	; 255
 882:	3a f0       	brmi	.+14     	; 0x892 <__divsf3_pse+0x70>
 884:	9e 3f       	cpi	r25, 0xFE	; 254
 886:	51 05       	cpc	r21, r1
 888:	78 f0       	brcs	.+30     	; 0x8a8 <__divsf3_pse+0x86>
 88a:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 88e:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 892:	5f 3f       	cpi	r21, 0xFF	; 255
 894:	e4 f3       	brlt	.-8      	; 0x88e <__divsf3_pse+0x6c>
 896:	98 3e       	cpi	r25, 0xE8	; 232
 898:	d4 f3       	brlt	.-12     	; 0x88e <__divsf3_pse+0x6c>
 89a:	86 95       	lsr	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f7 95       	ror	r31
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__divsf3_pse+0x78>
 8a8:	88 0f       	add	r24, r24
 8aa:	91 1d       	adc	r25, r1
 8ac:	96 95       	lsr	r25
 8ae:	87 95       	ror	r24
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret
 8b4:	e1 e0       	ldi	r30, 0x01	; 1
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	bb 1f       	adc	r27, r27
 8be:	62 17       	cp	r22, r18
 8c0:	73 07       	cpc	r23, r19
 8c2:	84 07       	cpc	r24, r20
 8c4:	ba 07       	cpc	r27, r26
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__divsf3_pse+0xae>
 8c8:	62 1b       	sub	r22, r18
 8ca:	73 0b       	sbc	r23, r19
 8cc:	84 0b       	sbc	r24, r20
 8ce:	ba 0b       	sbc	r27, r26
 8d0:	ee 1f       	adc	r30, r30
 8d2:	88 f7       	brcc	.-30     	; 0x8b6 <__divsf3_pse+0x94>
 8d4:	e0 95       	com	r30
 8d6:	08 95       	ret

000008d8 <__fixunssfsi>:
 8d8:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_splitA>
 8dc:	88 f0       	brcs	.+34     	; 0x900 <__stack+0x1>
 8de:	9f 57       	subi	r25, 0x7F	; 127
 8e0:	98 f0       	brcs	.+38     	; 0x908 <__stack+0x9>
 8e2:	b9 2f       	mov	r27, r25
 8e4:	99 27       	eor	r25, r25
 8e6:	b7 51       	subi	r27, 0x17	; 23
 8e8:	b0 f0       	brcs	.+44     	; 0x916 <__stack+0x17>
 8ea:	e1 f0       	breq	.+56     	; 0x924 <__stack+0x25>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	1a f0       	brmi	.+6      	; 0x8fc <__fixunssfsi+0x24>
 8f6:	ba 95       	dec	r27
 8f8:	c9 f7       	brne	.-14     	; 0x8ec <__fixunssfsi+0x14>
 8fa:	14 c0       	rjmp	.+40     	; 0x924 <__stack+0x25>
 8fc:	b1 30       	cpi	r27, 0x01	; 1
 8fe:	91 f0       	breq	.+36     	; 0x924 <__stack+0x25>
 900:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_zero>
 904:	b1 e0       	ldi	r27, 0x01	; 1
 906:	08 95       	ret
 908:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_zero>
 90c:	67 2f       	mov	r22, r23
 90e:	78 2f       	mov	r23, r24
 910:	88 27       	eor	r24, r24
 912:	b8 5f       	subi	r27, 0xF8	; 248
 914:	39 f0       	breq	.+14     	; 0x924 <__stack+0x25>
 916:	b9 3f       	cpi	r27, 0xF9	; 249
 918:	cc f3       	brlt	.-14     	; 0x90c <__stack+0xd>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b3 95       	inc	r27
 922:	d9 f7       	brne	.-10     	; 0x91a <__stack+0x1b>
 924:	3e f4       	brtc	.+14     	; 0x934 <__stack+0x35>
 926:	90 95       	com	r25
 928:	80 95       	com	r24
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	08 95       	ret

00000936 <__floatunsisf>:
 936:	e8 94       	clt
 938:	09 c0       	rjmp	.+18     	; 0x94c <__floatsisf+0x12>

0000093a <__floatsisf>:
 93a:	97 fb       	bst	r25, 7
 93c:	3e f4       	brtc	.+14     	; 0x94c <__floatsisf+0x12>
 93e:	90 95       	com	r25
 940:	80 95       	com	r24
 942:	70 95       	com	r23
 944:	61 95       	neg	r22
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	99 23       	and	r25, r25
 94e:	a9 f0       	breq	.+42     	; 0x97a <__floatsisf+0x40>
 950:	f9 2f       	mov	r31, r25
 952:	96 e9       	ldi	r25, 0x96	; 150
 954:	bb 27       	eor	r27, r27
 956:	93 95       	inc	r25
 958:	f6 95       	lsr	r31
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f1 11       	cpse	r31, r1
 964:	f8 cf       	rjmp	.-16     	; 0x956 <__floatsisf+0x1c>
 966:	fa f4       	brpl	.+62     	; 0x9a6 <__floatsisf+0x6c>
 968:	bb 0f       	add	r27, r27
 96a:	11 f4       	brne	.+4      	; 0x970 <__floatsisf+0x36>
 96c:	60 ff       	sbrs	r22, 0
 96e:	1b c0       	rjmp	.+54     	; 0x9a6 <__floatsisf+0x6c>
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <__floatsisf+0x6c>
 97a:	88 23       	and	r24, r24
 97c:	11 f0       	breq	.+4      	; 0x982 <__floatsisf+0x48>
 97e:	96 e9       	ldi	r25, 0x96	; 150
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <__floatsisf+0x6a>
 982:	77 23       	and	r23, r23
 984:	21 f0       	breq	.+8      	; 0x98e <__floatsisf+0x54>
 986:	9e e8       	ldi	r25, 0x8E	; 142
 988:	87 2f       	mov	r24, r23
 98a:	76 2f       	mov	r23, r22
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__floatsisf+0x5e>
 98e:	66 23       	and	r22, r22
 990:	71 f0       	breq	.+28     	; 0x9ae <__floatsisf+0x74>
 992:	96 e8       	ldi	r25, 0x86	; 134
 994:	86 2f       	mov	r24, r22
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	2a f0       	brmi	.+10     	; 0x9a6 <__floatsisf+0x6c>
 99c:	9a 95       	dec	r25
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	da f7       	brpl	.-10     	; 0x99c <__floatsisf+0x62>
 9a6:	88 0f       	add	r24, r24
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <__fp_inf>:
 9b0:	97 f9       	bld	r25, 7
 9b2:	9f 67       	ori	r25, 0x7F	; 127
 9b4:	80 e8       	ldi	r24, 0x80	; 128
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	08 95       	ret

000009bc <__fp_nan>:
 9bc:	9f ef       	ldi	r25, 0xFF	; 255
 9be:	80 ec       	ldi	r24, 0xC0	; 192
 9c0:	08 95       	ret

000009c2 <__fp_pscA>:
 9c2:	00 24       	eor	r0, r0
 9c4:	0a 94       	dec	r0
 9c6:	16 16       	cp	r1, r22
 9c8:	17 06       	cpc	r1, r23
 9ca:	18 06       	cpc	r1, r24
 9cc:	09 06       	cpc	r0, r25
 9ce:	08 95       	ret

000009d0 <__fp_pscB>:
 9d0:	00 24       	eor	r0, r0
 9d2:	0a 94       	dec	r0
 9d4:	12 16       	cp	r1, r18
 9d6:	13 06       	cpc	r1, r19
 9d8:	14 06       	cpc	r1, r20
 9da:	05 06       	cpc	r0, r21
 9dc:	08 95       	ret

000009de <__fp_round>:
 9de:	09 2e       	mov	r0, r25
 9e0:	03 94       	inc	r0
 9e2:	00 0c       	add	r0, r0
 9e4:	11 f4       	brne	.+4      	; 0x9ea <__fp_round+0xc>
 9e6:	88 23       	and	r24, r24
 9e8:	52 f0       	brmi	.+20     	; 0x9fe <__fp_round+0x20>
 9ea:	bb 0f       	add	r27, r27
 9ec:	40 f4       	brcc	.+16     	; 0x9fe <__fp_round+0x20>
 9ee:	bf 2b       	or	r27, r31
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0x18>
 9f2:	60 ff       	sbrs	r22, 0
 9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__fp_round+0x20>
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	08 95       	ret

00000a00 <__fp_split3>:
 a00:	57 fd       	sbrc	r21, 7
 a02:	90 58       	subi	r25, 0x80	; 128
 a04:	44 0f       	add	r20, r20
 a06:	55 1f       	adc	r21, r21
 a08:	59 f0       	breq	.+22     	; 0xa20 <__fp_splitA+0x10>
 a0a:	5f 3f       	cpi	r21, 0xFF	; 255
 a0c:	71 f0       	breq	.+28     	; 0xa2a <__fp_splitA+0x1a>
 a0e:	47 95       	ror	r20

00000a10 <__fp_splitA>:
 a10:	88 0f       	add	r24, r24
 a12:	97 fb       	bst	r25, 7
 a14:	99 1f       	adc	r25, r25
 a16:	61 f0       	breq	.+24     	; 0xa30 <__fp_splitA+0x20>
 a18:	9f 3f       	cpi	r25, 0xFF	; 255
 a1a:	79 f0       	breq	.+30     	; 0xa3a <__fp_splitA+0x2a>
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret
 a20:	12 16       	cp	r1, r18
 a22:	13 06       	cpc	r1, r19
 a24:	14 06       	cpc	r1, r20
 a26:	55 1f       	adc	r21, r21
 a28:	f2 cf       	rjmp	.-28     	; 0xa0e <__fp_split3+0xe>
 a2a:	46 95       	lsr	r20
 a2c:	f1 df       	rcall	.-30     	; 0xa10 <__fp_splitA>
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__fp_splitA+0x30>
 a30:	16 16       	cp	r1, r22
 a32:	17 06       	cpc	r1, r23
 a34:	18 06       	cpc	r1, r24
 a36:	99 1f       	adc	r25, r25
 a38:	f1 cf       	rjmp	.-30     	; 0xa1c <__fp_splitA+0xc>
 a3a:	86 95       	lsr	r24
 a3c:	71 05       	cpc	r23, r1
 a3e:	61 05       	cpc	r22, r1
 a40:	08 94       	sec
 a42:	08 95       	ret

00000a44 <__fp_zero>:
 a44:	e8 94       	clt

00000a46 <__fp_szero>:
 a46:	bb 27       	eor	r27, r27
 a48:	66 27       	eor	r22, r22
 a4a:	77 27       	eor	r23, r23
 a4c:	cb 01       	movw	r24, r22
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__gesf2>:
 a52:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_cmp>
 a56:	08 f4       	brcc	.+2      	; 0xa5a <__gesf2+0x8>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	08 95       	ret

00000a5c <__mulsf3>:
 a5c:	0e 94 41 05 	call	0xa82	; 0xa82 <__mulsf3x>
 a60:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 a64:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 a68:	38 f0       	brcs	.+14     	; 0xa78 <__mulsf3+0x1c>
 a6a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 a6e:	20 f0       	brcs	.+8      	; 0xa78 <__mulsf3+0x1c>
 a70:	95 23       	and	r25, r21
 a72:	11 f0       	breq	.+4      	; 0xa78 <__mulsf3+0x1c>
 a74:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 a78:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>
 a7c:	11 24       	eor	r1, r1
 a7e:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>

00000a82 <__mulsf3x>:
 a82:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 a86:	70 f3       	brcs	.-36     	; 0xa64 <__mulsf3+0x8>

00000a88 <__mulsf3_pse>:
 a88:	95 9f       	mul	r25, r21
 a8a:	c1 f3       	breq	.-16     	; 0xa7c <__mulsf3+0x20>
 a8c:	95 0f       	add	r25, r21
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	55 1f       	adc	r21, r21
 a92:	62 9f       	mul	r22, r18
 a94:	f0 01       	movw	r30, r0
 a96:	72 9f       	mul	r23, r18
 a98:	bb 27       	eor	r27, r27
 a9a:	f0 0d       	add	r31, r0
 a9c:	b1 1d       	adc	r27, r1
 a9e:	63 9f       	mul	r22, r19
 aa0:	aa 27       	eor	r26, r26
 aa2:	f0 0d       	add	r31, r0
 aa4:	b1 1d       	adc	r27, r1
 aa6:	aa 1f       	adc	r26, r26
 aa8:	64 9f       	mul	r22, r20
 aaa:	66 27       	eor	r22, r22
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	66 1f       	adc	r22, r22
 ab2:	82 9f       	mul	r24, r18
 ab4:	22 27       	eor	r18, r18
 ab6:	b0 0d       	add	r27, r0
 ab8:	a1 1d       	adc	r26, r1
 aba:	62 1f       	adc	r22, r18
 abc:	73 9f       	mul	r23, r19
 abe:	b0 0d       	add	r27, r0
 ac0:	a1 1d       	adc	r26, r1
 ac2:	62 1f       	adc	r22, r18
 ac4:	83 9f       	mul	r24, r19
 ac6:	a0 0d       	add	r26, r0
 ac8:	61 1d       	adc	r22, r1
 aca:	22 1f       	adc	r18, r18
 acc:	74 9f       	mul	r23, r20
 ace:	33 27       	eor	r19, r19
 ad0:	a0 0d       	add	r26, r0
 ad2:	61 1d       	adc	r22, r1
 ad4:	23 1f       	adc	r18, r19
 ad6:	84 9f       	mul	r24, r20
 ad8:	60 0d       	add	r22, r0
 ada:	21 1d       	adc	r18, r1
 adc:	82 2f       	mov	r24, r18
 ade:	76 2f       	mov	r23, r22
 ae0:	6a 2f       	mov	r22, r26
 ae2:	11 24       	eor	r1, r1
 ae4:	9f 57       	subi	r25, 0x7F	; 127
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	9a f0       	brmi	.+38     	; 0xb10 <__mulsf3_pse+0x88>
 aea:	f1 f0       	breq	.+60     	; 0xb28 <__mulsf3_pse+0xa0>
 aec:	88 23       	and	r24, r24
 aee:	4a f0       	brmi	.+18     	; 0xb02 <__mulsf3_pse+0x7a>
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	bb 1f       	adc	r27, r27
 af6:	66 1f       	adc	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	91 50       	subi	r25, 0x01	; 1
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	a9 f7       	brne	.-22     	; 0xaec <__mulsf3_pse+0x64>
 b02:	9e 3f       	cpi	r25, 0xFE	; 254
 b04:	51 05       	cpc	r21, r1
 b06:	80 f0       	brcs	.+32     	; 0xb28 <__mulsf3_pse+0xa0>
 b08:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 b0c:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 b10:	5f 3f       	cpi	r21, 0xFF	; 255
 b12:	e4 f3       	brlt	.-8      	; 0xb0c <__mulsf3_pse+0x84>
 b14:	98 3e       	cpi	r25, 0xE8	; 232
 b16:	d4 f3       	brlt	.-12     	; 0xb0c <__mulsf3_pse+0x84>
 b18:	86 95       	lsr	r24
 b1a:	77 95       	ror	r23
 b1c:	67 95       	ror	r22
 b1e:	b7 95       	ror	r27
 b20:	f7 95       	ror	r31
 b22:	e7 95       	ror	r30
 b24:	9f 5f       	subi	r25, 0xFF	; 255
 b26:	c1 f7       	brne	.-16     	; 0xb18 <__mulsf3_pse+0x90>
 b28:	fe 2b       	or	r31, r30
 b2a:	88 0f       	add	r24, r24
 b2c:	91 1d       	adc	r25, r1
 b2e:	96 95       	lsr	r25
 b30:	87 95       	ror	r24
 b32:	97 f9       	bld	r25, 7
 b34:	08 95       	ret

00000b36 <__fp_cmp>:
 b36:	99 0f       	add	r25, r25
 b38:	00 08       	sbc	r0, r0
 b3a:	55 0f       	add	r21, r21
 b3c:	aa 0b       	sbc	r26, r26
 b3e:	e0 e8       	ldi	r30, 0x80	; 128
 b40:	fe ef       	ldi	r31, 0xFE	; 254
 b42:	16 16       	cp	r1, r22
 b44:	17 06       	cpc	r1, r23
 b46:	e8 07       	cpc	r30, r24
 b48:	f9 07       	cpc	r31, r25
 b4a:	c0 f0       	brcs	.+48     	; 0xb7c <__fp_cmp+0x46>
 b4c:	12 16       	cp	r1, r18
 b4e:	13 06       	cpc	r1, r19
 b50:	e4 07       	cpc	r30, r20
 b52:	f5 07       	cpc	r31, r21
 b54:	98 f0       	brcs	.+38     	; 0xb7c <__fp_cmp+0x46>
 b56:	62 1b       	sub	r22, r18
 b58:	73 0b       	sbc	r23, r19
 b5a:	84 0b       	sbc	r24, r20
 b5c:	95 0b       	sbc	r25, r21
 b5e:	39 f4       	brne	.+14     	; 0xb6e <__fp_cmp+0x38>
 b60:	0a 26       	eor	r0, r26
 b62:	61 f0       	breq	.+24     	; 0xb7c <__fp_cmp+0x46>
 b64:	23 2b       	or	r18, r19
 b66:	24 2b       	or	r18, r20
 b68:	25 2b       	or	r18, r21
 b6a:	21 f4       	brne	.+8      	; 0xb74 <__fp_cmp+0x3e>
 b6c:	08 95       	ret
 b6e:	0a 26       	eor	r0, r26
 b70:	09 f4       	brne	.+2      	; 0xb74 <__fp_cmp+0x3e>
 b72:	a1 40       	sbci	r26, 0x01	; 1
 b74:	a6 95       	lsr	r26
 b76:	8f ef       	ldi	r24, 0xFF	; 255
 b78:	81 1d       	adc	r24, r1
 b7a:	81 1d       	adc	r24, r1
 b7c:	08 95       	ret

00000b7e <__divmodhi4>:
 b7e:	97 fb       	bst	r25, 7
 b80:	07 2e       	mov	r0, r23
 b82:	16 f4       	brtc	.+4      	; 0xb88 <__divmodhi4+0xa>
 b84:	00 94       	com	r0
 b86:	07 d0       	rcall	.+14     	; 0xb96 <__divmodhi4_neg1>
 b88:	77 fd       	sbrc	r23, 7
 b8a:	09 d0       	rcall	.+18     	; 0xb9e <__divmodhi4_neg2>
 b8c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodhi4>
 b90:	07 fc       	sbrc	r0, 7
 b92:	05 d0       	rcall	.+10     	; 0xb9e <__divmodhi4_neg2>
 b94:	3e f4       	brtc	.+14     	; 0xba4 <__divmodhi4_exit>

00000b96 <__divmodhi4_neg1>:
 b96:	90 95       	com	r25
 b98:	81 95       	neg	r24
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	08 95       	ret

00000b9e <__divmodhi4_neg2>:
 b9e:	70 95       	com	r23
 ba0:	61 95       	neg	r22
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba4 <__divmodhi4_exit>:
 ba4:	08 95       	ret

00000ba6 <__udivmodhi4>:
 ba6:	aa 1b       	sub	r26, r26
 ba8:	bb 1b       	sub	r27, r27
 baa:	51 e1       	ldi	r21, 0x11	; 17
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <__udivmodhi4_ep>

00000bae <__udivmodhi4_loop>:
 bae:	aa 1f       	adc	r26, r26
 bb0:	bb 1f       	adc	r27, r27
 bb2:	a6 17       	cp	r26, r22
 bb4:	b7 07       	cpc	r27, r23
 bb6:	10 f0       	brcs	.+4      	; 0xbbc <__udivmodhi4_ep>
 bb8:	a6 1b       	sub	r26, r22
 bba:	b7 0b       	sbc	r27, r23

00000bbc <__udivmodhi4_ep>:
 bbc:	88 1f       	adc	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	5a 95       	dec	r21
 bc2:	a9 f7       	brne	.-22     	; 0xbae <__udivmodhi4_loop>
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	bc 01       	movw	r22, r24
 bca:	cd 01       	movw	r24, r26
 bcc:	08 95       	ret

00000bce <__itoa_ncheck>:
 bce:	bb 27       	eor	r27, r27
 bd0:	4a 30       	cpi	r20, 0x0A	; 10
 bd2:	31 f4       	brne	.+12     	; 0xbe0 <__itoa_ncheck+0x12>
 bd4:	99 23       	and	r25, r25
 bd6:	22 f4       	brpl	.+8      	; 0xbe0 <__itoa_ncheck+0x12>
 bd8:	bd e2       	ldi	r27, 0x2D	; 45
 bda:	90 95       	com	r25
 bdc:	81 95       	neg	r24
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__utoa_common>

00000be4 <__utoa_ncheck>:
 be4:	bb 27       	eor	r27, r27

00000be6 <__utoa_common>:
 be6:	fb 01       	movw	r30, r22
 be8:	55 27       	eor	r21, r21
 bea:	aa 27       	eor	r26, r26
 bec:	88 0f       	add	r24, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	aa 1f       	adc	r26, r26
 bf2:	a4 17       	cp	r26, r20
 bf4:	10 f0       	brcs	.+4      	; 0xbfa <__utoa_common+0x14>
 bf6:	a4 1b       	sub	r26, r20
 bf8:	83 95       	inc	r24
 bfa:	50 51       	subi	r21, 0x10	; 16
 bfc:	b9 f7       	brne	.-18     	; 0xbec <__utoa_common+0x6>
 bfe:	a0 5d       	subi	r26, 0xD0	; 208
 c00:	aa 33       	cpi	r26, 0x3A	; 58
 c02:	08 f0       	brcs	.+2      	; 0xc06 <__utoa_common+0x20>
 c04:	a9 5d       	subi	r26, 0xD9	; 217
 c06:	a1 93       	st	Z+, r26
 c08:	00 97       	sbiw	r24, 0x00	; 0
 c0a:	79 f7       	brne	.-34     	; 0xbea <__utoa_common+0x4>
 c0c:	b1 11       	cpse	r27, r1
 c0e:	b1 93       	st	Z+, r27
 c10:	11 92       	st	Z+, r1
 c12:	cb 01       	movw	r24, r22
 c14:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <strrev>

00000c18 <strrev>:
 c18:	dc 01       	movw	r26, r24
 c1a:	fc 01       	movw	r30, r24
 c1c:	67 2f       	mov	r22, r23
 c1e:	71 91       	ld	r23, Z+
 c20:	77 23       	and	r23, r23
 c22:	e1 f7       	brne	.-8      	; 0xc1c <strrev+0x4>
 c24:	32 97       	sbiw	r30, 0x02	; 2
 c26:	04 c0       	rjmp	.+8      	; 0xc30 <strrev+0x18>
 c28:	7c 91       	ld	r23, X
 c2a:	6d 93       	st	X+, r22
 c2c:	70 83       	st	Z, r23
 c2e:	62 91       	ld	r22, -Z
 c30:	ae 17       	cp	r26, r30
 c32:	bf 07       	cpc	r27, r31
 c34:	c8 f3       	brcs	.-14     	; 0xc28 <strrev+0x10>
 c36:	08 95       	ret

00000c38 <_exit>:
 c38:	f8 94       	cli

00000c3a <__stop_program>:
 c3a:	ff cf       	rjmp	.-2      	; 0xc3a <__stop_program>
