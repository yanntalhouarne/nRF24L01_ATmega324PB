
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000e94  00000f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800124  00800124  00000f4c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a05  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001204  00000000  00000000  00003c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000159f  00000000  00000000  00004e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00006404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1d  00000000  00000000  00006a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f78  00000000  00000000  000074a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00009421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
   4:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_1>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  90:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  94:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  ac:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  bc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  cc:	08 00       	.word	0x0008	; ????
  ce:	00 00       	nop
  d0:	be 92       	st	-X, r11
  d2:	24 49       	sbci	r18, 0x94	; 148
  d4:	12 3e       	cpi	r17, 0xE2	; 226
  d6:	ab aa       	std	Y+51, r10	; 0x33
  d8:	aa 2a       	or	r10, r26
  da:	be cd       	rjmp	.-1156   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
  dc:	cc cc       	rjmp	.-1640   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
  de:	4c 3e       	cpi	r20, 0xEC	; 236
  e0:	00 00       	nop
  e2:	00 80       	ld	r0, Z
  e4:	be ab       	std	Y+54, r27	; 0x36
  e6:	aa aa       	std	Y+50, r10	; 0x32
  e8:	aa 3e       	cpi	r26, 0xEA	; 234
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	bf 00       	.word	0x00bf	; ????
  f0:	00 00       	nop
  f2:	80 3f       	cpi	r24, 0xF0	; 240
  f4:	00 00       	nop
  f6:	00 00       	nop
  f8:	00 08       	sbc	r0, r0
  fa:	41 78       	andi	r20, 0x81	; 129
  fc:	d3 bb       	out	0x13, r29	; 19
  fe:	43 87       	std	Z+11, r20	; 0x0b
 100:	d1 13       	cpse	r29, r17
 102:	3d 19       	sub	r19, r13
 104:	0e 3c       	cpi	r16, 0xCE	; 206
 106:	c3 bd       	out	0x23, r28	; 35
 108:	42 82       	std	Z+2, r4	; 0x02
 10a:	ad 2b       	or	r26, r29
 10c:	3e 68       	ori	r19, 0x8E	; 142
 10e:	ec 82       	std	Y+4, r14	; 0x04
 110:	76 be       	out	0x36, r7	; 54
 112:	d9 8f       	std	Y+25, r29	; 0x19
 114:	e1 a9       	ldd	r30, Z+49	; 0x31
 116:	3e 4c       	sbci	r19, 0xCE	; 206
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	ff be       	out	0x3f, r15	; 63
 11c:	01 c4       	rjmp	.+2050   	; 0x920 <__stack+0x21>
 11e:	ff 7f       	andi	r31, 0xFF	; 255
 120:	3f 00       	.word	0x003f	; ????
 122:	00 00       	nop
	...

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf ef       	ldi	r28, 0xFF	; 255
 12c:	d8 e0       	ldi	r29, 0x08	; 8
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	11 e0       	ldi	r17, 0x01	; 1
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	e4 e9       	ldi	r30, 0x94	; 148
 13a:	fe e0       	ldi	r31, 0x0E	; 14
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	a4 32       	cpi	r26, 0x24	; 36
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	a4 e2       	ldi	r26, 0x24	; 36
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	a3 33       	cpi	r26, 0x33	; 51
 154:	b2 07       	cpc	r27, r18
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	0e 94 86 01 	call	0x30c	; 0x30c <main>
 15c:	0c 94 48 07 	jmp	0xe90	; 0xe90 <_exit>

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	87 68       	ori	r24, 0x87	; 135
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <analog_read>:
int analog_read(unsigned char channel)
{
    int analog_in = 0;
    
	//ADMUX = (0x07)&channel; // select channel
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	98 7f       	andi	r25, 0xF8	; 248
 182:	87 70       	andi	r24, 0x07	; 7
 184:	89 2b       	or	r24, r25
 186:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC); // start conversion
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
    while ((ADCSRA & (1 << ADIF)) == 0)
 192:	80 81       	ld	r24, Z
 194:	84 ff       	sbrs	r24, 4
 196:	fd cf       	rjmp	.-6      	; 0x192 <analog_read+0x18>
        ; // wait for flag

    analog_in = (0x00FF) & (ADCL);       // get lower byte
 198:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    analog_in |= (0x2F00) & (ADCH << 8); // get higher byte
 19c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

    return analog_in;
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	9f 72       	andi	r25, 0x2F	; 47
}
 1aa:	82 2b       	or	r24, r18
 1ac:	08 95       	ret

000001ae <analog_get_average>:

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
    int average = 0;
    for (int i = 0; i < elements; i++)
 1bc:	e6 2e       	mov	r14, r22
 1be:	f1 2c       	mov	r15, r1
 1c0:	1e 14       	cp	r1, r14
 1c2:	1f 04       	cpc	r1, r15
 1c4:	ac f4       	brge	.+42     	; 0x1f0 <analog_get_average+0x42>
 1c6:	d8 2e       	mov	r13, r24
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
    {
        average += analog_read(channel);
 1d0:	8d 2d       	mov	r24, r13
 1d2:	0e 94 bd 00 	call	0x17a	; 0x17a <analog_read>
 1d6:	08 0f       	add	r16, r24
 1d8:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e9       	ldi	r24, 0x9F	; 159
 1dc:	9f e0       	ldi	r25, 0x0F	; 15
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <analog_get_average+0x30>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <analog_get_average+0x36>
 1e4:	00 00       	nop
}

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
    int average = 0;
    for (int i = 0; i < elements; i++)
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	ce 15       	cp	r28, r14
 1ea:	df 05       	cpc	r29, r15
 1ec:	89 f7       	brne	.-30     	; 0x1d0 <analog_get_average+0x22>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <analog_get_average+0x46>
    return analog_in;
}

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
    int average = 0;
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	10 e0       	ldi	r17, 0x00	; 0
        _delay_ms(DELAY_CONVERSION);
    }

    average /= elements;

    return average;
 1f4:	c8 01       	movw	r24, r16
 1f6:	b7 01       	movw	r22, r14
 1f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__divmodhi4>
 1fc:	cb 01       	movw	r24, r22
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	08 95       	ret

0000020e <setup_gpios>:
}

void move_servo(float angle)
{ 
	angle = 47 + angle*.355;
	OCR0A = (uint8_t)angle;
 20e:	6c 9a       	sbi	0x0d, 4	; 13
 210:	21 9a       	sbi	0x04, 1	; 4
 212:	22 9a       	sbi	0x04, 2	; 4
 214:	55 9a       	sbi	0x0a, 5	; 10
 216:	23 9a       	sbi	0x04, 3	; 4
 218:	08 95       	ret

0000021a <setup_TMR1_pwm>:
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	81 68       	ori	r24, 0x81	; 129
 222:	80 83       	st	Z, r24
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	89 60       	ori	r24, 0x09	; 9
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <setup_TMR0_pwm>:
 230:	84 b5       	in	r24, 0x24	; 36
 232:	83 68       	ori	r24, 0x83	; 131
 234:	84 bd       	out	0x24, r24	; 36
 236:	85 b5       	in	r24, 0x25	; 37
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 bd       	out	0x25, r24	; 37
 23c:	8e e3       	ldi	r24, 0x3E	; 62
 23e:	87 bd       	out	0x27, r24	; 39
 240:	08 95       	ret

00000242 <set_TMR1_duty_cycle>:
 242:	bc 01       	movw	r22, r24
 244:	99 0f       	add	r25, r25
 246:	88 0b       	sbc	r24, r24
 248:	99 0b       	sbc	r25, r25
 24a:	0e 94 6d 05 	call	0xada	; 0xada <__floatsisf>
 24e:	2f e6       	ldi	r18, 0x6F	; 111
 250:	32 e1       	ldi	r19, 0x12	; 18
 252:	43 e8       	ldi	r20, 0x83	; 131
 254:	5e e3       	ldi	r21, 0x3E	; 62
 256:	0e 94 49 06 	call	0xc92	; 0xc92 <__mulsf3>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e8       	ldi	r20, 0x80	; 128
 260:	5f e3       	ldi	r21, 0x3F	; 63
 262:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 266:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixsfsi>
 26a:	6f 3f       	cpi	r22, 0xFF	; 255
 26c:	71 05       	cpc	r23, r1
 26e:	19 f0       	breq	.+6      	; 0x276 <set_TMR1_duty_cycle+0x34>
 270:	14 f0       	brlt	.+4      	; 0x276 <set_TMR1_duty_cycle+0x34>
 272:	6f ef       	ldi	r22, 0xFF	; 255
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	77 27       	eor	r23, r23
 278:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 280:	08 95       	ret

00000282 <move_motor_forward>:
 282:	29 9a       	sbi	0x05, 1	; 5
 284:	2a 98       	cbi	0x05, 2	; 5
 286:	08 95       	ret

00000288 <move_motor_backward>:
 288:	29 98       	cbi	0x05, 1	; 5
 28a:	2a 9a       	sbi	0x05, 2	; 5
 28c:	08 95       	ret

0000028e <motor_off>:
 28e:	29 9a       	sbi	0x05, 1	; 5
 290:	2a 9a       	sbi	0x05, 2	; 5
 292:	08 95       	ret

00000294 <temp_scaling>:
}

int temp_scaling(float raw_value)
{
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
	float steinhart;
	raw_value = 1023 / raw_value - 1;
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	70 ec       	ldi	r23, 0xC0	; 192
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	94 e4       	ldi	r25, 0x44	; 68
 2a0:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
	raw_value = SERIESRESISTOR / raw_value;

	steinhart = raw_value / THERMISTORNOMINAL;     // (R/Ro)
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e4       	ldi	r23, 0x40	; 64
 2b8:	8c e1       	ldi	r24, 0x1C	; 28
 2ba:	96 e4       	ldi	r25, 0x46	; 70
 2bc:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e4       	ldi	r19, 0x40	; 64
 2c4:	4c e1       	ldi	r20, 0x1C	; 28
 2c6:	56 e4       	ldi	r21, 0x46	; 70
 2c8:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
	steinhart = log(steinhart);                  // ln(R/Ro)
 2cc:	0e 94 01 06 	call	0xc02	; 0xc02 <log>
	steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e8       	ldi	r19, 0x80	; 128
 2d4:	44 e5       	ldi	r20, 0x54	; 84
 2d6:	55 e4       	ldi	r21, 0x45	; 69
 2d8:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
	steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
 2dc:	2f e0       	ldi	r18, 0x0F	; 15
 2de:	3f ec       	ldi	r19, 0xCF	; 207
 2e0:	4b e5       	ldi	r20, 0x5B	; 91
 2e2:	5b e3       	ldi	r21, 0x3B	; 59
 2e4:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
	steinhart = 1.0 / steinhart;                 // Invert
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	9f e3       	ldi	r25, 0x3F	; 63
 2f4:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
	steinhart -= 273.15;                         // convert to C
	
	return steinhart;
 2f8:	23 e3       	ldi	r18, 0x33	; 51
 2fa:	33 e9       	ldi	r19, 0x93	; 147
 2fc:	48 e8       	ldi	r20, 0x88	; 136
 2fe:	53 e4       	ldi	r21, 0x43	; 67
 300:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 304:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixsfsi>
}
 308:	cb 01       	movw	r24, r22
 30a:	08 95       	ret

0000030c <main>:
uint8_t status = 0;


int main(void)
{
	setup_gpios();
 30c:	0e 94 07 01 	call	0x20e	; 0x20e <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 4d 04 	call	0x89a	; 0x89a <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 316:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <spi1_master_initialize>
	mirf_init();
 31a:	0e 94 99 02 	call	0x532	; 0x532 <mirf_init>
	setup_adc();
 31e:	0e 94 b2 00 	call	0x164	; 0x164 <setup_adc>
	setup_TMR1_pwm();
 322:	0e 94 0d 01 	call	0x21a	; 0x21a <setup_TMR1_pwm>
	setup_TMR0_pwm();
 326:	0e 94 18 01 	call	0x230	; 0x230 <setup_TMR0_pwm>
 32a:	2f e7       	ldi	r18, 0x7F	; 127
 32c:	38 e3       	ldi	r19, 0x38	; 56
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	21 50       	subi	r18, 0x01	; 1
 332:	30 40       	sbci	r19, 0x00	; 0
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x24>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x2e>
 33a:	00 00       	nop
			
	_delay_ms(50);	
	
	TOGGLE_LED;
 33c:	9e b1       	in	r25, 0x0e	; 14
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	98 27       	eor	r25, r24
 342:	9e b9       	out	0x0e, r25	; 14
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	20 e7       	ldi	r18, 0x70	; 112
 348:	32 e0       	ldi	r19, 0x02	; 2
 34a:	91 50       	subi	r25, 0x01	; 1
 34c:	20 40       	sbci	r18, 0x00	; 0
 34e:	30 40       	sbci	r19, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x3e>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x48>
 354:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 356:	9e b1       	in	r25, 0x0e	; 14
 358:	98 27       	eor	r25, r24
 35a:	9e b9       	out	0x0e, r25	; 14
 35c:	9f ef       	ldi	r25, 0xFF	; 255
 35e:	20 e7       	ldi	r18, 0x70	; 112
 360:	32 e0       	ldi	r19, 0x02	; 2
 362:	91 50       	subi	r25, 0x01	; 1
 364:	20 40       	sbci	r18, 0x00	; 0
 366:	30 40       	sbci	r19, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x56>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x60>
 36c:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 36e:	9e b1       	in	r25, 0x0e	; 14
 370:	98 27       	eor	r25, r24
 372:	9e b9       	out	0x0e, r25	; 14
 374:	9f ef       	ldi	r25, 0xFF	; 255
 376:	20 e7       	ldi	r18, 0x70	; 112
 378:	32 e0       	ldi	r19, 0x02	; 2
 37a:	91 50       	subi	r25, 0x01	; 1
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	30 40       	sbci	r19, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x6e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x78>
 384:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 386:	9e b1       	in	r25, 0x0e	; 14
 388:	98 27       	eor	r25, r24
 38a:	9e b9       	out	0x0e, r25	; 14
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	20 e7       	ldi	r18, 0x70	; 112
 390:	32 e0       	ldi	r19, 0x02	; 2
 392:	91 50       	subi	r25, 0x01	; 1
 394:	20 40       	sbci	r18, 0x00	; 0
 396:	30 40       	sbci	r19, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x86>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x90>
 39c:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 39e:	9e b1       	in	r25, 0x0e	; 14
 3a0:	98 27       	eor	r25, r24
 3a2:	9e b9       	out	0x0e, r25	; 14
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	20 e7       	ldi	r18, 0x70	; 112
 3a8:	32 e0       	ldi	r19, 0x02	; 2
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	30 40       	sbci	r19, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x9e>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xa8>
 3b4:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 3b6:	9e b1       	in	r25, 0x0e	; 14
 3b8:	98 27       	eor	r25, r24
 3ba:	9e b9       	out	0x0e, r25	; 14
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	20 e7       	ldi	r18, 0x70	; 112
 3c0:	32 e0       	ldi	r19, 0x02	; 2
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	20 40       	sbci	r18, 0x00	; 0
 3c6:	30 40       	sbci	r19, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0xb6>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0xc0>
 3cc:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 3ce:	9e b1       	in	r25, 0x0e	; 14
 3d0:	98 27       	eor	r25, r24
 3d2:	9e b9       	out	0x0e, r25	; 14
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	20 e7       	ldi	r18, 0x70	; 112
 3d8:	32 e0       	ldi	r19, 0x02	; 2
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	20 40       	sbci	r18, 0x00	; 0
 3de:	30 40       	sbci	r19, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0xce>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0xd8>
 3e4:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 3e6:	9e b1       	in	r25, 0x0e	; 14
 3e8:	89 27       	eor	r24, r25
 3ea:	8e b9       	out	0x0e, r24	; 14
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	99 e6       	ldi	r25, 0x69	; 105
 3f0:	28 e1       	ldi	r18, 0x18	; 24
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0xe6>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0xf0>
 3fc:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 3fe:	78 94       	sei

	mirf_config();
 400:	0e 94 c9 02 	call	0x592	; 0x592 <mirf_config>
	
	mirf_set_TADDR(tx_address);
 404:	85 e0       	ldi	r24, 0x05	; 5
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 39 03 	call	0x672	; 0x672 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 31 03 	call	0x662	; 0x662 <mirf_set_RADDR>

	println_0("nRF24L01 initialized...;");
 414:	8a e0       	ldi	r24, 0x0A	; 10
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 77 03 	call	0x6ee	; 0x6ee <println_0>
 41c:	8f e1       	ldi	r24, 0x1F	; 31
 41e:	9e e4       	ldi	r25, 0x4E	; 78
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 428:	c0 e1       	ldi	r28, 0x10	; 16
 42a:	8e b1       	in	r24, 0x0e	; 14
 42c:	8c 27       	eor	r24, r28
 42e:	8e b9       	out	0x0e, r24	; 14
		
		while(!mirf_data_ready());
 430:	0e 94 a7 02 	call	0x54e	; 0x54e <mirf_data_ready>
 434:	88 23       	and	r24, r24
 436:	e1 f3       	breq	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		
		mirf_get_data(buffer);
 438:	8f e2       	ldi	r24, 0x2F	; 47
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 06 03 	call	0x60c	; 0x60c <mirf_get_data>
		
		mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1]));
 440:	ef e2       	ldi	r30, 0x2F	; 47
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	80 81       	ld	r24, Z
 446:	08 2e       	mov	r0, r24
 448:	00 0c       	add	r0, r0
 44a:	99 0b       	sbc	r25, r25
 44c:	98 2f       	mov	r25, r24
 44e:	88 27       	eor	r24, r24
 450:	21 81       	ldd	r18, Z+1	; 0x01
 452:	82 2b       	or	r24, r18
 454:	ac 01       	movw	r20, r24
 456:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <mtr_cmd+0x1>
 45a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <mtr_cmd>
		srv_cmd = buffer[2];
 45e:	22 81       	ldd	r18, Z+2	; 0x02
 460:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <srv_cmd>
// 		println_int_0(srv_cmd);
// 		
// 		print_char_0(' ');
// 		print_char_0(NL);
		
		if (mtr_cmd > 0 )
 464:	18 16       	cp	r1, r24
 466:	19 06       	cpc	r1, r25
 468:	2c f4       	brge	.+10     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		{
			set_TMR1_duty_cycle(mtr_cmd);
 46a:	0e 94 21 01 	call	0x242	; 0x242 <set_TMR1_duty_cycle>
			move_motor_forward();
 46e:	0e 94 41 01 	call	0x282	; 0x282 <move_motor_forward>
 472:	1a c0       	rjmp	.+52     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		else if (mtr_cmd < 0)
 474:	55 23       	and	r21, r21
 476:	6c f4       	brge	.+26     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		{
			set_TMR1_duty_cycle(abs(mtr_cmd));
 478:	9c 01       	movw	r18, r24
 47a:	33 23       	and	r19, r19
 47c:	24 f4       	brge	.+8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47e:	22 27       	eor	r18, r18
 480:	33 27       	eor	r19, r19
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	c9 01       	movw	r24, r18
 488:	0e 94 21 01 	call	0x242	; 0x242 <set_TMR1_duty_cycle>
			move_motor_backward();
 48c:	0e 94 44 01 	call	0x288	; 0x288 <move_motor_backward>
 490:	0b c0       	rjmp	.+22     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		else if (abs(mtr_cmd) < 100)
 492:	8d 59       	subi	r24, 0x9D	; 157
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	87 3c       	cpi	r24, 0xC7	; 199
 498:	91 05       	cpc	r25, r1
 49a:	30 f4       	brcc	.+12     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			set_TMR1_duty_cycle(1);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 21 01 	call	0x242	; 0x242 <set_TMR1_duty_cycle>
			motor_off();
 4a4:	0e 94 47 01 	call	0x28e	; 0x28e <motor_off>
}

void move_servo(float angle)
{ 
	angle = 47 + angle*.355;
	OCR0A = (uint8_t)angle;
 4a8:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <srv_cmd>
 4ac:	06 2e       	mov	r0, r22
 4ae:	00 0c       	add	r0, r0
 4b0:	77 0b       	sbc	r23, r23
 4b2:	88 0b       	sbc	r24, r24
 4b4:	99 0b       	sbc	r25, r25
 4b6:	0e 94 6d 05 	call	0xada	; 0xada <__floatsisf>
 4ba:	2f e8       	ldi	r18, 0x8F	; 143
 4bc:	32 ec       	ldi	r19, 0xC2	; 194
 4be:	45 eb       	ldi	r20, 0xB5	; 181
 4c0:	5e e3       	ldi	r21, 0x3E	; 62
 4c2:	0e 94 49 06 	call	0xc92	; 0xc92 <__mulsf3>
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	4c e3       	ldi	r20, 0x3C	; 60
 4cc:	52 e4       	ldi	r21, 0x42	; 66
 4ce:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
 4d2:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fixunssfsi>
 4d6:	67 bd       	out	0x27, r22	; 39
		}
		
		move_servo((float)srv_cmd);
		
		// get temp
		raw_temp = analog_get_average(TEMP_PIN,5);	
 4d8:	65 e0       	ldi	r22, 0x05	; 5
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
 4e0:	bc 01       	movw	r22, r24
 4e2:	99 0f       	add	r25, r25
 4e4:	88 0b       	sbc	r24, r24
 4e6:	99 0b       	sbc	r25, r25
 4e8:	0e 94 6d 05 	call	0xada	; 0xada <__floatsisf>
 4ec:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <raw_temp>
 4f0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <raw_temp+0x1>
 4f4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <raw_temp+0x2>
 4f8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <raw_temp+0x3>
		temp = temp_scaling(raw_temp);
 4fc:	0e 94 4a 01 	call	0x294	; 0x294 <temp_scaling>
 500:	8c 01       	movw	r16, r24
 502:	bc 01       	movw	r22, r24
 504:	99 0f       	add	r25, r25
 506:	88 0b       	sbc	r24, r24
 508:	99 0b       	sbc	r25, r25
 50a:	0e 94 6d 05 	call	0xada	; 0xada <__floatsisf>
 50e:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
 512:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
 516:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
 51a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
// 		//current = current_scaling(raw_current)
// 		current = raw_current / 204.6;
// 		current -= 2.5;
// 		 current *= 10;
		
		println_int_0(temp);
 51e:	c8 01       	movw	r24, r16
 520:	0e 94 9d 03 	call	0x73a	; 0x73a <println_int_0>
 524:	8f e1       	ldi	r24, 0x1F	; 31
 526:	9e e4       	ldi	r25, 0x4E	; 78
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52e:	00 00       	nop
 530:	7c cf       	rjmp	.-264    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000532 <mirf_init>:
	spi1_send_bytes(value, len);      // Write payload
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select

	mirf_CE_hi; // Start transmission
}
 532:	54 9a       	sbi	0x0a, 4	; 10
 534:	56 9a       	sbi	0x0a, 6	; 10
 536:	5c 98       	cbi	0x0b, 4	; 11
 538:	5e 9a       	sbi	0x0b, 6	; 11
 53a:	e8 98       	cbi	0x1d, 0	; 29
 53c:	e9 e6       	ldi	r30, 0x69	; 105
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	82 60       	ori	r24, 0x02	; 2
 544:	80 83       	st	Z, r24
 546:	e8 9a       	sbi	0x1d, 0	; 29
 548:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <spi1_master_initialize>
 54c:	08 95       	ret

0000054e <mirf_data_ready>:
 54e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <PTX>
 552:	81 11       	cpse	r24, r1
 554:	07 c0       	rjmp	.+14     	; 0x564 <mirf_data_ready+0x16>
 556:	5e 98       	cbi	0x0b, 6	; 11
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	0e 94 00 04 	call	0x800	; 0x800 <spi1_exchange_char>
 55e:	5e 9a       	sbi	0x0b, 6	; 11
 560:	80 74       	andi	r24, 0x40	; 64
 562:	08 95       	ret
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	08 95       	ret

00000568 <mirf_config_register>:
 568:	cf 93       	push	r28
 56a:	c6 2f       	mov	r28, r22
 56c:	5e 98       	cbi	0x0b, 6	; 11
 56e:	8f 71       	andi	r24, 0x1F	; 31
 570:	80 62       	ori	r24, 0x20	; 32
 572:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi1_send_char>
 576:	82 e4       	ldi	r24, 0x42	; 66
 578:	8a 95       	dec	r24
 57a:	f1 f7       	brne	.-4      	; 0x578 <mirf_config_register+0x10>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <mirf_config_register+0x16>
 57e:	8c 2f       	mov	r24, r28
 580:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi1_send_char>
 584:	5e 9a       	sbi	0x0b, 6	; 11
 586:	82 e4       	ldi	r24, 0x42	; 66
 588:	8a 95       	dec	r24
 58a:	f1 f7       	brne	.-4      	; 0x588 <mirf_config_register+0x20>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <mirf_config_register+0x26>
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <mirf_config>:
 592:	6c e6       	ldi	r22, 0x6C	; 108
 594:	85 e0       	ldi	r24, 0x05	; 5
 596:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	81 e1       	ldi	r24, 0x11	; 17
 59e:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	82 e1       	ldi	r24, 0x12	; 18
 5a6:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	83 e1       	ldi	r24, 0x13	; 19
 5ae:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	84 e1       	ldi	r24, 0x14	; 20
 5b6:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	85 e1       	ldi	r24, 0x15	; 21
 5be:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	86 e1       	ldi	r24, 0x16	; 22
 5c6:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5ca:	66 e2       	ldi	r22, 0x26	; 38
 5cc:	86 e0       	ldi	r24, 0x06	; 6
 5ce:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5da:	63 e0       	ldi	r22, 0x03	; 3
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5e2:	6f e4       	ldi	r22, 0x4F	; 79
 5e4:	84 e0       	ldi	r24, 0x04	; 4
 5e6:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5ea:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <PTX>
 5ee:	60 e7       	ldi	r22, 0x70	; 112
 5f0:	87 e0       	ldi	r24, 0x07	; 7
 5f2:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 5f6:	5e 98       	cbi	0x0b, 6	; 11
 5f8:	81 ee       	ldi	r24, 0xE1	; 225
 5fa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi1_send_char>
 5fe:	5e 9a       	sbi	0x0b, 6	; 11
 600:	6b e5       	ldi	r22, 0x5B	; 91
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 608:	5c 9a       	sbi	0x0b, 4	; 11
 60a:	08 95       	ret

0000060c <mirf_get_data>:
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
 612:	5e 98       	cbi	0x0b, 6	; 11
 614:	81 e6       	ldi	r24, 0x61	; 97
 616:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi1_send_char>
 61a:	43 e0       	ldi	r20, 0x03	; 3
 61c:	be 01       	movw	r22, r28
 61e:	ce 01       	movw	r24, r28
 620:	0e 94 21 04 	call	0x842	; 0x842 <spi1_exchange_bytes>
 624:	5e 9a       	sbi	0x0b, 6	; 11
 626:	60 e4       	ldi	r22, 0x40	; 64
 628:	87 e0       	ldi	r24, 0x07	; 7
 62a:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <mirf_write_register>:
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	eb 01       	movw	r28, r22
 63c:	14 2f       	mov	r17, r20
 63e:	5e 98       	cbi	0x0b, 6	; 11
 640:	8f 71       	andi	r24, 0x1F	; 31
 642:	80 62       	ori	r24, 0x20	; 32
 644:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi1_send_char>
 648:	61 2f       	mov	r22, r17
 64a:	ce 01       	movw	r24, r28
 64c:	0e 94 0a 04 	call	0x814	; 0x814 <spi1_send_bytes>
 650:	5e 9a       	sbi	0x0b, 6	; 11
 652:	82 e4       	ldi	r24, 0x42	; 66
 654:	8a 95       	dec	r24
 656:	f1 f7       	brne	.-4      	; 0x654 <mirf_write_register+0x20>
 658:	00 c0       	rjmp	.+0      	; 0x65a <mirf_write_register+0x26>
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	08 95       	ret

00000662 <mirf_set_RADDR>:
 662:	5c 98       	cbi	0x0b, 4	; 11
 664:	45 e0       	ldi	r20, 0x05	; 5
 666:	bc 01       	movw	r22, r24
 668:	8b e0       	ldi	r24, 0x0B	; 11
 66a:	0e 94 1a 03 	call	0x634	; 0x634 <mirf_write_register>
 66e:	5c 9a       	sbi	0x0b, 4	; 11
 670:	08 95       	ret

00000672 <mirf_set_TADDR>:
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ec 01       	movw	r28, r24
 678:	45 e0       	ldi	r20, 0x05	; 5
 67a:	bc 01       	movw	r22, r24
 67c:	8a e0       	ldi	r24, 0x0A	; 10
 67e:	0e 94 1a 03 	call	0x634	; 0x634 <mirf_write_register>
 682:	45 e0       	ldi	r20, 0x05	; 5
 684:	be 01       	movw	r22, r28
 686:	80 e1       	ldi	r24, 0x10	; 16
 688:	0e 94 1a 03 	call	0x634	; 0x634 <mirf_write_register>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	//char status;
	// If still in transmitting mode then finish transmission
	
	if (PTX)
 6b4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <PTX>
 6b8:	88 23       	and	r24, r24
 6ba:	41 f0       	breq	.+16     	; 0x6cc <__vector_1+0x3a>
	{
		mirf_CE_lo;                             // Deactivate transreceiver
 6bc:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 6be:	6b e5       	ldi	r22, 0x5B	; 91
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	0e 94 b4 02 	call	0x568	; 0x568 <mirf_config_register>
		mirf_CE_hi;                             // Listening for packets
 6c6:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode
 6c8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <PTX>
	}
	
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <println_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	8c 01       	movw	r16, r24
 6f8:	fc 01       	movw	r30, r24
 6fa:	80 81       	ld	r24, Z
 6fc:	8a 30       	cpi	r24, 0x0A	; 10
 6fe:	69 f0       	breq	.+26     	; 0x71a <println_0+0x2c>
 700:	8b 33       	cpi	r24, 0x3B	; 59
 702:	79 f4       	brne	.+30     	; 0x722 <println_0+0x34>
 704:	0a c0       	rjmp	.+20     	; 0x71a <println_0+0x2c>
 706:	89 91       	ld	r24, Y+
 708:	8a 30       	cpi	r24, 0x0A	; 10
 70a:	39 f0       	breq	.+14     	; 0x71a <println_0+0x2c>
 70c:	8b 33       	cpi	r24, 0x3B	; 59
 70e:	29 f0       	breq	.+10     	; 0x71a <println_0+0x2c>
 710:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
 714:	0c 17       	cp	r16, r28
 716:	1d 07       	cpc	r17, r29
 718:	b1 f7       	brne	.-20     	; 0x706 <println_0+0x18>
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
 720:	07 c0       	rjmp	.+14     	; 0x730 <println_0+0x42>
 722:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
 726:	e8 01       	movw	r28, r16
 728:	21 96       	adiw	r28, 0x01	; 1
 72a:	08 53       	subi	r16, 0x38	; 56
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	eb cf       	rjmp	.-42     	; 0x706 <println_0+0x18>
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <println_int_0>:

void println_int_0(int number)
{
 73a:	ef 92       	push	r14
 73c:	ff 92       	push	r15
 73e:	0f 93       	push	r16
 740:	1f 93       	push	r17
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	e2 97       	sbiw	r28, 0x32	; 50
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	f8 94       	cli
 750:	de bf       	out	0x3e, r29	; 62
 752:	0f be       	out	0x3f, r0	; 63
 754:	cd bf       	out	0x3d, r28	; 61
 756:	8c 01       	movw	r16, r24
	if (number == 0)
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	31 f4       	brne	.+12     	; 0x768 <println_int_0+0x2e>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 75c:	80 e3       	ldi	r24, 0x30	; 48
 75e:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
	if (number == 0)
	{
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
 762:	e1 2c       	mov	r14, r1
 764:	f1 2c       	mov	r15, r1
 766:	16 c0       	rjmp	.+44     	; 0x794 <println_int_0+0x5a>
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 76c:	ea e0       	ldi	r30, 0x0A	; 10
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	01 c0       	rjmp	.+2      	; 0x774 <println_int_0+0x3a>
		num_digit++;
 772:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 774:	bf 01       	movw	r22, r30
 776:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__divmodhi4>
 77a:	cb 01       	movw	r24, r22
		num_digit++;
 77c:	79 01       	movw	r14, r18
 77e:	4f ef       	ldi	r20, 0xFF	; 255
 780:	e4 1a       	sub	r14, r20
 782:	f4 0a       	sbc	r15, r20
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	a9 f7       	brne	.-22     	; 0x772 <println_int_0+0x38>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 788:	11 23       	and	r17, r17
 78a:	24 f4       	brge	.+8      	; 0x794 <println_int_0+0x5a>
 78c:	79 01       	movw	r14, r18
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	e8 0e       	add	r14, r24
 792:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 794:	4a e0       	ldi	r20, 0x0A	; 10
 796:	be 01       	movw	r22, r28
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	c8 01       	movw	r24, r16
 79e:	0e 94 13 07 	call	0xe26	; 0xe26 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 7a2:	1e 14       	cp	r1, r14
 7a4:	1f 04       	cpc	r1, r15
 7a6:	6c f4       	brge	.+26     	; 0x7c2 <println_int_0+0x88>
 7a8:	8e 01       	movw	r16, r28
 7aa:	0f 5f       	subi	r16, 0xFF	; 255
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	e0 0e       	add	r14, r16
 7b0:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 7b2:	f8 01       	movw	r30, r16
 7b4:	81 91       	ld	r24, Z+
 7b6:	8f 01       	movw	r16, r30
 7b8:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 7bc:	0e 15       	cp	r16, r14
 7be:	1f 05       	cpc	r17, r15
 7c0:	c1 f7       	brne	.-16     	; 0x7b2 <println_int_0+0x78>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 7c2:	8a e0       	ldi	r24, 0x0A	; 10
 7c4:	0e 94 45 04 	call	0x88a	; 0x88a <usart0_send_char>
}
 7c8:	e2 96       	adiw	r28, 0x32	; 50
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	08 95       	ret

000007e2 <spi1_master_initialize>:
 7e2:	6b 9a       	sbi	0x0d, 3	; 13
 7e4:	57 9a       	sbi	0x0a, 7	; 10
 7e6:	56 9a       	sbi	0x0a, 6	; 10
 7e8:	82 e5       	ldi	r24, 0x52	; 82
 7ea:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 7ee:	08 95       	ret

000007f0 <spi1_send_char>:
 7f0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 7f4:	ed ea       	ldi	r30, 0xAD	; 173
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	88 23       	and	r24, r24
 7fc:	ec f7       	brge	.-6      	; 0x7f8 <spi1_send_char+0x8>
 7fe:	08 95       	ret

00000800 <spi1_exchange_char>:
 800:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 804:	ed ea       	ldi	r30, 0xAD	; 173
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	88 23       	and	r24, r24
 80c:	ec f7       	brge	.-6      	; 0x808 <spi1_exchange_char+0x8>
 80e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 812:	08 95       	ret

00000814 <spi1_send_bytes>:
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	66 23       	and	r22, r22
 81a:	81 f0       	breq	.+32     	; 0x83c <spi1_send_bytes+0x28>
 81c:	dc 01       	movw	r26, r24
 81e:	9c 01       	movw	r18, r24
 820:	26 0f       	add	r18, r22
 822:	31 1d       	adc	r19, r1
 824:	ce ea       	ldi	r28, 0xAE	; 174
 826:	d0 e0       	ldi	r29, 0x00	; 0
 828:	ed ea       	ldi	r30, 0xAD	; 173
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	9d 91       	ld	r25, X+
 82e:	98 83       	st	Y, r25
 830:	90 81       	ld	r25, Z
 832:	99 23       	and	r25, r25
 834:	ec f7       	brge	.-6      	; 0x830 <spi1_send_bytes+0x1c>
 836:	a2 17       	cp	r26, r18
 838:	b3 07       	cpc	r27, r19
 83a:	c1 f7       	brne	.-16     	; 0x82c <spi1_send_bytes+0x18>
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <spi1_exchange_bytes>:
 842:	0f 93       	push	r16
 844:	1f 93       	push	r17
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	44 23       	and	r20, r20
 84c:	c9 f0       	breq	.+50     	; 0x880 <spi1_exchange_bytes+0x3e>
 84e:	dc 01       	movw	r26, r24
 850:	06 2f       	mov	r16, r22
 852:	17 2f       	mov	r17, r23
 854:	9c 01       	movw	r18, r24
 856:	24 0f       	add	r18, r20
 858:	31 1d       	adc	r19, r1
 85a:	a9 01       	movw	r20, r18
 85c:	2e ea       	ldi	r18, 0xAE	; 174
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	ed ea       	ldi	r30, 0xAD	; 173
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	9d 91       	ld	r25, X+
 866:	e9 01       	movw	r28, r18
 868:	98 83       	st	Y, r25
 86a:	90 81       	ld	r25, Z
 86c:	99 23       	and	r25, r25
 86e:	ec f7       	brge	.-6      	; 0x86a <spi1_exchange_bytes+0x28>
 870:	e9 01       	movw	r28, r18
 872:	98 81       	ld	r25, Y
 874:	e8 01       	movw	r28, r16
 876:	99 93       	st	Y+, r25
 878:	8e 01       	movw	r16, r28
 87a:	a4 17       	cp	r26, r20
 87c:	b5 07       	cpc	r27, r21
 87e:	91 f7       	brne	.-28     	; 0x864 <spi1_exchange_bytes+0x22>
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	08 95       	ret

0000088a <usart0_send_char>:
 88a:	e0 ec       	ldi	r30, 0xC0	; 192
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	90 81       	ld	r25, Z
 890:	95 ff       	sbrs	r25, 5
 892:	fd cf       	rjmp	.-6      	; 0x88e <usart0_send_char+0x4>
 894:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 898:	08 95       	ret

0000089a <setup_usart0>:
 89a:	98 e9       	ldi	r25, 0x98	; 152
 89c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8a0:	96 e0       	ldi	r25, 0x06	; 6
 8a2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 8a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 8aa:	08 95       	ret

000008ac <__subsf3>:
 8ac:	50 58       	subi	r21, 0x80	; 128

000008ae <__addsf3>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	aa 27       	eor	r26, r26
 8b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__addsf3x>
 8b6:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>
 8ba:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscA>
 8be:	38 f0       	brcs	.+14     	; 0x8ce <__addsf3+0x20>
 8c0:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_pscB>
 8c4:	20 f0       	brcs	.+8      	; 0x8ce <__addsf3+0x20>
 8c6:	39 f4       	brne	.+14     	; 0x8d6 <__addsf3+0x28>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	19 f4       	brne	.+6      	; 0x8d2 <__addsf3+0x24>
 8cc:	26 f4       	brtc	.+8      	; 0x8d6 <__addsf3+0x28>
 8ce:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>
 8d2:	0e f4       	brtc	.+2      	; 0x8d6 <__addsf3+0x28>
 8d4:	e0 95       	com	r30
 8d6:	e7 fb       	bst	r30, 7
 8d8:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>

000008dc <__addsf3x>:
 8dc:	e9 2f       	mov	r30, r25
 8de:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_split3>
 8e2:	58 f3       	brcs	.-42     	; 0x8ba <__addsf3+0xc>
 8e4:	ba 17       	cp	r27, r26
 8e6:	62 07       	cpc	r22, r18
 8e8:	73 07       	cpc	r23, r19
 8ea:	84 07       	cpc	r24, r20
 8ec:	95 07       	cpc	r25, r21
 8ee:	20 f0       	brcs	.+8      	; 0x8f8 <__addsf3x+0x1c>
 8f0:	79 f4       	brne	.+30     	; 0x910 <__stack+0x11>
 8f2:	a6 f5       	brtc	.+104    	; 0x95c <__stack+0x5d>
 8f4:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_zero>
 8f8:	0e f4       	brtc	.+2      	; 0x8fc <__addsf3x+0x20>
 8fa:	e0 95       	com	r30
 8fc:	0b 2e       	mov	r0, r27
 8fe:	ba 2f       	mov	r27, r26
 900:	a0 2d       	mov	r26, r0
 902:	0b 01       	movw	r0, r22
 904:	b9 01       	movw	r22, r18
 906:	90 01       	movw	r18, r0
 908:	0c 01       	movw	r0, r24
 90a:	ca 01       	movw	r24, r20
 90c:	a0 01       	movw	r20, r0
 90e:	11 24       	eor	r1, r1
 910:	ff 27       	eor	r31, r31
 912:	59 1b       	sub	r21, r25
 914:	99 f0       	breq	.+38     	; 0x93c <__stack+0x3d>
 916:	59 3f       	cpi	r21, 0xF9	; 249
 918:	50 f4       	brcc	.+20     	; 0x92e <__stack+0x2f>
 91a:	50 3e       	cpi	r21, 0xE0	; 224
 91c:	68 f1       	brcs	.+90     	; 0x978 <__stack+0x79>
 91e:	1a 16       	cp	r1, r26
 920:	f0 40       	sbci	r31, 0x00	; 0
 922:	a2 2f       	mov	r26, r18
 924:	23 2f       	mov	r18, r19
 926:	34 2f       	mov	r19, r20
 928:	44 27       	eor	r20, r20
 92a:	58 5f       	subi	r21, 0xF8	; 248
 92c:	f3 cf       	rjmp	.-26     	; 0x914 <__stack+0x15>
 92e:	46 95       	lsr	r20
 930:	37 95       	ror	r19
 932:	27 95       	ror	r18
 934:	a7 95       	ror	r26
 936:	f0 40       	sbci	r31, 0x00	; 0
 938:	53 95       	inc	r21
 93a:	c9 f7       	brne	.-14     	; 0x92e <__stack+0x2f>
 93c:	7e f4       	brtc	.+30     	; 0x95c <__stack+0x5d>
 93e:	1f 16       	cp	r1, r31
 940:	ba 0b       	sbc	r27, r26
 942:	62 0b       	sbc	r22, r18
 944:	73 0b       	sbc	r23, r19
 946:	84 0b       	sbc	r24, r20
 948:	ba f0       	brmi	.+46     	; 0x978 <__stack+0x79>
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	a1 f0       	breq	.+40     	; 0x976 <__stack+0x77>
 94e:	ff 0f       	add	r31, r31
 950:	bb 1f       	adc	r27, r27
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	c2 f7       	brpl	.-16     	; 0x94a <__stack+0x4b>
 95a:	0e c0       	rjmp	.+28     	; 0x978 <__stack+0x79>
 95c:	ba 0f       	add	r27, r26
 95e:	62 1f       	adc	r22, r18
 960:	73 1f       	adc	r23, r19
 962:	84 1f       	adc	r24, r20
 964:	48 f4       	brcc	.+18     	; 0x978 <__stack+0x79>
 966:	87 95       	ror	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	f7 95       	ror	r31
 970:	9e 3f       	cpi	r25, 0xFE	; 254
 972:	08 f0       	brcs	.+2      	; 0x976 <__stack+0x77>
 974:	b0 cf       	rjmp	.-160    	; 0x8d6 <__addsf3+0x28>
 976:	93 95       	inc	r25
 978:	88 0f       	add	r24, r24
 97a:	08 f0       	brcs	.+2      	; 0x97e <__stack+0x7f>
 97c:	99 27       	eor	r25, r25
 97e:	ee 0f       	add	r30, r30
 980:	97 95       	ror	r25
 982:	87 95       	ror	r24
 984:	08 95       	ret

00000986 <__divsf3>:
 986:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__divsf3x>
 98a:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>
 98e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_pscB>
 992:	58 f0       	brcs	.+22     	; 0x9aa <__divsf3+0x24>
 994:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscA>
 998:	40 f0       	brcs	.+16     	; 0x9aa <__divsf3+0x24>
 99a:	29 f4       	brne	.+10     	; 0x9a6 <__divsf3+0x20>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	29 f0       	breq	.+10     	; 0x9aa <__divsf3+0x24>
 9a0:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>
 9a4:	51 11       	cpse	r21, r1
 9a6:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_szero>
 9aa:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>

000009ae <__divsf3x>:
 9ae:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_split3>
 9b2:	68 f3       	brcs	.-38     	; 0x98e <__divsf3+0x8>

000009b4 <__divsf3_pse>:
 9b4:	99 23       	and	r25, r25
 9b6:	b1 f3       	breq	.-20     	; 0x9a4 <__divsf3+0x1e>
 9b8:	55 23       	and	r21, r21
 9ba:	91 f3       	breq	.-28     	; 0x9a0 <__divsf3+0x1a>
 9bc:	95 1b       	sub	r25, r21
 9be:	55 0b       	sbc	r21, r21
 9c0:	bb 27       	eor	r27, r27
 9c2:	aa 27       	eor	r26, r26
 9c4:	62 17       	cp	r22, r18
 9c6:	73 07       	cpc	r23, r19
 9c8:	84 07       	cpc	r24, r20
 9ca:	38 f0       	brcs	.+14     	; 0x9da <__divsf3_pse+0x26>
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	22 0f       	add	r18, r18
 9d2:	33 1f       	adc	r19, r19
 9d4:	44 1f       	adc	r20, r20
 9d6:	aa 1f       	adc	r26, r26
 9d8:	a9 f3       	breq	.-22     	; 0x9c4 <__divsf3_pse+0x10>
 9da:	35 d0       	rcall	.+106    	; 0xa46 <__divsf3_pse+0x92>
 9dc:	0e 2e       	mov	r0, r30
 9de:	3a f0       	brmi	.+14     	; 0x9ee <__divsf3_pse+0x3a>
 9e0:	e0 e8       	ldi	r30, 0x80	; 128
 9e2:	32 d0       	rcall	.+100    	; 0xa48 <__divsf3_pse+0x94>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	e6 95       	lsr	r30
 9ea:	00 1c       	adc	r0, r0
 9ec:	ca f7       	brpl	.-14     	; 0x9e0 <__divsf3_pse+0x2c>
 9ee:	2b d0       	rcall	.+86     	; 0xa46 <__divsf3_pse+0x92>
 9f0:	fe 2f       	mov	r31, r30
 9f2:	29 d0       	rcall	.+82     	; 0xa46 <__divsf3_pse+0x92>
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	bb 1f       	adc	r27, r27
 9fc:	26 17       	cp	r18, r22
 9fe:	37 07       	cpc	r19, r23
 a00:	48 07       	cpc	r20, r24
 a02:	ab 07       	cpc	r26, r27
 a04:	b0 e8       	ldi	r27, 0x80	; 128
 a06:	09 f0       	breq	.+2      	; 0xa0a <__divsf3_pse+0x56>
 a08:	bb 0b       	sbc	r27, r27
 a0a:	80 2d       	mov	r24, r0
 a0c:	bf 01       	movw	r22, r30
 a0e:	ff 27       	eor	r31, r31
 a10:	93 58       	subi	r25, 0x83	; 131
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	3a f0       	brmi	.+14     	; 0xa24 <__divsf3_pse+0x70>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	78 f0       	brcs	.+30     	; 0xa3a <__divsf3_pse+0x86>
 a1c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>
 a20:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	e4 f3       	brlt	.-8      	; 0xa20 <__divsf3_pse+0x6c>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	d4 f3       	brlt	.-12     	; 0xa20 <__divsf3_pse+0x6c>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__divsf3_pse+0x78>
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret
 a46:	e1 e0       	ldi	r30, 0x01	; 1
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	bb 1f       	adc	r27, r27
 a50:	62 17       	cp	r22, r18
 a52:	73 07       	cpc	r23, r19
 a54:	84 07       	cpc	r24, r20
 a56:	ba 07       	cpc	r27, r26
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__divsf3_pse+0xae>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	ba 0b       	sbc	r27, r26
 a62:	ee 1f       	adc	r30, r30
 a64:	88 f7       	brcc	.-30     	; 0xa48 <__divsf3_pse+0x94>
 a66:	e0 95       	com	r30
 a68:	08 95       	ret

00000a6a <__fixsfsi>:
 a6a:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fixunssfsi>
 a6e:	68 94       	set
 a70:	b1 11       	cpse	r27, r1
 a72:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_szero>
 a76:	08 95       	ret

00000a78 <__fixunssfsi>:
 a78:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_splitA>
 a7c:	88 f0       	brcs	.+34     	; 0xaa0 <__fixunssfsi+0x28>
 a7e:	9f 57       	subi	r25, 0x7F	; 127
 a80:	98 f0       	brcs	.+38     	; 0xaa8 <__fixunssfsi+0x30>
 a82:	b9 2f       	mov	r27, r25
 a84:	99 27       	eor	r25, r25
 a86:	b7 51       	subi	r27, 0x17	; 23
 a88:	b0 f0       	brcs	.+44     	; 0xab6 <__fixunssfsi+0x3e>
 a8a:	e1 f0       	breq	.+56     	; 0xac4 <__fixunssfsi+0x4c>
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	1a f0       	brmi	.+6      	; 0xa9c <__fixunssfsi+0x24>
 a96:	ba 95       	dec	r27
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__fixunssfsi+0x14>
 a9a:	14 c0       	rjmp	.+40     	; 0xac4 <__fixunssfsi+0x4c>
 a9c:	b1 30       	cpi	r27, 0x01	; 1
 a9e:	91 f0       	breq	.+36     	; 0xac4 <__fixunssfsi+0x4c>
 aa0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_zero>
 aa4:	b1 e0       	ldi	r27, 0x01	; 1
 aa6:	08 95       	ret
 aa8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_zero>
 aac:	67 2f       	mov	r22, r23
 aae:	78 2f       	mov	r23, r24
 ab0:	88 27       	eor	r24, r24
 ab2:	b8 5f       	subi	r27, 0xF8	; 248
 ab4:	39 f0       	breq	.+14     	; 0xac4 <__fixunssfsi+0x4c>
 ab6:	b9 3f       	cpi	r27, 0xF9	; 249
 ab8:	cc f3       	brlt	.-14     	; 0xaac <__fixunssfsi+0x34>
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b3 95       	inc	r27
 ac2:	d9 f7       	brne	.-10     	; 0xaba <__fixunssfsi+0x42>
 ac4:	3e f4       	brtc	.+14     	; 0xad4 <__fixunssfsi+0x5c>
 ac6:	90 95       	com	r25
 ac8:	80 95       	com	r24
 aca:	70 95       	com	r23
 acc:	61 95       	neg	r22
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__floatunsisf>:
 ad6:	e8 94       	clt
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <__floatsisf+0x12>

00000ada <__floatsisf>:
 ada:	97 fb       	bst	r25, 7
 adc:	3e f4       	brtc	.+14     	; 0xaec <__floatsisf+0x12>
 ade:	90 95       	com	r25
 ae0:	80 95       	com	r24
 ae2:	70 95       	com	r23
 ae4:	61 95       	neg	r22
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	99 23       	and	r25, r25
 aee:	a9 f0       	breq	.+42     	; 0xb1a <__floatsisf+0x40>
 af0:	f9 2f       	mov	r31, r25
 af2:	96 e9       	ldi	r25, 0x96	; 150
 af4:	bb 27       	eor	r27, r27
 af6:	93 95       	inc	r25
 af8:	f6 95       	lsr	r31
 afa:	87 95       	ror	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f1 11       	cpse	r31, r1
 b04:	f8 cf       	rjmp	.-16     	; 0xaf6 <__floatsisf+0x1c>
 b06:	fa f4       	brpl	.+62     	; 0xb46 <__floatsisf+0x6c>
 b08:	bb 0f       	add	r27, r27
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__floatsisf+0x36>
 b0c:	60 ff       	sbrs	r22, 0
 b0e:	1b c0       	rjmp	.+54     	; 0xb46 <__floatsisf+0x6c>
 b10:	6f 5f       	subi	r22, 0xFF	; 255
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	16 c0       	rjmp	.+44     	; 0xb46 <__floatsisf+0x6c>
 b1a:	88 23       	and	r24, r24
 b1c:	11 f0       	breq	.+4      	; 0xb22 <__floatsisf+0x48>
 b1e:	96 e9       	ldi	r25, 0x96	; 150
 b20:	11 c0       	rjmp	.+34     	; 0xb44 <__floatsisf+0x6a>
 b22:	77 23       	and	r23, r23
 b24:	21 f0       	breq	.+8      	; 0xb2e <__floatsisf+0x54>
 b26:	9e e8       	ldi	r25, 0x8E	; 142
 b28:	87 2f       	mov	r24, r23
 b2a:	76 2f       	mov	r23, r22
 b2c:	05 c0       	rjmp	.+10     	; 0xb38 <__floatsisf+0x5e>
 b2e:	66 23       	and	r22, r22
 b30:	71 f0       	breq	.+28     	; 0xb4e <__floatsisf+0x74>
 b32:	96 e8       	ldi	r25, 0x86	; 134
 b34:	86 2f       	mov	r24, r22
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	60 e0       	ldi	r22, 0x00	; 0
 b3a:	2a f0       	brmi	.+10     	; 0xb46 <__floatsisf+0x6c>
 b3c:	9a 95       	dec	r25
 b3e:	66 0f       	add	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	da f7       	brpl	.-10     	; 0xb3c <__floatsisf+0x62>
 b46:	88 0f       	add	r24, r24
 b48:	96 95       	lsr	r25
 b4a:	87 95       	ror	r24
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret

00000b50 <__fp_inf>:
 b50:	97 f9       	bld	r25, 7
 b52:	9f 67       	ori	r25, 0x7F	; 127
 b54:	80 e8       	ldi	r24, 0x80	; 128
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	60 e0       	ldi	r22, 0x00	; 0
 b5a:	08 95       	ret

00000b5c <__fp_nan>:
 b5c:	9f ef       	ldi	r25, 0xFF	; 255
 b5e:	80 ec       	ldi	r24, 0xC0	; 192
 b60:	08 95       	ret

00000b62 <__fp_pscA>:
 b62:	00 24       	eor	r0, r0
 b64:	0a 94       	dec	r0
 b66:	16 16       	cp	r1, r22
 b68:	17 06       	cpc	r1, r23
 b6a:	18 06       	cpc	r1, r24
 b6c:	09 06       	cpc	r0, r25
 b6e:	08 95       	ret

00000b70 <__fp_pscB>:
 b70:	00 24       	eor	r0, r0
 b72:	0a 94       	dec	r0
 b74:	12 16       	cp	r1, r18
 b76:	13 06       	cpc	r1, r19
 b78:	14 06       	cpc	r1, r20
 b7a:	05 06       	cpc	r0, r21
 b7c:	08 95       	ret

00000b7e <__fp_round>:
 b7e:	09 2e       	mov	r0, r25
 b80:	03 94       	inc	r0
 b82:	00 0c       	add	r0, r0
 b84:	11 f4       	brne	.+4      	; 0xb8a <__fp_round+0xc>
 b86:	88 23       	and	r24, r24
 b88:	52 f0       	brmi	.+20     	; 0xb9e <__fp_round+0x20>
 b8a:	bb 0f       	add	r27, r27
 b8c:	40 f4       	brcc	.+16     	; 0xb9e <__fp_round+0x20>
 b8e:	bf 2b       	or	r27, r31
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0x18>
 b92:	60 ff       	sbrs	r22, 0
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <__fp_round+0x20>
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__fp_split3>:
 ba0:	57 fd       	sbrc	r21, 7
 ba2:	90 58       	subi	r25, 0x80	; 128
 ba4:	44 0f       	add	r20, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	59 f0       	breq	.+22     	; 0xbc0 <__fp_splitA+0x10>
 baa:	5f 3f       	cpi	r21, 0xFF	; 255
 bac:	71 f0       	breq	.+28     	; 0xbca <__fp_splitA+0x1a>
 bae:	47 95       	ror	r20

00000bb0 <__fp_splitA>:
 bb0:	88 0f       	add	r24, r24
 bb2:	97 fb       	bst	r25, 7
 bb4:	99 1f       	adc	r25, r25
 bb6:	61 f0       	breq	.+24     	; 0xbd0 <__fp_splitA+0x20>
 bb8:	9f 3f       	cpi	r25, 0xFF	; 255
 bba:	79 f0       	breq	.+30     	; 0xbda <__fp_splitA+0x2a>
 bbc:	87 95       	ror	r24
 bbe:	08 95       	ret
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	f2 cf       	rjmp	.-28     	; 0xbae <__fp_split3+0xe>
 bca:	46 95       	lsr	r20
 bcc:	f1 df       	rcall	.-30     	; 0xbb0 <__fp_splitA>
 bce:	08 c0       	rjmp	.+16     	; 0xbe0 <__fp_splitA+0x30>
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	18 06       	cpc	r1, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	f1 cf       	rjmp	.-30     	; 0xbbc <__fp_splitA+0xc>
 bda:	86 95       	lsr	r24
 bdc:	71 05       	cpc	r23, r1
 bde:	61 05       	cpc	r22, r1
 be0:	08 94       	sec
 be2:	08 95       	ret

00000be4 <__fp_zero>:
 be4:	e8 94       	clt

00000be6 <__fp_szero>:
 be6:	bb 27       	eor	r27, r27
 be8:	66 27       	eor	r22, r22
 bea:	77 27       	eor	r23, r23
 bec:	cb 01       	movw	r24, r22
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret
 bf2:	16 f0       	brts	.+4      	; 0xbf8 <__fp_szero+0x12>
 bf4:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_mpack>
 bf8:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>
 bfc:	68 94       	set
 bfe:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>

00000c02 <log>:
 c02:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_splitA>
 c06:	a8 f3       	brcs	.-22     	; 0xbf2 <__fp_szero+0xc>
 c08:	99 23       	and	r25, r25
 c0a:	c1 f3       	breq	.-16     	; 0xbfc <__fp_szero+0x16>
 c0c:	ae f3       	brts	.-22     	; 0xbf8 <__fp_szero+0x12>
 c0e:	df 93       	push	r29
 c10:	cf 93       	push	r28
 c12:	1f 93       	push	r17
 c14:	0f 93       	push	r16
 c16:	ff 92       	push	r15
 c18:	c9 2f       	mov	r28, r25
 c1a:	dd 27       	eor	r29, r29
 c1c:	88 23       	and	r24, r24
 c1e:	2a f0       	brmi	.+10     	; 0xc2a <log+0x28>
 c20:	21 97       	sbiw	r28, 0x01	; 1
 c22:	66 0f       	add	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	da f7       	brpl	.-10     	; 0xc20 <log+0x1e>
 c2a:	20 e0       	ldi	r18, 0x00	; 0
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	40 e8       	ldi	r20, 0x80	; 128
 c30:	5f eb       	ldi	r21, 0xBF	; 191
 c32:	9f e3       	ldi	r25, 0x3F	; 63
 c34:	88 39       	cpi	r24, 0x98	; 152
 c36:	20 f0       	brcs	.+8      	; 0xc40 <log+0x3e>
 c38:	80 3e       	cpi	r24, 0xE0	; 224
 c3a:	38 f0       	brcs	.+14     	; 0xc4a <log+0x48>
 c3c:	21 96       	adiw	r28, 0x01	; 1
 c3e:	8f 77       	andi	r24, 0x7F	; 127
 c40:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
 c44:	ec ec       	ldi	r30, 0xCC	; 204
 c46:	f0 e0       	ldi	r31, 0x00	; 0
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <log+0x50>
 c4a:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
 c4e:	e9 ef       	ldi	r30, 0xF9	; 249
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_powser>
 c56:	8b 01       	movw	r16, r22
 c58:	be 01       	movw	r22, r28
 c5a:	ec 01       	movw	r28, r24
 c5c:	fb 2e       	mov	r15, r27
 c5e:	6f 57       	subi	r22, 0x7F	; 127
 c60:	71 09       	sbc	r23, r1
 c62:	75 95       	asr	r23
 c64:	77 1f       	adc	r23, r23
 c66:	88 0b       	sbc	r24, r24
 c68:	99 0b       	sbc	r25, r25
 c6a:	0e 94 6d 05 	call	0xada	; 0xada <__floatsisf>
 c6e:	28 e1       	ldi	r18, 0x18	; 24
 c70:	32 e7       	ldi	r19, 0x72	; 114
 c72:	41 e3       	ldi	r20, 0x31	; 49
 c74:	5f e3       	ldi	r21, 0x3F	; 63
 c76:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3x>
 c7a:	af 2d       	mov	r26, r15
 c7c:	98 01       	movw	r18, r16
 c7e:	ae 01       	movw	r20, r28
 c80:	ff 90       	pop	r15
 c82:	0f 91       	pop	r16
 c84:	1f 91       	pop	r17
 c86:	cf 91       	pop	r28
 c88:	df 91       	pop	r29
 c8a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__addsf3x>
 c8e:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>

00000c92 <__mulsf3>:
 c92:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3x>
 c96:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>
 c9a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscA>
 c9e:	38 f0       	brcs	.+14     	; 0xcae <__mulsf3+0x1c>
 ca0:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_pscB>
 ca4:	20 f0       	brcs	.+8      	; 0xcae <__mulsf3+0x1c>
 ca6:	95 23       	and	r25, r21
 ca8:	11 f0       	breq	.+4      	; 0xcae <__mulsf3+0x1c>
 caa:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>
 cae:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>
 cb2:	11 24       	eor	r1, r1
 cb4:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_szero>

00000cb8 <__mulsf3x>:
 cb8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_split3>
 cbc:	70 f3       	brcs	.-36     	; 0xc9a <__mulsf3+0x8>

00000cbe <__mulsf3_pse>:
 cbe:	95 9f       	mul	r25, r21
 cc0:	c1 f3       	breq	.-16     	; 0xcb2 <__mulsf3+0x20>
 cc2:	95 0f       	add	r25, r21
 cc4:	50 e0       	ldi	r21, 0x00	; 0
 cc6:	55 1f       	adc	r21, r21
 cc8:	62 9f       	mul	r22, r18
 cca:	f0 01       	movw	r30, r0
 ccc:	72 9f       	mul	r23, r18
 cce:	bb 27       	eor	r27, r27
 cd0:	f0 0d       	add	r31, r0
 cd2:	b1 1d       	adc	r27, r1
 cd4:	63 9f       	mul	r22, r19
 cd6:	aa 27       	eor	r26, r26
 cd8:	f0 0d       	add	r31, r0
 cda:	b1 1d       	adc	r27, r1
 cdc:	aa 1f       	adc	r26, r26
 cde:	64 9f       	mul	r22, r20
 ce0:	66 27       	eor	r22, r22
 ce2:	b0 0d       	add	r27, r0
 ce4:	a1 1d       	adc	r26, r1
 ce6:	66 1f       	adc	r22, r22
 ce8:	82 9f       	mul	r24, r18
 cea:	22 27       	eor	r18, r18
 cec:	b0 0d       	add	r27, r0
 cee:	a1 1d       	adc	r26, r1
 cf0:	62 1f       	adc	r22, r18
 cf2:	73 9f       	mul	r23, r19
 cf4:	b0 0d       	add	r27, r0
 cf6:	a1 1d       	adc	r26, r1
 cf8:	62 1f       	adc	r22, r18
 cfa:	83 9f       	mul	r24, r19
 cfc:	a0 0d       	add	r26, r0
 cfe:	61 1d       	adc	r22, r1
 d00:	22 1f       	adc	r18, r18
 d02:	74 9f       	mul	r23, r20
 d04:	33 27       	eor	r19, r19
 d06:	a0 0d       	add	r26, r0
 d08:	61 1d       	adc	r22, r1
 d0a:	23 1f       	adc	r18, r19
 d0c:	84 9f       	mul	r24, r20
 d0e:	60 0d       	add	r22, r0
 d10:	21 1d       	adc	r18, r1
 d12:	82 2f       	mov	r24, r18
 d14:	76 2f       	mov	r23, r22
 d16:	6a 2f       	mov	r22, r26
 d18:	11 24       	eor	r1, r1
 d1a:	9f 57       	subi	r25, 0x7F	; 127
 d1c:	50 40       	sbci	r21, 0x00	; 0
 d1e:	9a f0       	brmi	.+38     	; 0xd46 <__mulsf3_pse+0x88>
 d20:	f1 f0       	breq	.+60     	; 0xd5e <__mulsf3_pse+0xa0>
 d22:	88 23       	and	r24, r24
 d24:	4a f0       	brmi	.+18     	; 0xd38 <__mulsf3_pse+0x7a>
 d26:	ee 0f       	add	r30, r30
 d28:	ff 1f       	adc	r31, r31
 d2a:	bb 1f       	adc	r27, r27
 d2c:	66 1f       	adc	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	91 50       	subi	r25, 0x01	; 1
 d34:	50 40       	sbci	r21, 0x00	; 0
 d36:	a9 f7       	brne	.-22     	; 0xd22 <__mulsf3_pse+0x64>
 d38:	9e 3f       	cpi	r25, 0xFE	; 254
 d3a:	51 05       	cpc	r21, r1
 d3c:	80 f0       	brcs	.+32     	; 0xd5e <__mulsf3_pse+0xa0>
 d3e:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_inf>
 d42:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_szero>
 d46:	5f 3f       	cpi	r21, 0xFF	; 255
 d48:	e4 f3       	brlt	.-8      	; 0xd42 <__mulsf3_pse+0x84>
 d4a:	98 3e       	cpi	r25, 0xE8	; 232
 d4c:	d4 f3       	brlt	.-12     	; 0xd42 <__mulsf3_pse+0x84>
 d4e:	86 95       	lsr	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b7 95       	ror	r27
 d56:	f7 95       	ror	r31
 d58:	e7 95       	ror	r30
 d5a:	9f 5f       	subi	r25, 0xFF	; 255
 d5c:	c1 f7       	brne	.-16     	; 0xd4e <__mulsf3_pse+0x90>
 d5e:	fe 2b       	or	r31, r30
 d60:	88 0f       	add	r24, r24
 d62:	91 1d       	adc	r25, r1
 d64:	96 95       	lsr	r25
 d66:	87 95       	ror	r24
 d68:	97 f9       	bld	r25, 7
 d6a:	08 95       	ret

00000d6c <__fp_mpack>:
 d6c:	9f 3f       	cpi	r25, 0xFF	; 255
 d6e:	31 f0       	breq	.+12     	; 0xd7c <__fp_mpack_finite+0xc>

00000d70 <__fp_mpack_finite>:
 d70:	91 50       	subi	r25, 0x01	; 1
 d72:	20 f4       	brcc	.+8      	; 0xd7c <__fp_mpack_finite+0xc>
 d74:	87 95       	ror	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b7 95       	ror	r27
 d7c:	88 0f       	add	r24, r24
 d7e:	91 1d       	adc	r25, r1
 d80:	96 95       	lsr	r25
 d82:	87 95       	ror	r24
 d84:	97 f9       	bld	r25, 7
 d86:	08 95       	ret

00000d88 <__fp_powser>:
 d88:	df 93       	push	r29
 d8a:	cf 93       	push	r28
 d8c:	1f 93       	push	r17
 d8e:	0f 93       	push	r16
 d90:	ff 92       	push	r15
 d92:	ef 92       	push	r14
 d94:	df 92       	push	r13
 d96:	7b 01       	movw	r14, r22
 d98:	8c 01       	movw	r16, r24
 d9a:	68 94       	set
 d9c:	06 c0       	rjmp	.+12     	; 0xdaa <__fp_powser+0x22>
 d9e:	da 2e       	mov	r13, r26
 da0:	ef 01       	movw	r28, r30
 da2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3x>
 da6:	fe 01       	movw	r30, r28
 da8:	e8 94       	clt
 daa:	a5 91       	lpm	r26, Z+
 dac:	25 91       	lpm	r18, Z+
 dae:	35 91       	lpm	r19, Z+
 db0:	45 91       	lpm	r20, Z+
 db2:	55 91       	lpm	r21, Z+
 db4:	a6 f3       	brts	.-24     	; 0xd9e <__fp_powser+0x16>
 db6:	ef 01       	movw	r28, r30
 db8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__addsf3x>
 dbc:	fe 01       	movw	r30, r28
 dbe:	97 01       	movw	r18, r14
 dc0:	a8 01       	movw	r20, r16
 dc2:	da 94       	dec	r13
 dc4:	69 f7       	brne	.-38     	; 0xda0 <__fp_powser+0x18>
 dc6:	df 90       	pop	r13
 dc8:	ef 90       	pop	r14
 dca:	ff 90       	pop	r15
 dcc:	0f 91       	pop	r16
 dce:	1f 91       	pop	r17
 dd0:	cf 91       	pop	r28
 dd2:	df 91       	pop	r29
 dd4:	08 95       	ret

00000dd6 <__divmodhi4>:
 dd6:	97 fb       	bst	r25, 7
 dd8:	07 2e       	mov	r0, r23
 dda:	16 f4       	brtc	.+4      	; 0xde0 <__divmodhi4+0xa>
 ddc:	00 94       	com	r0
 dde:	07 d0       	rcall	.+14     	; 0xdee <__divmodhi4_neg1>
 de0:	77 fd       	sbrc	r23, 7
 de2:	09 d0       	rcall	.+18     	; 0xdf6 <__divmodhi4_neg2>
 de4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__udivmodhi4>
 de8:	07 fc       	sbrc	r0, 7
 dea:	05 d0       	rcall	.+10     	; 0xdf6 <__divmodhi4_neg2>
 dec:	3e f4       	brtc	.+14     	; 0xdfc <__divmodhi4_exit>

00000dee <__divmodhi4_neg1>:
 dee:	90 95       	com	r25
 df0:	81 95       	neg	r24
 df2:	9f 4f       	sbci	r25, 0xFF	; 255
 df4:	08 95       	ret

00000df6 <__divmodhi4_neg2>:
 df6:	70 95       	com	r23
 df8:	61 95       	neg	r22
 dfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000dfc <__divmodhi4_exit>:
 dfc:	08 95       	ret

00000dfe <__udivmodhi4>:
 dfe:	aa 1b       	sub	r26, r26
 e00:	bb 1b       	sub	r27, r27
 e02:	51 e1       	ldi	r21, 0x11	; 17
 e04:	07 c0       	rjmp	.+14     	; 0xe14 <__udivmodhi4_ep>

00000e06 <__udivmodhi4_loop>:
 e06:	aa 1f       	adc	r26, r26
 e08:	bb 1f       	adc	r27, r27
 e0a:	a6 17       	cp	r26, r22
 e0c:	b7 07       	cpc	r27, r23
 e0e:	10 f0       	brcs	.+4      	; 0xe14 <__udivmodhi4_ep>
 e10:	a6 1b       	sub	r26, r22
 e12:	b7 0b       	sbc	r27, r23

00000e14 <__udivmodhi4_ep>:
 e14:	88 1f       	adc	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	5a 95       	dec	r21
 e1a:	a9 f7       	brne	.-22     	; 0xe06 <__udivmodhi4_loop>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	bc 01       	movw	r22, r24
 e22:	cd 01       	movw	r24, r26
 e24:	08 95       	ret

00000e26 <__itoa_ncheck>:
 e26:	bb 27       	eor	r27, r27
 e28:	4a 30       	cpi	r20, 0x0A	; 10
 e2a:	31 f4       	brne	.+12     	; 0xe38 <__itoa_ncheck+0x12>
 e2c:	99 23       	and	r25, r25
 e2e:	22 f4       	brpl	.+8      	; 0xe38 <__itoa_ncheck+0x12>
 e30:	bd e2       	ldi	r27, 0x2D	; 45
 e32:	90 95       	com	r25
 e34:	81 95       	neg	r24
 e36:	9f 4f       	sbci	r25, 0xFF	; 255
 e38:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__utoa_common>

00000e3c <__utoa_ncheck>:
 e3c:	bb 27       	eor	r27, r27

00000e3e <__utoa_common>:
 e3e:	fb 01       	movw	r30, r22
 e40:	55 27       	eor	r21, r21
 e42:	aa 27       	eor	r26, r26
 e44:	88 0f       	add	r24, r24
 e46:	99 1f       	adc	r25, r25
 e48:	aa 1f       	adc	r26, r26
 e4a:	a4 17       	cp	r26, r20
 e4c:	10 f0       	brcs	.+4      	; 0xe52 <__utoa_common+0x14>
 e4e:	a4 1b       	sub	r26, r20
 e50:	83 95       	inc	r24
 e52:	50 51       	subi	r21, 0x10	; 16
 e54:	b9 f7       	brne	.-18     	; 0xe44 <__utoa_common+0x6>
 e56:	a0 5d       	subi	r26, 0xD0	; 208
 e58:	aa 33       	cpi	r26, 0x3A	; 58
 e5a:	08 f0       	brcs	.+2      	; 0xe5e <__utoa_common+0x20>
 e5c:	a9 5d       	subi	r26, 0xD9	; 217
 e5e:	a1 93       	st	Z+, r26
 e60:	00 97       	sbiw	r24, 0x00	; 0
 e62:	79 f7       	brne	.-34     	; 0xe42 <__utoa_common+0x4>
 e64:	b1 11       	cpse	r27, r1
 e66:	b1 93       	st	Z+, r27
 e68:	11 92       	st	Z+, r1
 e6a:	cb 01       	movw	r24, r22
 e6c:	0c 94 38 07 	jmp	0xe70	; 0xe70 <strrev>

00000e70 <strrev>:
 e70:	dc 01       	movw	r26, r24
 e72:	fc 01       	movw	r30, r24
 e74:	67 2f       	mov	r22, r23
 e76:	71 91       	ld	r23, Z+
 e78:	77 23       	and	r23, r23
 e7a:	e1 f7       	brne	.-8      	; 0xe74 <strrev+0x4>
 e7c:	32 97       	sbiw	r30, 0x02	; 2
 e7e:	04 c0       	rjmp	.+8      	; 0xe88 <strrev+0x18>
 e80:	7c 91       	ld	r23, X
 e82:	6d 93       	st	X+, r22
 e84:	70 83       	st	Z, r23
 e86:	62 91       	ld	r22, -Z
 e88:	ae 17       	cp	r26, r30
 e8a:	bf 07       	cpc	r27, r31
 e8c:	c8 f3       	brcs	.-14     	; 0xe80 <strrev+0x10>
 e8e:	08 95       	ret

00000e90 <_exit>:
 e90:	f8 94       	cli

00000e92 <__stop_program>:
 e92:	ff cf       	rjmp	.-2      	; 0xe92 <__stop_program>
