
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d82  00000e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080010a  0080010a  00000e20  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024ac  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001142  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f0  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00005c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7c  00000000  00000000  000061b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff8  00000000  00000000  00006c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e2 e8       	ldi	r30, 0x82	; 130
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 30       	cpi	r26, 0x0A	; 10
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	aa e0       	ldi	r26, 0x0A	; 10
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 37       	cpi	r26, 0x70	; 112
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 9c 01 	call	0x338	; 0x338 <main>
 102:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <setup_TMR1_pwm>:
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 120:	e0 e8       	ldi	r30, 0x80	; 128
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	89 60       	ori	r24, 0x09	; 9
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <set_TMR1A_duty_cycle>:
 136:	bc 01       	movw	r22, r24
 138:	99 0f       	add	r25, r25
 13a:	88 0b       	sbc	r24, r24
 13c:	99 0b       	sbc	r25, r25
 13e:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatsisf>
 142:	2f e6       	ldi	r18, 0x6F	; 111
 144:	32 e1       	ldi	r19, 0x12	; 18
 146:	43 e8       	ldi	r20, 0x83	; 131
 148:	5e e3       	ldi	r21, 0x3E	; 62
 14a:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__subsf3>
 15a:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixsfsi>
 15e:	69 3c       	cpi	r22, 0xC9	; 201
 160:	71 05       	cpc	r23, r1
 162:	14 f0       	brlt	.+4      	; 0x168 <set_TMR1A_duty_cycle+0x32>
 164:	68 ec       	ldi	r22, 0xC8	; 200
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	77 27       	eor	r23, r23
 16a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 172:	08 95       	ret

00000174 <set_TMR1B_duty_cycle>:
 174:	bc 01       	movw	r22, r24
 176:	99 0f       	add	r25, r25
 178:	88 0b       	sbc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatsisf>
 180:	2f e6       	ldi	r18, 0x6F	; 111
 182:	32 e1       	ldi	r19, 0x12	; 18
 184:	43 e8       	ldi	r20, 0x83	; 131
 186:	5e e3       	ldi	r21, 0x3E	; 62
 188:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__subsf3>
 198:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixsfsi>
 19c:	69 3c       	cpi	r22, 0xC9	; 201
 19e:	71 05       	cpc	r23, r1
 1a0:	14 f0       	brlt	.+4      	; 0x1a6 <set_TMR1B_duty_cycle+0x32>
 1a2:	68 ec       	ldi	r22, 0xC8	; 200
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	77 27       	eor	r23, r23
 1a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1b0:	08 95       	ret

000001b2 <stop_TMR1A_pwm>:
 1b2:	e0 e8       	ldi	r30, 0x80	; 128
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <stop_TMR1B_pwm>:
 1be:	e0 e8       	ldi	r30, 0x80	; 128
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <start_TMR1A_pwm>:
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <start_TMR1B_pwm>:
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <motor_off>:
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	2a 98       	cbi	0x05, 2	; 5
 1e6:	08 95       	ret

000001e8 <motor_on>:
 1e8:	29 9a       	sbi	0x05, 1	; 5
 1ea:	2a 9a       	sbi	0x05, 2	; 5
 1ec:	08 95       	ret

000001ee <setup_TMR0_pwm>:
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	83 68       	ori	r24, 0x83	; 131
 1f2:	84 bd       	out	0x24, r24	; 36
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	85 bd       	out	0x25, r24	; 37
 1fa:	8d e3       	ldi	r24, 0x3D	; 61
 1fc:	87 bd       	out	0x27, r24	; 39
 1fe:	08 95       	ret

00000200 <setup_TMR3>:
 200:	e1 e9       	ldi	r30, 0x91	; 145
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& MISC &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 20c:	6c 9a       	sbi	0x0d, 4	; 13
	IN1_DDR |= (1<<IN1);
 20e:	55 9a       	sbi	0x0a, 5	; 10
	IN2_DDR |= (1<<IN2);
 210:	54 9a       	sbi	0x0a, 4	; 10
	EN1_DDR |= (1<<EN1);
 212:	21 9a       	sbi	0x04, 1	; 4
	EN2_DDR |= (1<<EN2);
 214:	22 9a       	sbi	0x04, 2	; 4
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
 216:	23 9a       	sbi	0x04, 3	; 4
 218:	08 95       	ret

0000021a <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	69 f0       	breq	.+26     	; 0x238 <delay_ms+0x1e>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	ef ec       	ldi	r30, 0xCF	; 207
 224:	f7 e0       	ldi	r31, 0x07	; 7
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <delay_ms+0xc>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <delay_ms+0x12>
 22c:	00 00       	nop
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	82 17       	cp	r24, r18
 234:	93 07       	cpc	r25, r19
 236:	a9 f7       	brne	.-22     	; 0x222 <delay_ms+0x8>
 238:	08 95       	ret

0000023a <flash_LED>:
	EN2_DDR |= (1<<EN2);
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 244:	88 23       	and	r24, r24
 246:	79 f0       	breq	.+30     	; 0x266 <flash_LED+0x2c>
 248:	8b 01       	movw	r16, r22
 24a:	d8 2f       	mov	r29, r24
 24c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 24e:	68 94       	set
 250:	ff 24       	eor	r15, r15
 252:	f4 f8       	bld	r15, 4
 254:	9e b1       	in	r25, 0x0e	; 14
 256:	9f 25       	eor	r25, r15
 258:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 25a:	c8 01       	movw	r24, r16
 25c:	0e 94 0d 01 	call	0x21a	; 0x21a <delay_ms>
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	dc 13       	cpse	r29, r28
 264:	f7 cf       	rjmp	.-18     	; 0x254 <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	08 95       	ret

00000272 <estop>:
		_delay_ms(1);
	}
}
void estop()
{
	mtr_cmd = 0; // set motor command to 0 so the motor stops if communication is lost
 272:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <mtr_cmd+0x1>
 276:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mtr_cmd>
	srv_cmd = 0; // set servo command to 0 so the servo stops if communication is lost
 27a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <srv_cmd+0x1>
 27e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <srv_cmd>
	stop_TMR1A_pwm();
 282:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
	stop_TMR1B_pwm();
 286:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
	motor_off();
 28a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <motor_off>
 28e:	08 95       	ret

00000290 <parse_GPMRC>:
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//&&&&&&&&&&&&&&&&&&&&&&& GPS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void parse_GPMRC()
{
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <parse_GPMRC+0xa>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_buf[2];
	
	temp_buf[0] = lat_buf[0];
 29e:	0e e5       	ldi	r16, 0x5E	; 94
 2a0:	11 e0       	ldi	r17, 0x01	; 1
 2a2:	f8 01       	movw	r30, r16
 2a4:	80 81       	ld	r24, Z
 2a6:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[1];
 2a8:	81 81       	ldd	r24, Z+1	; 0x01
 2aa:	8a 83       	std	Y+2, r24	; 0x02
	lat_deg = atoi((const char *)temp_buf);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 2b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <lat_deg>
	
	temp_buf[0] = lat_buf[2];
 2b8:	f8 01       	movw	r30, r16
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[3];
 2be:	83 81       	ldd	r24, Z+3	; 0x03
 2c0:	8a 83       	std	Y+2, r24	; 0x02
	lat_min = atoi((const char *)temp_buf);
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 2ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lat_min>
	
	temp_buf[0] = lat_buf[5];
 2ce:	f8 01       	movw	r30, r16
 2d0:	85 81       	ldd	r24, Z+5	; 0x05
 2d2:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[6];
 2d4:	86 81       	ldd	r24, Z+6	; 0x06
 2d6:	8a 83       	std	Y+2, r24	; 0x02
	lat_sec = atoi((const char *)temp_buf);
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 2e0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lat_sec>
	
	temp_buf[0] = lon_buf[0];
 2e4:	07 e6       	ldi	r16, 0x67	; 103
 2e6:	11 e0       	ldi	r17, 0x01	; 1
 2e8:	f8 01       	movw	r30, r16
 2ea:	80 81       	ld	r24, Z
 2ec:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[1];
 2ee:	81 81       	ldd	r24, Z+1	; 0x01
 2f0:	8a 83       	std	Y+2, r24	; 0x02
	lon_deg = atoi((const char *)temp_buf);
 2f2:	ce 01       	movw	r24, r28
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 2fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lon_deg>
	
	temp_buf[0] = lon_buf[2];
 2fe:	f8 01       	movw	r30, r16
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[3];
 304:	83 81       	ldd	r24, Z+3	; 0x03
 306:	8a 83       	std	Y+2, r24	; 0x02
	lon_min = atoi((const char *)temp_buf);
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 310:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <lon_min>
	
	temp_buf[0] = lon_buf[5];
 314:	f8 01       	movw	r30, r16
 316:	85 81       	ldd	r24, Z+5	; 0x05
 318:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[6];
 31a:	86 81       	ldd	r24, Z+6	; 0x06
 31c:	8a 83       	std	Y+2, r24	; 0x02
	lon_sec = atoi((const char *)temp_buf);
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	0e 94 99 06 	call	0xd32	; 0xd32 <atoi>
 326:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <main>:



int main(void)
{
	setup_gpios(); 
 338:	0e 94 06 01 	call	0x20c	; 0x20c <setup_gpios>
	#ifdef GPS_ON
	/* USART setup */
	setup_usart0(BR_9600); // for NEO6 GPS
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <setup_usart0>
	#endif
	
	/* nRF24L01 setup */
	#ifndef DIRECT_JOYSTICK
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 342:	0e 94 92 04 	call	0x924	; 0x924 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 346:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_init>
	mirf_config(); // configure nRF24L01
 34a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <mirf_config>
	mirf_set_TADDR(tx_address);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <mirf_set_RADDR>
	#endif
	
	/* ADC for current and temperature sensor (and joystick indirect joystick mode) */
	setup_adc();
 35e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
	
	/* Timers setup */
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
 362:	0e 94 90 00 	call	0x120	; 0x120 <setup_TMR1_pwm>
	setup_TMR0_pwm(); // setup TMR0 PWM for servo
 366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setup_TMR0_pwm>
	setup_TMR3(); // for communication timeout with controller
 36a:	0e 94 00 01 	call	0x200	; 0x200 <setup_TMR3>
	
	sei(); // enable global interrupts
 36e:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 370:	62 e3       	ldi	r22, 0x32	; 50
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8a e0       	ldi	r24, 0x0A	; 10
 376:	0e 94 1d 01 	call	0x23a	; 0x23a <flash_LED>
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	89 e6       	ldi	r24, 0x69	; 105
 37e:	98 e1       	ldi	r25, 0x18	; 24
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x48>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x52>
 38a:	00 00       	nop
 38c:	8f e1       	ldi	r24, 0x1F	; 31
 38e:	9e e4       	ldi	r25, 0x4E	; 78
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x58>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x5e>
 396:	00 00       	nop

	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 398:	68 94       	set
 39a:	bb 24       	eor	r11, r11
 39c:	b4 f8       	bld	r11, 4
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 39e:	c4 e9       	ldi	r28, 0x94	; 148
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
			else if (srv_cmd < -20)
				srv_cmd = -20;
 3a2:	0f 2e       	mov	r0, r31
 3a4:	fc ee       	ldi	r31, 0xEC	; 236
 3a6:	ef 2e       	mov	r14, r31
 3a8:	ff 24       	eor	r15, r15
 3aa:	fa 94       	dec	r15
 3ac:	f0 2d       	mov	r31, r0
 			srv_cmd = 0;
			#endif
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
 3ae:	04 e1       	ldi	r16, 0x14	; 20
 3b0:	10 e0       	ldi	r17, 0x00	; 0
				while (!mirf_data_sent())
				{
					if (TCNT3 > 1500) // timeout of one second
					{
						comm_lost_count++;
						comm_lost = 1;
 3b2:	aa 24       	eor	r10, r10
 3b4:	a3 94       	inc	r10

	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 3b6:	8e b1       	in	r24, 0x0e	; 14
 3b8:	8b 25       	eor	r24, r11
 3ba:	8e b9       	out	0x0e, r24	; 14
		#ifndef DIRECT_JOYSTICK
		if (comm_lost_count > 50)
 3bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 3c0:	83 33       	cpi	r24, 0x33	; 51
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <main+0x94>
		{
			comm_lost_count = 0;
 3c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <comm_lost_count>
			mirf_config();
 3c8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <mirf_config>
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 3cc:	19 82       	std	Y+1, r1	; 0x01
 3ce:	18 82       	st	Y, r1
 3d0:	0d c0       	rjmp	.+26     	; 0x3ec <main+0xb4>
		}

		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
		{
			if (TCNT3 > 1500) // timeout of one second
 3d2:	88 81       	ld	r24, Y
 3d4:	99 81       	ldd	r25, Y+1	; 0x01
 3d6:	8d 3d       	cpi	r24, 0xDD	; 221
 3d8:	95 40       	sbci	r25, 0x05	; 5
 3da:	40 f0       	brcs	.+16     	; 0x3ec <main+0xb4>
			{
				estop();
 3dc:	0e 94 39 01 	call	0x272	; 0x272 <estop>
				comm_lost_count++;
 3e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
 3ea:	16 c1       	rjmp	.+556    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
			comm_lost_count = 0;
			mirf_config();
		}

		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
 3ec:	0e 94 b0 03 	call	0x760	; 0x760 <mirf_data_ready>
 3f0:	88 23       	and	r24, r24
 3f2:	79 f3       	breq	.-34     	; 0x3d2 <main+0x9a>
				break;
			}
		}
		#endif
		
		if (comm_lost == 0) // if data has been received (will be 0 by default so in direct joystick mode, we will always enter this if statement
 3f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <comm_lost>
 3f8:	81 11       	cpse	r24, r1
 3fa:	0e c1       	rjmp	.+540    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		{
			#ifndef DIRECT_JOYSTICK
			mirf_get_data(buffer); // get the data, put it in buffer
 3fc:	8b e1       	ldi	r24, 0x1B	; 27
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 27 04 	call	0x84e	; 0x84e <mirf_get_data>
			
			if (buffer[0] == GPSOFF) // if the command is latitude request
 404:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <buffer>
 408:	8e 34       	cpi	r24, 0x4E	; 78
 40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			{
				stop_RX0_interrupt();		
 40c:	0e 94 ef 04 	call	0x9de	; 0x9de <stop_RX0_interrupt>
 410:	05 c1       	rjmp	.+522    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			}
			else if (buffer[0] == GPSON)
 412:	89 35       	cpi	r24, 0x59	; 89
 414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			{
				start_RX0_interrupt();	
 416:	0e 94 f5 04 	call	0x9ea	; 0x9ea <start_RX0_interrupt>
 41a:	00 c1       	rjmp	.+512    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			}
			else if (buffer[0] == GET_LAT) // if the command is latitude request
 41c:	81 34       	cpi	r24, 0x41	; 65
 41e:	31 f5       	brne	.+76     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				buffer[0] = lat_deg;
 420:	eb e1       	ldi	r30, 0x1B	; 27
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <lat_deg>
 428:	80 83       	st	Z, r24
				buffer[1] = lat_min;
 42a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lat_min>
 42e:	81 83       	std	Z+1, r24	; 0x01
				buffer[2] = lat_sec;
 430:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lat_sec>
 434:	82 83       	std	Z+2, r24	; 0x02
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 436:	19 82       	std	Y+1, r1	; 0x01
 438:	18 82       	st	Y, r1
			{
				buffer[0] = lat_deg;
				buffer[1] = lat_min;
				buffer[2] = lat_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	cf 01       	movw	r24, r30
 43e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <mirf_send>
				while (!mirf_data_sent())
 442:	0d c0       	rjmp	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				{
					if (TCNT3 > 1500) // timeout of one second
 444:	88 81       	ld	r24, Y
 446:	99 81       	ldd	r25, Y+1	; 0x01
 448:	8d 3d       	cpi	r24, 0xDD	; 221
 44a:	95 40       	sbci	r25, 0x05	; 5
 44c:	40 f0       	brcs	.+16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
					{
						comm_lost_count++;
 44e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
						comm_lost = 1;
 458:	a0 92 15 01 	sts	0x0115, r10	; 0x800115 <comm_lost>
						break;
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				buffer[0] = lat_deg;
				buffer[1] = lat_min;
				buffer[2] = lat_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
				while (!mirf_data_sent())
 45e:	0e 94 bd 03 	call	0x77a	; 0x77a <mirf_data_sent>
 462:	88 23       	and	r24, r24
 464:	79 f3       	breq	.-34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
						comm_lost = 1;
						break;
					}
				}
				
				set_RX_MODE(); // listen for new data
 466:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_RX_MODE>
 46a:	d8 c0       	rjmp	.+432    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
				
			}
			else if (buffer[0] == GET_LON) // if the command is longitude request
 46c:	8f 34       	cpi	r24, 0x4F	; 79
 46e:	91 f5       	brne	.+100    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			{
				buffer[0] = lon_deg;
 470:	eb e1       	ldi	r30, 0x1B	; 27
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lon_deg>
 478:	80 83       	st	Z, r24
				buffer[1] = lon_min;
 47a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lon_min>
 47e:	81 83       	std	Z+1, r24	; 0x01
				buffer[2] = lon_sec;
 480:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 484:	82 83       	std	Z+2, r24	; 0x02
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 486:	19 82       	std	Y+1, r1	; 0x01
 488:	18 82       	st	Y, r1
			{
				buffer[0] = lon_deg;
				buffer[1] = lon_min;
				buffer[2] = lon_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	cf 01       	movw	r24, r30
 48e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <mirf_send>
				while (!mirf_data_sent())
 492:	0d c0       	rjmp	.+26     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
				{
					if (TCNT3 > 1500) // timeout of one second
 494:	88 81       	ld	r24, Y
 496:	99 81       	ldd	r25, Y+1	; 0x01
 498:	8d 3d       	cpi	r24, 0xDD	; 221
 49a:	95 40       	sbci	r25, 0x05	; 5
 49c:	40 f0       	brcs	.+16     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
					{
						comm_lost_count++;
 49e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
						comm_lost = 1;
 4a8:	a0 92 15 01 	sts	0x0115, r10	; 0x800115 <comm_lost>
						break;
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				buffer[0] = lon_deg;
				buffer[1] = lon_min;
				buffer[2] = lon_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
				while (!mirf_data_sent())
 4ae:	0e 94 bd 03 	call	0x77a	; 0x77a <mirf_data_sent>
 4b2:	88 23       	and	r24, r24
 4b4:	79 f3       	breq	.-34     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
						comm_lost = 1;
						break;
					}
				}
				
				lat_deg = 0;
 4b6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <lat_deg>
				lat_min = 0;
 4ba:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <lat_min>
				lat_sec = 0;
 4be:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lat_sec>
				lon_deg = 0;
 4c2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lon_deg>
				lon_min = 0;
 4c6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lon_min>
				lon_sec = 0;		
 4ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
				
				set_RX_MODE(); // listen for new data
 4ce:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_RX_MODE>
 4d2:	a4 c0       	rjmp	.+328    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
				
			}
			else // otherwise, the command is for motor control (default command)
			{
				mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
 4d4:	eb e1       	ldi	r30, 0x1B	; 27
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	91 81       	ldd	r25, Z+1	; 0x01
 4da:	c8 2e       	mov	r12, r24
 4dc:	88 0f       	add	r24, r24
 4de:	dd 08       	sbc	r13, r13
 4e0:	dc 2c       	mov	r13, r12
 4e2:	cc 24       	eor	r12, r12
 4e4:	c9 2a       	or	r12, r25
 4e6:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <mtr_cmd+0x1>
 4ea:	c0 92 19 01 	sts	0x0119, r12	; 0x800119 <mtr_cmd>
				srv_cmd = buffer[2];
 4ee:	82 81       	ldd	r24, Z+2	; 0x02
 4f0:	08 2e       	mov	r0, r24
 4f2:	00 0c       	add	r0, r0
 4f4:	99 0b       	sbc	r25, r25
 			if ((srv_cmd < 5) && (srv_cmd > -5))
 			srv_cmd = 0;
			#endif
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
 4f6:	85 31       	cpi	r24, 0x15	; 21
 4f8:	91 05       	cpc	r25, r1
 4fa:	2c f0       	brlt	.+10     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
				srv_cmd = 20;
 4fc:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <srv_cmd+0x1>
 500:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <srv_cmd>
 504:	0d c0       	rjmp	.+26     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			else if (srv_cmd < -20)
 506:	8c 3e       	cpi	r24, 0xEC	; 236
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	92 07       	cpc	r25, r18
 50c:	2c f0       	brlt	.+10     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
				
			}
			else // otherwise, the command is for motor control (default command)
			{
				mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
				srv_cmd = buffer[2];
 50e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <srv_cmd+0x1>
 512:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <srv_cmd>
 516:	04 c0       	rjmp	.+8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
			else if (srv_cmd < -20)
				srv_cmd = -20;
 518:	f0 92 18 01 	sts	0x0118, r15	; 0x800118 <srv_cmd+0x1>
 51c:	e0 92 17 01 	sts	0x0117, r14	; 0x800117 <srv_cmd>
			srv_cmd = 0.75*srv_cmd + .25*old_srv_cmd;
 520:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <srv_cmd>
 524:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <srv_cmd+0x1>
 528:	07 2e       	mov	r0, r23
 52a:	00 0c       	add	r0, r0
 52c:	88 0b       	sbc	r24, r24
 52e:	99 0b       	sbc	r25, r25
 530:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatsisf>
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e4       	ldi	r20, 0x40	; 64
 53a:	5f e3       	ldi	r21, 0x3F	; 63
 53c:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3>
 540:	2b 01       	movw	r4, r22
 542:	3c 01       	movw	r6, r24
 544:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <old_srv_cmd>
 548:	06 2e       	mov	r0, r22
 54a:	00 0c       	add	r0, r0
 54c:	77 0b       	sbc	r23, r23
 54e:	88 0b       	sbc	r24, r24
 550:	99 0b       	sbc	r25, r25
 552:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatsisf>
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	40 e8       	ldi	r20, 0x80	; 128
 55c:	5e e3       	ldi	r21, 0x3E	; 62
 55e:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3>
 562:	9b 01       	movw	r18, r22
 564:	ac 01       	movw	r20, r24
 566:	c3 01       	movw	r24, r6
 568:	b2 01       	movw	r22, r4
 56a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
 56e:	0e 94 68 05 	call	0xad0	; 0xad0 <__fixsfsi>
 572:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <srv_cmd>
 576:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <srv_cmd+0x1>
			old_srv_cmd = srv_cmd;
 57a:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <old_srv_cmd>
			
			if (abs(mtr_cmd) < 100) // deadband (mtr_cmd is from -1000 to 1000)
 57e:	83 e6       	ldi	r24, 0x63	; 99
 580:	c8 0e       	add	r12, r24
 582:	d1 1c       	adc	r13, r1
 584:	97 ec       	ldi	r25, 0xC7	; 199
 586:	c9 16       	cp	r12, r25
 588:	d1 04       	cpc	r13, r1
 58a:	38 f4       	brcc	.+14     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			{
				stop_TMR1A_pwm();
 58c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
				stop_TMR1B_pwm();
 590:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
				motor_off();
 594:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <motor_off>
 598:	25 c0       	rjmp	.+74     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
			}
			else  
			{
				motor_on();
 59a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <motor_on>
				if (mtr_cmd > 0 ) // forward direction
 59e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 5a2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 5a6:	18 16       	cp	r1, r24
 5a8:	19 06       	cpc	r1, r25
 5aa:	5c f4       	brge	.+22     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
				{
					stop_TMR1B_pwm();
 5ac:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
					start_TMR1A_pwm();
 5b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_TMR1A_pwm>
					set_TMR1A_duty_cycle(mtr_cmd);
 5b4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 5b8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 5bc:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1A_duty_cycle>
 5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
				}
				else if (mtr_cmd < 0)  // backward direction
 5c2:	99 23       	and	r25, r25
 5c4:	7c f4       	brge	.+30     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
				{
					stop_TMR1A_pwm();
 5c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
					start_TMR1B_pwm();
 5ca:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <start_TMR1B_pwm>
					set_TMR1B_duty_cycle(abs(mtr_cmd));
 5ce:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 5d2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 5d6:	99 23       	and	r25, r25
 5d8:	1c f4       	brge	.+6      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5da:	91 95       	neg	r25
 5dc:	81 95       	neg	r24
 5de:	91 09       	sbc	r25, r1
 5e0:	0e 94 ba 00 	call	0x174	; 0x174 <set_TMR1B_duty_cycle>

}
void move_servo(float angle)
{ 
	angle = 46 + angle*.355;
	OCR0A = (uint8_t)angle;
 5e4:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <srv_cmd>
 5e8:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <srv_cmd+0x1>
 5ec:	07 2e       	mov	r0, r23
 5ee:	00 0c       	add	r0, r0
 5f0:	88 0b       	sbc	r24, r24
 5f2:	99 0b       	sbc	r25, r25
 5f4:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatsisf>
 5f8:	2f e8       	ldi	r18, 0x8F	; 143
 5fa:	32 ec       	ldi	r19, 0xC2	; 194
 5fc:	45 eb       	ldi	r20, 0xB5	; 181
 5fe:	5e e3       	ldi	r21, 0x3E	; 62
 600:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	48 e3       	ldi	r20, 0x38	; 56
 60a:	52 e4       	ldi	r21, 0x42	; 66
 60c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
 610:	0e 94 6f 05 	call	0xade	; 0xade <__fixunssfsi>
 614:	67 bd       	out	0x27, r22	; 39
 616:	02 c0       	rjmp	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			}
			#endif
 		}
		#ifndef DIRECT_JOYSTICK
 		else
 			comm_lost = 0;
 618:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <comm_lost>
		#endif
		
		#ifdef GPS_ON	 
		if (gps_string_ready) // if a full gps sentence has been received, parse it
 61c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <gps_string_ready>
 620:	88 23       	and	r24, r24
 622:	31 f0       	breq	.+12     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
		{
			gps_string_ready = 0;
 624:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <gps_string_ready>
 			cli();
 628:	f8 94       	cli
 				parse_GPMRC(); // parse GPS string received by UASRT1 RX interrupt
 62a:	0e 94 48 01 	call	0x290	; 0x290 <parse_GPMRC>
			sei();
 62e:	78 94       	sei
 630:	8f e0       	ldi	r24, 0x0F	; 15
 632:	97 e2       	ldi	r25, 0x27	; 39
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 63a:	00 00       	nop
 63c:	bc ce       	rjmp	.-648    	; 0x3b6 <main+0x7e>

0000063e <__vector_20>:
#ifdef GPS_ON
//&&&&&&&&&&&&&&&&&&&&&&& USART1 ISR for GPS &&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh
ISR(USART0_RX_vect)
{
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
	rcv_string[k_RX] = UDR0;
 656:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 65a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	e2 5e       	subi	r30, 0xE2	; 226
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	80 83       	st	Z, r24
	
	if (rcv_string[k_RX] == '$')
 666:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	e2 5e       	subi	r30, 0xE2	; 226
 66e:	fe 4f       	sbci	r31, 0xFE	; 254
 670:	80 81       	ld	r24, Z
 672:	84 32       	cpi	r24, 0x24	; 36
 674:	19 f4       	brne	.+6      	; 0x67c <__vector_20+0x3e>
	HEADER = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <HEADER>
	
	if (HEADER)
 67c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <HEADER>
 680:	88 23       	and	r24, r24
 682:	11 f1       	breq	.+68     	; 0x6c8 <__vector_20+0x8a>
	{
		if (rcv_string[k_RX] == ',')
 684:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	e2 5e       	subi	r30, 0xE2	; 226
 68c:	fe 4f       	sbci	r31, 0xFE	; 254
 68e:	80 81       	ld	r24, Z
 690:	8c 32       	cpi	r24, 0x2C	; 44
 692:	a9 f4       	brne	.+42     	; 0x6be <__vector_20+0x80>
		{
			if ( (rcv_string[3] == 'R') && (rcv_string[4] == 'M') && (rcv_string[5] == 'C'))
 694:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rcv_string+0x3>
 698:	82 35       	cpi	r24, 0x52	; 82
 69a:	61 f4       	brne	.+24     	; 0x6b4 <__vector_20+0x76>
 69c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rcv_string+0x4>
 6a0:	8d 34       	cpi	r24, 0x4D	; 77
 6a2:	41 f4       	brne	.+16     	; 0x6b4 <__vector_20+0x76>
 6a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rcv_string+0x5>
 6a8:	83 34       	cpi	r24, 0x43	; 67
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <__vector_20+0x76>
			{
				GPRMC_SENTENCE = 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <GPRMC_SENTENCE>
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_20+0x7a>
			}
			else
			k_RX = 0;
 6b4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <k_RX>
			HEADER = 0;
 6b8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <HEADER>
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__vector_20+0x8a>
		}
		else
		k_RX++;
 6be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <k_RX>
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <k_RX>
	}
	
	if (GPRMC_SENTENCE)
 6c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <GPRMC_SENTENCE>
 6cc:	88 23       	and	r24, r24
 6ce:	a9 f1       	breq	.+106    	; 0x73a <__vector_20+0xfc>
	{
		if (rcv_string[k_RX] == '*')
 6d0:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	e2 5e       	subi	r30, 0xE2	; 226
 6d8:	fe 4f       	sbci	r31, 0xFE	; 254
 6da:	80 81       	ld	r24, Z
 6dc:	8a 32       	cpi	r24, 0x2A	; 42
 6de:	41 f5       	brne	.+80     	; 0x730 <__vector_20+0xf2>
 6e0:	e1 e3       	ldi	r30, 0x31	; 49
 6e2:	f1 e0       	ldi	r31, 0x01	; 1
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	90 e0       	ldi	r25, 0x00	; 0
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
			{
				lat_buf[j] = rcv_string[i];
 6e8:	21 91       	ld	r18, Z+
 6ea:	dc 01       	movw	r26, r24
 6ec:	a2 5a       	subi	r26, 0xA2	; 162
 6ee:	be 4f       	sbci	r27, 0xFE	; 254
 6f0:	2c 93       	st	X, r18
				j++;
 6f2:	01 96       	adiw	r24, 0x01	; 1
	if (GPRMC_SENTENCE)
	{
		if (rcv_string[k_RX] == '*')
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
 6f4:	87 30       	cpi	r24, 0x07	; 7
 6f6:	91 05       	cpc	r25, r1
 6f8:	b9 f7       	brne	.-18     	; 0x6e8 <__vector_20+0xaa>
			{
				lat_buf[j] = rcv_string[i];
				j++;
			}
			lat_buf[j] = NL;
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lat_buf+0x7>
 700:	ef e3       	ldi	r30, 0x3F	; 63
 702:	f1 e0       	ldi	r31, 0x01	; 1
			
			
			j = 0;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
			for (int i = 33; i <40; i++)
			{
				lon_buf[j] = rcv_string[i];
 708:	21 91       	ld	r18, Z+
 70a:	dc 01       	movw	r26, r24
 70c:	a9 59       	subi	r26, 0x99	; 153
 70e:	be 4f       	sbci	r27, 0xFE	; 254
 710:	2c 93       	st	X, r18
				j++;
 712:	01 96       	adiw	r24, 0x01	; 1
			}
			lat_buf[j] = NL;
			
			
			j = 0;
			for (int i = 33; i <40; i++)
 714:	87 30       	cpi	r24, 0x07	; 7
 716:	91 05       	cpc	r25, r1
 718:	b9 f7       	brne	.-18     	; 0x708 <__vector_20+0xca>
			{
				lon_buf[j] = rcv_string[i];
				j++;
			}
			lon_buf[j] = NL;
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <lon_buf+0x7>
			
			GPRMC_SENTENCE = 0;
 720:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <GPRMC_SENTENCE>
			k_RX = 0;
 724:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <k_RX>
			gps_string_ready = 1;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <gps_string_ready>
 72e:	05 c0       	rjmp	.+10     	; 0x73a <__vector_20+0xfc>
		}
		else
		k_RX++;
 730:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <k_RX>
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <k_RX>
	}
	
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 752:	3f 9a       	sbi	0x07, 7	; 7
 754:	56 9a       	sbi	0x0a, 6	; 10
 756:	47 98       	cbi	0x08, 7	; 8
 758:	5e 9a       	sbi	0x0b, 6	; 11
 75a:	0e 94 92 04 	call	0x924	; 0x924 <spi1_master_initialize>
 75e:	08 95       	ret

00000760 <mirf_data_ready>:
 760:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <PTX>
 764:	81 11       	cpse	r24, r1
 766:	07 c0       	rjmp	.+14     	; 0x776 <mirf_data_ready+0x16>
 768:	5e 98       	cbi	0x0b, 6	; 11
 76a:	8f ef       	ldi	r24, 0xFF	; 255
 76c:	0e 94 a1 04 	call	0x942	; 0x942 <spi1_exchange_char>
 770:	5e 9a       	sbi	0x0b, 6	; 11
 772:	80 74       	andi	r24, 0x40	; 64
 774:	08 95       	ret
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret

0000077a <mirf_data_sent>:
 77a:	5e 98       	cbi	0x0b, 6	; 11
 77c:	8f ef       	ldi	r24, 0xFF	; 255
 77e:	0e 94 a1 04 	call	0x942	; 0x942 <spi1_exchange_char>
 782:	5e 9a       	sbi	0x0b, 6	; 11
 784:	80 72       	andi	r24, 0x20	; 32
 786:	08 95       	ret

00000788 <mirf_config_register>:
 788:	cf 93       	push	r28
 78a:	c6 2f       	mov	r28, r22
 78c:	5e 98       	cbi	0x0b, 6	; 11
 78e:	8f 71       	andi	r24, 0x1F	; 31
 790:	80 62       	ori	r24, 0x20	; 32
 792:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
 796:	82 e4       	ldi	r24, 0x42	; 66
 798:	8a 95       	dec	r24
 79a:	f1 f7       	brne	.-4      	; 0x798 <mirf_config_register+0x10>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <mirf_config_register+0x16>
 79e:	8c 2f       	mov	r24, r28
 7a0:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
 7a4:	5e 9a       	sbi	0x0b, 6	; 11
 7a6:	82 e4       	ldi	r24, 0x42	; 66
 7a8:	8a 95       	dec	r24
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <mirf_config_register+0x20>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <mirf_config_register+0x26>
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <set_RX_MODE>:
 7b2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <PTX>
 7b6:	60 e7       	ldi	r22, 0x70	; 112
 7b8:	87 e0       	ldi	r24, 0x07	; 7
 7ba:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7be:	5e 98       	cbi	0x0b, 6	; 11
 7c0:	81 ee       	ldi	r24, 0xE1	; 225
 7c2:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
 7c6:	5e 9a       	sbi	0x0b, 6	; 11
 7c8:	6b e5       	ldi	r22, 0x5B	; 91
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7d0:	47 9a       	sbi	0x08, 7	; 8
 7d2:	08 95       	ret

000007d4 <mirf_config>:
 7d4:	6c e6       	ldi	r22, 0x6C	; 108
 7d6:	85 e0       	ldi	r24, 0x05	; 5
 7d8:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	81 e1       	ldi	r24, 0x11	; 17
 7e0:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7e4:	63 e0       	ldi	r22, 0x03	; 3
 7e6:	82 e1       	ldi	r24, 0x12	; 18
 7e8:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	83 e1       	ldi	r24, 0x13	; 19
 7f0:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	84 e1       	ldi	r24, 0x14	; 20
 7f8:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	85 e1       	ldi	r24, 0x15	; 21
 800:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	86 e1       	ldi	r24, 0x16	; 22
 808:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 80c:	66 e2       	ldi	r22, 0x26	; 38
 80e:	86 e0       	ldi	r24, 0x06	; 6
 810:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 814:	63 e0       	ldi	r22, 0x03	; 3
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 81c:	63 e0       	ldi	r22, 0x03	; 3
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 824:	6f e4       	ldi	r22, 0x4F	; 79
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 82c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <PTX>
 830:	60 e7       	ldi	r22, 0x70	; 112
 832:	87 e0       	ldi	r24, 0x07	; 7
 834:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 838:	5e 98       	cbi	0x0b, 6	; 11
 83a:	81 ee       	ldi	r24, 0xE1	; 225
 83c:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
 840:	5e 9a       	sbi	0x0b, 6	; 11
 842:	6b e5       	ldi	r22, 0x5B	; 91
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 84a:	47 9a       	sbi	0x08, 7	; 8
 84c:	08 95       	ret

0000084e <mirf_get_data>:
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	ec 01       	movw	r28, r24
 854:	5e 98       	cbi	0x0b, 6	; 11
 856:	81 e6       	ldi	r24, 0x61	; 97
 858:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
 85c:	43 e0       	ldi	r20, 0x03	; 3
 85e:	be 01       	movw	r22, r28
 860:	ce 01       	movw	r24, r28
 862:	0e 94 c2 04 	call	0x984	; 0x984 <spi1_exchange_bytes>
 866:	5e 9a       	sbi	0x0b, 6	; 11
 868:	60 e4       	ldi	r22, 0x40	; 64
 86a:	87 e0       	ldi	r24, 0x07	; 7
 86c:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	08 95       	ret

00000876 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 876:	1f 93       	push	r17
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	eb 01       	movw	r28, r22
 87e:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 880:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 882:	8f 71       	andi	r24, 0x1F	; 31
 884:	80 62       	ori	r24, 0x20	; 32
 886:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
	spi1_send_bytes(value, len);
 88a:	61 2f       	mov	r22, r17
 88c:	ce 01       	movw	r24, r28
 88e:	0e 94 ab 04 	call	0x956	; 0x956 <spi1_send_bytes>
	mirf_CSN_hi;
 892:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 894:	82 e4       	ldi	r24, 0x42	; 66
 896:	8a 95       	dec	r24
 898:	f1 f7       	brne	.-4      	; 0x896 <mirf_write_register+0x20>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <mirf_write_register+0x26>
	_delay_us(25);
	
}
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	08 95       	ret

000008a4 <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 8a4:	47 98       	cbi	0x08, 7	; 8
	mirf_write_register(RX_ADDR_P1, adr, 5);
 8a6:	45 e0       	ldi	r20, 0x05	; 5
 8a8:	bc 01       	movw	r22, r24
 8aa:	8b e0       	ldi	r24, 0x0B	; 11
 8ac:	0e 94 3b 04 	call	0x876	; 0x876 <mirf_write_register>
	mirf_CE_hi;
 8b0:	47 9a       	sbi	0x08, 7	; 8
 8b2:	08 95       	ret

000008b4 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 8ba:	45 e0       	ldi	r20, 0x05	; 5
 8bc:	bc 01       	movw	r22, r24
 8be:	8a e0       	ldi	r24, 0x0A	; 10
 8c0:	0e 94 3b 04 	call	0x876	; 0x876 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 8c4:	45 e0       	ldi	r20, 0x05	; 5
 8c6:	be 01       	movw	r22, r28
 8c8:	80 e1       	ldi	r24, 0x10	; 16
 8ca:	0e 94 3b 04 	call	0x876	; 0x876 <mirf_write_register>
}
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	08 95       	ret

000008d4 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	ec 01       	movw	r28, r24
 8dc:	16 2f       	mov	r17, r22
// 	while (PTX)
// 	{
// 		println_0("while(PTX)")	;
// 	} // Wait until last packet is send

	mirf_CE_lo;
 8de:	47 98       	cbi	0x08, 7	; 8

	PTX = 1;    // Set to transmitter mode
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 8e6:	6a e5       	ldi	r22, 0x5A	; 90
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 8ee:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 8f0:	81 ee       	ldi	r24, 0xE1	; 225
 8f2:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 8f6:	5e 9a       	sbi	0x0b, 6	; 11
 8f8:	82 e4       	ldi	r24, 0x42	; 66
 8fa:	8a 95       	dec	r24
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <mirf_send+0x26>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 900:	60 e7       	ldi	r22, 0x70	; 112
 902:	87 e0       	ldi	r24, 0x07	; 7
 904:	0e 94 c4 03 	call	0x788	; 0x788 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 908:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 90a:	80 ea       	ldi	r24, 0xA0	; 160
 90c:	0e 94 99 04 	call	0x932	; 0x932 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 910:	61 2f       	mov	r22, r17
 912:	ce 01       	movw	r24, r28
 914:	0e 94 ab 04 	call	0x956	; 0x956 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 918:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 91a:	47 9a       	sbi	0x08, 7	; 8
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	08 95       	ret

00000924 <spi1_master_initialize>:
 924:	6b 9a       	sbi	0x0d, 3	; 13
 926:	57 9a       	sbi	0x0a, 7	; 10
 928:	56 9a       	sbi	0x0a, 6	; 10
 92a:	82 e5       	ldi	r24, 0x52	; 82
 92c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 930:	08 95       	ret

00000932 <spi1_send_char>:
 932:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 936:	ed ea       	ldi	r30, 0xAD	; 173
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	88 23       	and	r24, r24
 93e:	ec f7       	brge	.-6      	; 0x93a <spi1_send_char+0x8>
 940:	08 95       	ret

00000942 <spi1_exchange_char>:
 942:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 946:	ed ea       	ldi	r30, 0xAD	; 173
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	88 23       	and	r24, r24
 94e:	ec f7       	brge	.-6      	; 0x94a <spi1_exchange_char+0x8>
 950:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 954:	08 95       	ret

00000956 <spi1_send_bytes>:
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	66 23       	and	r22, r22
 95c:	81 f0       	breq	.+32     	; 0x97e <spi1_send_bytes+0x28>
 95e:	dc 01       	movw	r26, r24
 960:	9c 01       	movw	r18, r24
 962:	26 0f       	add	r18, r22
 964:	31 1d       	adc	r19, r1
 966:	ce ea       	ldi	r28, 0xAE	; 174
 968:	d0 e0       	ldi	r29, 0x00	; 0
 96a:	ed ea       	ldi	r30, 0xAD	; 173
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	9d 91       	ld	r25, X+
 970:	98 83       	st	Y, r25
 972:	90 81       	ld	r25, Z
 974:	99 23       	and	r25, r25
 976:	ec f7       	brge	.-6      	; 0x972 <spi1_send_bytes+0x1c>
 978:	a2 17       	cp	r26, r18
 97a:	b3 07       	cpc	r27, r19
 97c:	c1 f7       	brne	.-16     	; 0x96e <spi1_send_bytes+0x18>
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	08 95       	ret

00000984 <spi1_exchange_bytes>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	44 23       	and	r20, r20
 98e:	c9 f0       	breq	.+50     	; 0x9c2 <spi1_exchange_bytes+0x3e>
 990:	dc 01       	movw	r26, r24
 992:	06 2f       	mov	r16, r22
 994:	17 2f       	mov	r17, r23
 996:	9c 01       	movw	r18, r24
 998:	24 0f       	add	r18, r20
 99a:	31 1d       	adc	r19, r1
 99c:	a9 01       	movw	r20, r18
 99e:	2e ea       	ldi	r18, 0xAE	; 174
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	ed ea       	ldi	r30, 0xAD	; 173
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	9d 91       	ld	r25, X+
 9a8:	e9 01       	movw	r28, r18
 9aa:	98 83       	st	Y, r25
 9ac:	90 81       	ld	r25, Z
 9ae:	99 23       	and	r25, r25
 9b0:	ec f7       	brge	.-6      	; 0x9ac <spi1_exchange_bytes+0x28>
 9b2:	e9 01       	movw	r28, r18
 9b4:	98 81       	ld	r25, Y
 9b6:	e8 01       	movw	r28, r16
 9b8:	99 93       	st	Y+, r25
 9ba:	8e 01       	movw	r16, r28
 9bc:	a4 17       	cp	r26, r20
 9be:	b5 07       	cpc	r27, r21
 9c0:	91 f7       	brne	.-28     	; 0x9a6 <spi1_exchange_bytes+0x22>
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	08 95       	ret

000009cc <setup_usart0>:
}


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 9cc:	98 e9       	ldi	r25, 0x98	; 152
 9ce:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 9d2:	96 e0       	ldi	r25, 0x06	; 6
 9d4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 9d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 9dc:	08 95       	ret

000009de <stop_RX0_interrupt>:
}

void stop_RX0_interrupt()
{
	UCSR0B &= ~(1<<RXCIE);                                          
 9de:	e1 ec       	ldi	r30, 0xC1	; 193
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	8f 77       	andi	r24, 0x7F	; 127
 9e6:	80 83       	st	Z, r24
 9e8:	08 95       	ret

000009ea <start_RX0_interrupt>:
}
void start_RX0_interrupt()
{
	UCSR0B |= (1<<RXCIE);
 9ea:	e1 ec       	ldi	r30, 0xC1	; 193
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	80 68       	ori	r24, 0x80	; 128
 9f2:	80 83       	st	Z, r24
 9f4:	08 95       	ret

000009f6 <__subsf3>:
 9f6:	50 58       	subi	r21, 0x80	; 128

000009f8 <__addsf3>:
 9f8:	bb 27       	eor	r27, r27
 9fa:	aa 27       	eor	r26, r26
 9fc:	0e 94 13 05 	call	0xa26	; 0xa26 <__addsf3x>
 a00:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>
 a04:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 a08:	38 f0       	brcs	.+14     	; 0xa18 <__addsf3+0x20>
 a0a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__addsf3+0x20>
 a10:	39 f4       	brne	.+14     	; 0xa20 <__addsf3+0x28>
 a12:	9f 3f       	cpi	r25, 0xFF	; 255
 a14:	19 f4       	brne	.+6      	; 0xa1c <__addsf3+0x24>
 a16:	26 f4       	brtc	.+8      	; 0xa20 <__addsf3+0x28>
 a18:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_nan>
 a1c:	0e f4       	brtc	.+2      	; 0xa20 <__addsf3+0x28>
 a1e:	e0 95       	com	r30
 a20:	e7 fb       	bst	r30, 7
 a22:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_inf>

00000a26 <__addsf3x>:
 a26:	e9 2f       	mov	r30, r25
 a28:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 a2c:	58 f3       	brcs	.-42     	; 0xa04 <__addsf3+0xc>
 a2e:	ba 17       	cp	r27, r26
 a30:	62 07       	cpc	r22, r18
 a32:	73 07       	cpc	r23, r19
 a34:	84 07       	cpc	r24, r20
 a36:	95 07       	cpc	r25, r21
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__addsf3x+0x1c>
 a3a:	79 f4       	brne	.+30     	; 0xa5a <__addsf3x+0x34>
 a3c:	a6 f5       	brtc	.+104    	; 0xaa6 <__addsf3x+0x80>
 a3e:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_zero>
 a42:	0e f4       	brtc	.+2      	; 0xa46 <__addsf3x+0x20>
 a44:	e0 95       	com	r30
 a46:	0b 2e       	mov	r0, r27
 a48:	ba 2f       	mov	r27, r26
 a4a:	a0 2d       	mov	r26, r0
 a4c:	0b 01       	movw	r0, r22
 a4e:	b9 01       	movw	r22, r18
 a50:	90 01       	movw	r18, r0
 a52:	0c 01       	movw	r0, r24
 a54:	ca 01       	movw	r24, r20
 a56:	a0 01       	movw	r20, r0
 a58:	11 24       	eor	r1, r1
 a5a:	ff 27       	eor	r31, r31
 a5c:	59 1b       	sub	r21, r25
 a5e:	99 f0       	breq	.+38     	; 0xa86 <__addsf3x+0x60>
 a60:	59 3f       	cpi	r21, 0xF9	; 249
 a62:	50 f4       	brcc	.+20     	; 0xa78 <__addsf3x+0x52>
 a64:	50 3e       	cpi	r21, 0xE0	; 224
 a66:	68 f1       	brcs	.+90     	; 0xac2 <__addsf3x+0x9c>
 a68:	1a 16       	cp	r1, r26
 a6a:	f0 40       	sbci	r31, 0x00	; 0
 a6c:	a2 2f       	mov	r26, r18
 a6e:	23 2f       	mov	r18, r19
 a70:	34 2f       	mov	r19, r20
 a72:	44 27       	eor	r20, r20
 a74:	58 5f       	subi	r21, 0xF8	; 248
 a76:	f3 cf       	rjmp	.-26     	; 0xa5e <__addsf3x+0x38>
 a78:	46 95       	lsr	r20
 a7a:	37 95       	ror	r19
 a7c:	27 95       	ror	r18
 a7e:	a7 95       	ror	r26
 a80:	f0 40       	sbci	r31, 0x00	; 0
 a82:	53 95       	inc	r21
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__addsf3x+0x52>
 a86:	7e f4       	brtc	.+30     	; 0xaa6 <__addsf3x+0x80>
 a88:	1f 16       	cp	r1, r31
 a8a:	ba 0b       	sbc	r27, r26
 a8c:	62 0b       	sbc	r22, r18
 a8e:	73 0b       	sbc	r23, r19
 a90:	84 0b       	sbc	r24, r20
 a92:	ba f0       	brmi	.+46     	; 0xac2 <__addsf3x+0x9c>
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	a1 f0       	breq	.+40     	; 0xac0 <__addsf3x+0x9a>
 a98:	ff 0f       	add	r31, r31
 a9a:	bb 1f       	adc	r27, r27
 a9c:	66 1f       	adc	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	c2 f7       	brpl	.-16     	; 0xa94 <__addsf3x+0x6e>
 aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__addsf3x+0x9c>
 aa6:	ba 0f       	add	r27, r26
 aa8:	62 1f       	adc	r22, r18
 aaa:	73 1f       	adc	r23, r19
 aac:	84 1f       	adc	r24, r20
 aae:	48 f4       	brcc	.+18     	; 0xac2 <__addsf3x+0x9c>
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f7 95       	ror	r31
 aba:	9e 3f       	cpi	r25, 0xFE	; 254
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__addsf3x+0x9a>
 abe:	b0 cf       	rjmp	.-160    	; 0xa20 <__addsf3+0x28>
 ac0:	93 95       	inc	r25
 ac2:	88 0f       	add	r24, r24
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__addsf3x+0xa2>
 ac6:	99 27       	eor	r25, r25
 ac8:	ee 0f       	add	r30, r30
 aca:	97 95       	ror	r25
 acc:	87 95       	ror	r24
 ace:	08 95       	ret

00000ad0 <__fixsfsi>:
 ad0:	0e 94 6f 05 	call	0xade	; 0xade <__fixunssfsi>
 ad4:	68 94       	set
 ad6:	b1 11       	cpse	r27, r1
 ad8:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>
 adc:	08 95       	ret

00000ade <__fixunssfsi>:
 ade:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_splitA>
 ae2:	88 f0       	brcs	.+34     	; 0xb06 <__fixunssfsi+0x28>
 ae4:	9f 57       	subi	r25, 0x7F	; 127
 ae6:	98 f0       	brcs	.+38     	; 0xb0e <__fixunssfsi+0x30>
 ae8:	b9 2f       	mov	r27, r25
 aea:	99 27       	eor	r25, r25
 aec:	b7 51       	subi	r27, 0x17	; 23
 aee:	b0 f0       	brcs	.+44     	; 0xb1c <__fixunssfsi+0x3e>
 af0:	e1 f0       	breq	.+56     	; 0xb2a <__fixunssfsi+0x4c>
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	1a f0       	brmi	.+6      	; 0xb02 <__fixunssfsi+0x24>
 afc:	ba 95       	dec	r27
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__fixunssfsi+0x14>
 b00:	14 c0       	rjmp	.+40     	; 0xb2a <__fixunssfsi+0x4c>
 b02:	b1 30       	cpi	r27, 0x01	; 1
 b04:	91 f0       	breq	.+36     	; 0xb2a <__fixunssfsi+0x4c>
 b06:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_zero>
 b0a:	b1 e0       	ldi	r27, 0x01	; 1
 b0c:	08 95       	ret
 b0e:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_zero>
 b12:	67 2f       	mov	r22, r23
 b14:	78 2f       	mov	r23, r24
 b16:	88 27       	eor	r24, r24
 b18:	b8 5f       	subi	r27, 0xF8	; 248
 b1a:	39 f0       	breq	.+14     	; 0xb2a <__fixunssfsi+0x4c>
 b1c:	b9 3f       	cpi	r27, 0xF9	; 249
 b1e:	cc f3       	brlt	.-14     	; 0xb12 <__fixunssfsi+0x34>
 b20:	86 95       	lsr	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b3 95       	inc	r27
 b28:	d9 f7       	brne	.-10     	; 0xb20 <__fixunssfsi+0x42>
 b2a:	3e f4       	brtc	.+14     	; 0xb3a <__fixunssfsi+0x5c>
 b2c:	90 95       	com	r25
 b2e:	80 95       	com	r24
 b30:	70 95       	com	r23
 b32:	61 95       	neg	r22
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	8f 4f       	sbci	r24, 0xFF	; 255
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__floatunsisf>:
 b3c:	e8 94       	clt
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__floatsisf+0x12>

00000b40 <__floatsisf>:
 b40:	97 fb       	bst	r25, 7
 b42:	3e f4       	brtc	.+14     	; 0xb52 <__floatsisf+0x12>
 b44:	90 95       	com	r25
 b46:	80 95       	com	r24
 b48:	70 95       	com	r23
 b4a:	61 95       	neg	r22
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
 b4e:	8f 4f       	sbci	r24, 0xFF	; 255
 b50:	9f 4f       	sbci	r25, 0xFF	; 255
 b52:	99 23       	and	r25, r25
 b54:	a9 f0       	breq	.+42     	; 0xb80 <__floatsisf+0x40>
 b56:	f9 2f       	mov	r31, r25
 b58:	96 e9       	ldi	r25, 0x96	; 150
 b5a:	bb 27       	eor	r27, r27
 b5c:	93 95       	inc	r25
 b5e:	f6 95       	lsr	r31
 b60:	87 95       	ror	r24
 b62:	77 95       	ror	r23
 b64:	67 95       	ror	r22
 b66:	b7 95       	ror	r27
 b68:	f1 11       	cpse	r31, r1
 b6a:	f8 cf       	rjmp	.-16     	; 0xb5c <__floatsisf+0x1c>
 b6c:	fa f4       	brpl	.+62     	; 0xbac <__floatsisf+0x6c>
 b6e:	bb 0f       	add	r27, r27
 b70:	11 f4       	brne	.+4      	; 0xb76 <__floatsisf+0x36>
 b72:	60 ff       	sbrs	r22, 0
 b74:	1b c0       	rjmp	.+54     	; 0xbac <__floatsisf+0x6c>
 b76:	6f 5f       	subi	r22, 0xFF	; 255
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	16 c0       	rjmp	.+44     	; 0xbac <__floatsisf+0x6c>
 b80:	88 23       	and	r24, r24
 b82:	11 f0       	breq	.+4      	; 0xb88 <__floatsisf+0x48>
 b84:	96 e9       	ldi	r25, 0x96	; 150
 b86:	11 c0       	rjmp	.+34     	; 0xbaa <__floatsisf+0x6a>
 b88:	77 23       	and	r23, r23
 b8a:	21 f0       	breq	.+8      	; 0xb94 <__floatsisf+0x54>
 b8c:	9e e8       	ldi	r25, 0x8E	; 142
 b8e:	87 2f       	mov	r24, r23
 b90:	76 2f       	mov	r23, r22
 b92:	05 c0       	rjmp	.+10     	; 0xb9e <__floatsisf+0x5e>
 b94:	66 23       	and	r22, r22
 b96:	71 f0       	breq	.+28     	; 0xbb4 <__floatsisf+0x74>
 b98:	96 e8       	ldi	r25, 0x86	; 134
 b9a:	86 2f       	mov	r24, r22
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	2a f0       	brmi	.+10     	; 0xbac <__floatsisf+0x6c>
 ba2:	9a 95       	dec	r25
 ba4:	66 0f       	add	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	da f7       	brpl	.-10     	; 0xba2 <__floatsisf+0x62>
 bac:	88 0f       	add	r24, r24
 bae:	96 95       	lsr	r25
 bb0:	87 95       	ror	r24
 bb2:	97 f9       	bld	r25, 7
 bb4:	08 95       	ret

00000bb6 <__fp_inf>:
 bb6:	97 f9       	bld	r25, 7
 bb8:	9f 67       	ori	r25, 0x7F	; 127
 bba:	80 e8       	ldi	r24, 0x80	; 128
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	08 95       	ret

00000bc2 <__fp_nan>:
 bc2:	9f ef       	ldi	r25, 0xFF	; 255
 bc4:	80 ec       	ldi	r24, 0xC0	; 192
 bc6:	08 95       	ret

00000bc8 <__fp_pscA>:
 bc8:	00 24       	eor	r0, r0
 bca:	0a 94       	dec	r0
 bcc:	16 16       	cp	r1, r22
 bce:	17 06       	cpc	r1, r23
 bd0:	18 06       	cpc	r1, r24
 bd2:	09 06       	cpc	r0, r25
 bd4:	08 95       	ret

00000bd6 <__fp_pscB>:
 bd6:	00 24       	eor	r0, r0
 bd8:	0a 94       	dec	r0
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	14 06       	cpc	r1, r20
 be0:	05 06       	cpc	r0, r21
 be2:	08 95       	ret

00000be4 <__fp_round>:
 be4:	09 2e       	mov	r0, r25
 be6:	03 94       	inc	r0
 be8:	00 0c       	add	r0, r0
 bea:	11 f4       	brne	.+4      	; 0xbf0 <__fp_round+0xc>
 bec:	88 23       	and	r24, r24
 bee:	52 f0       	brmi	.+20     	; 0xc04 <__fp_round+0x20>
 bf0:	bb 0f       	add	r27, r27
 bf2:	40 f4       	brcc	.+16     	; 0xc04 <__fp_round+0x20>
 bf4:	bf 2b       	or	r27, r31
 bf6:	11 f4       	brne	.+4      	; 0xbfc <__fp_round+0x18>
 bf8:	60 ff       	sbrs	r22, 0
 bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__fp_round+0x20>
 bfc:	6f 5f       	subi	r22, 0xFF	; 255
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	08 95       	ret

00000c06 <__fp_split3>:
 c06:	57 fd       	sbrc	r21, 7
 c08:	90 58       	subi	r25, 0x80	; 128
 c0a:	44 0f       	add	r20, r20
 c0c:	55 1f       	adc	r21, r21
 c0e:	59 f0       	breq	.+22     	; 0xc26 <__fp_splitA+0x10>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	71 f0       	breq	.+28     	; 0xc30 <__fp_splitA+0x1a>
 c14:	47 95       	ror	r20

00000c16 <__fp_splitA>:
 c16:	88 0f       	add	r24, r24
 c18:	97 fb       	bst	r25, 7
 c1a:	99 1f       	adc	r25, r25
 c1c:	61 f0       	breq	.+24     	; 0xc36 <__fp_splitA+0x20>
 c1e:	9f 3f       	cpi	r25, 0xFF	; 255
 c20:	79 f0       	breq	.+30     	; 0xc40 <__fp_splitA+0x2a>
 c22:	87 95       	ror	r24
 c24:	08 95       	ret
 c26:	12 16       	cp	r1, r18
 c28:	13 06       	cpc	r1, r19
 c2a:	14 06       	cpc	r1, r20
 c2c:	55 1f       	adc	r21, r21
 c2e:	f2 cf       	rjmp	.-28     	; 0xc14 <__fp_split3+0xe>
 c30:	46 95       	lsr	r20
 c32:	f1 df       	rcall	.-30     	; 0xc16 <__fp_splitA>
 c34:	08 c0       	rjmp	.+16     	; 0xc46 <__fp_splitA+0x30>
 c36:	16 16       	cp	r1, r22
 c38:	17 06       	cpc	r1, r23
 c3a:	18 06       	cpc	r1, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	f1 cf       	rjmp	.-30     	; 0xc22 <__fp_splitA+0xc>
 c40:	86 95       	lsr	r24
 c42:	71 05       	cpc	r23, r1
 c44:	61 05       	cpc	r22, r1
 c46:	08 94       	sec
 c48:	08 95       	ret

00000c4a <__fp_zero>:
 c4a:	e8 94       	clt

00000c4c <__fp_szero>:
 c4c:	bb 27       	eor	r27, r27
 c4e:	66 27       	eor	r22, r22
 c50:	77 27       	eor	r23, r23
 c52:	cb 01       	movw	r24, r22
 c54:	97 f9       	bld	r25, 7
 c56:	08 95       	ret

00000c58 <__mulsf3>:
 c58:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__mulsf3x>
 c5c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>
 c60:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 c64:	38 f0       	brcs	.+14     	; 0xc74 <__mulsf3+0x1c>
 c66:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 c6a:	20 f0       	brcs	.+8      	; 0xc74 <__mulsf3+0x1c>
 c6c:	95 23       	and	r25, r21
 c6e:	11 f0       	breq	.+4      	; 0xc74 <__mulsf3+0x1c>
 c70:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_inf>
 c74:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_nan>
 c78:	11 24       	eor	r1, r1
 c7a:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>

00000c7e <__mulsf3x>:
 c7e:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 c82:	70 f3       	brcs	.-36     	; 0xc60 <__mulsf3+0x8>

00000c84 <__mulsf3_pse>:
 c84:	95 9f       	mul	r25, r21
 c86:	c1 f3       	breq	.-16     	; 0xc78 <__mulsf3+0x20>
 c88:	95 0f       	add	r25, r21
 c8a:	50 e0       	ldi	r21, 0x00	; 0
 c8c:	55 1f       	adc	r21, r21
 c8e:	62 9f       	mul	r22, r18
 c90:	f0 01       	movw	r30, r0
 c92:	72 9f       	mul	r23, r18
 c94:	bb 27       	eor	r27, r27
 c96:	f0 0d       	add	r31, r0
 c98:	b1 1d       	adc	r27, r1
 c9a:	63 9f       	mul	r22, r19
 c9c:	aa 27       	eor	r26, r26
 c9e:	f0 0d       	add	r31, r0
 ca0:	b1 1d       	adc	r27, r1
 ca2:	aa 1f       	adc	r26, r26
 ca4:	64 9f       	mul	r22, r20
 ca6:	66 27       	eor	r22, r22
 ca8:	b0 0d       	add	r27, r0
 caa:	a1 1d       	adc	r26, r1
 cac:	66 1f       	adc	r22, r22
 cae:	82 9f       	mul	r24, r18
 cb0:	22 27       	eor	r18, r18
 cb2:	b0 0d       	add	r27, r0
 cb4:	a1 1d       	adc	r26, r1
 cb6:	62 1f       	adc	r22, r18
 cb8:	73 9f       	mul	r23, r19
 cba:	b0 0d       	add	r27, r0
 cbc:	a1 1d       	adc	r26, r1
 cbe:	62 1f       	adc	r22, r18
 cc0:	83 9f       	mul	r24, r19
 cc2:	a0 0d       	add	r26, r0
 cc4:	61 1d       	adc	r22, r1
 cc6:	22 1f       	adc	r18, r18
 cc8:	74 9f       	mul	r23, r20
 cca:	33 27       	eor	r19, r19
 ccc:	a0 0d       	add	r26, r0
 cce:	61 1d       	adc	r22, r1
 cd0:	23 1f       	adc	r18, r19
 cd2:	84 9f       	mul	r24, r20
 cd4:	60 0d       	add	r22, r0
 cd6:	21 1d       	adc	r18, r1
 cd8:	82 2f       	mov	r24, r18
 cda:	76 2f       	mov	r23, r22
 cdc:	6a 2f       	mov	r22, r26
 cde:	11 24       	eor	r1, r1
 ce0:	9f 57       	subi	r25, 0x7F	; 127
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	9a f0       	brmi	.+38     	; 0xd0c <__mulsf3_pse+0x88>
 ce6:	f1 f0       	breq	.+60     	; 0xd24 <__mulsf3_pse+0xa0>
 ce8:	88 23       	and	r24, r24
 cea:	4a f0       	brmi	.+18     	; 0xcfe <__mulsf3_pse+0x7a>
 cec:	ee 0f       	add	r30, r30
 cee:	ff 1f       	adc	r31, r31
 cf0:	bb 1f       	adc	r27, r27
 cf2:	66 1f       	adc	r22, r22
 cf4:	77 1f       	adc	r23, r23
 cf6:	88 1f       	adc	r24, r24
 cf8:	91 50       	subi	r25, 0x01	; 1
 cfa:	50 40       	sbci	r21, 0x00	; 0
 cfc:	a9 f7       	brne	.-22     	; 0xce8 <__mulsf3_pse+0x64>
 cfe:	9e 3f       	cpi	r25, 0xFE	; 254
 d00:	51 05       	cpc	r21, r1
 d02:	80 f0       	brcs	.+32     	; 0xd24 <__mulsf3_pse+0xa0>
 d04:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_inf>
 d08:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>
 d0c:	5f 3f       	cpi	r21, 0xFF	; 255
 d0e:	e4 f3       	brlt	.-8      	; 0xd08 <__mulsf3_pse+0x84>
 d10:	98 3e       	cpi	r25, 0xE8	; 232
 d12:	d4 f3       	brlt	.-12     	; 0xd08 <__mulsf3_pse+0x84>
 d14:	86 95       	lsr	r24
 d16:	77 95       	ror	r23
 d18:	67 95       	ror	r22
 d1a:	b7 95       	ror	r27
 d1c:	f7 95       	ror	r31
 d1e:	e7 95       	ror	r30
 d20:	9f 5f       	subi	r25, 0xFF	; 255
 d22:	c1 f7       	brne	.-16     	; 0xd14 <__mulsf3_pse+0x90>
 d24:	fe 2b       	or	r31, r30
 d26:	88 0f       	add	r24, r24
 d28:	91 1d       	adc	r25, r1
 d2a:	96 95       	lsr	r25
 d2c:	87 95       	ror	r24
 d2e:	97 f9       	bld	r25, 7
 d30:	08 95       	ret

00000d32 <atoi>:
 d32:	fc 01       	movw	r30, r24
 d34:	88 27       	eor	r24, r24
 d36:	99 27       	eor	r25, r25
 d38:	e8 94       	clt
 d3a:	21 91       	ld	r18, Z+
 d3c:	20 32       	cpi	r18, 0x20	; 32
 d3e:	e9 f3       	breq	.-6      	; 0xd3a <atoi+0x8>
 d40:	29 30       	cpi	r18, 0x09	; 9
 d42:	10 f0       	brcs	.+4      	; 0xd48 <atoi+0x16>
 d44:	2e 30       	cpi	r18, 0x0E	; 14
 d46:	c8 f3       	brcs	.-14     	; 0xd3a <atoi+0x8>
 d48:	2b 32       	cpi	r18, 0x2B	; 43
 d4a:	41 f0       	breq	.+16     	; 0xd5c <atoi+0x2a>
 d4c:	2d 32       	cpi	r18, 0x2D	; 45
 d4e:	39 f4       	brne	.+14     	; 0xd5e <atoi+0x2c>
 d50:	68 94       	set
 d52:	04 c0       	rjmp	.+8      	; 0xd5c <atoi+0x2a>
 d54:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulhi_const_10>
 d58:	82 0f       	add	r24, r18
 d5a:	91 1d       	adc	r25, r1
 d5c:	21 91       	ld	r18, Z+
 d5e:	20 53       	subi	r18, 0x30	; 48
 d60:	2a 30       	cpi	r18, 0x0A	; 10
 d62:	c0 f3       	brcs	.-16     	; 0xd54 <atoi+0x22>
 d64:	1e f4       	brtc	.+6      	; 0xd6c <atoi+0x3a>
 d66:	90 95       	com	r25
 d68:	81 95       	neg	r24
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	08 95       	ret

00000d6e <__mulhi_const_10>:
 d6e:	7a e0       	ldi	r23, 0x0A	; 10
 d70:	97 9f       	mul	r25, r23
 d72:	90 2d       	mov	r25, r0
 d74:	87 9f       	mul	r24, r23
 d76:	80 2d       	mov	r24, r0
 d78:	91 0d       	add	r25, r1
 d7a:	11 24       	eor	r1, r1
 d7c:	08 95       	ret

00000d7e <_exit>:
 d7e:	f8 94       	cli

00000d80 <__stop_program>:
 d80:	ff cf       	rjmp	.-2      	; 0xd80 <__stop_program>
