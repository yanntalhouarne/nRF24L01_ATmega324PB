
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2c  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbb  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109b  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a8  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b7  00000000  00000000  000052fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00006ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea e6       	ldi	r30, 0x6A	; 106
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 31       	cpi	r26, 0x14	; 20
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e1       	ldi	r26, 0x14	; 20
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a5 31       	cpi	r26, 0x15	; 21
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 85 00 	call	0x10a	; 0x10a <main>
 102:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <main>:
#include "mirf.h"


int main(void)
{
	setup_usart0(BR_9600); // for FTDI debugging (terminal)
 10a:	83 e3       	ldi	r24, 0x33	; 51
 10c:	0e 94 2a 01 	call	0x254	; 0x254 <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 110:	0e 94 09 01 	call	0x212	; 0x212 <spi1_master_initialize>
	
	println_0("System initialized;");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <println_0>
	
	sei(); // enable global interrupts
 11c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	9c e0       	ldi	r25, 0x0C	; 12
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x1a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x24>
 12e:	00 00       	nop
 130:	f6 cf       	rjmp	.-20     	; 0x11e <main+0x14>

00000132 <mirf_config_register>:
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
	spi1_send_bytes(value, len);      // Write payload
	mirf_CSN_hi;                     // Pull up chip select

	mirf_CE_hi; // Start transmission
}
 132:	cf 93       	push	r28
 134:	c6 2f       	mov	r28, r22
 136:	5e 98       	cbi	0x0b, 6	; 11
 138:	8f 71       	andi	r24, 0x1F	; 31
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	0e 94 10 01 	call	0x220	; 0x220 <spi1_send_char>
 140:	5e 9a       	sbi	0x0b, 6	; 11
 142:	85 e8       	ldi	r24, 0x85	; 133
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <mirf_config_register+0x12>
 148:	00 00       	nop
 14a:	5e 98       	cbi	0x0b, 6	; 11
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 10 01 	call	0x220	; 0x220 <spi1_send_char>
 152:	5e 9a       	sbi	0x0b, 6	; 11
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 17a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 17e:	88 23       	and	r24, r24
 180:	89 f0       	breq	.+34     	; 0x1a4 <__vector_1+0x4c>
	{

		// Read MiRF status
		mirf_CSN_lo;                     // Pull down chip select
 182:	5e 98       	cbi	0x0b, 6	; 11
		status = spi1_exchange_char(NOP); // Read status register
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	0e 94 18 01 	call	0x230	; 0x230 <spi1_exchange_char>
		mirf_CSN_hi;                     // Pull up chip select
 18a:	5e 9a       	sbi	0x0b, 6	; 11

		mirf_CE_lo; // Deactivate transreceiver
 18c:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP; // Power up in receiving mode
 18e:	6b e4       	ldi	r22, 0x4B	; 75
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 99 00 	call	0x132	; 0x132 <mirf_config_register>
		mirf_CE_hi; // Listening for pakets
 196:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;    // Set to receiving mode
 198:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>

		// Reset status register for further interaction
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 19c:	60 e3       	ldi	r22, 0x30	; 48
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 99 00 	call	0x132	; 0x132 <mirf_config_register>
	}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <println_0+0x2c>
 1d8:	8b 33       	cpi	r24, 0x3B	; 59
 1da:	79 f4       	brne	.+30     	; 0x1fa <println_0+0x34>
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <println_0+0x2c>
 1de:	89 91       	ld	r24, Y+
 1e0:	8a 30       	cpi	r24, 0x0A	; 10
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <println_0+0x2c>
 1e4:	8b 33       	cpi	r24, 0x3B	; 59
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 1e8:	0e 94 22 01 	call	0x244	; 0x244 <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 1ec:	0c 17       	cp	r16, r28
 1ee:	1d 07       	cpc	r17, r29
 1f0:	b1 f7       	brne	.-20     	; 0x1de <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	0e 94 22 01 	call	0x244	; 0x244 <usart0_send_char>
}
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 1fa:	0e 94 22 01 	call	0x244	; 0x244 <usart0_send_char>
 1fe:	e8 01       	movw	r28, r16
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	08 53       	subi	r16, 0x38	; 56
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	eb cf       	rjmp	.-42     	; 0x1de <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <spi1_master_initialize>:
	
	while (!(SPSR0 & (1 << SPIF)))
	; // wait for transmission complete
	
	return SPDR0;
}
 212:	6b 9a       	sbi	0x0d, 3	; 13
 214:	57 9a       	sbi	0x0a, 7	; 10
 216:	56 9a       	sbi	0x0a, 6	; 10
 218:	86 e5       	ldi	r24, 0x56	; 86
 21a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 21e:	08 95       	ret

00000220 <spi1_send_char>:
 220:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 224:	ed ea       	ldi	r30, 0xAD	; 173
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	ec f7       	brge	.-6      	; 0x228 <spi1_send_char+0x8>
 22e:	08 95       	ret

00000230 <spi1_exchange_char>:
char spi1_exchange_char(char data)
{
	SPDR1 = data; // start transmission
 230:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
	
	while (!(SPSR1 & (1 << SPIF)))
 234:	ed ea       	ldi	r30, 0xAD	; 173
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	88 23       	and	r24, r24
 23c:	ec f7       	brge	.-6      	; 0x238 <spi1_exchange_char+0x8>
	; // wait for transmission complete
	
	return SPDR1;
 23e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
}
 242:	08 95       	ret

00000244 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 244:	e0 ec       	ldi	r30, 0xC0	; 192
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	90 81       	ld	r25, Z
 24a:	95 ff       	sbrs	r25, 5
 24c:	fd cf       	rjmp	.-6      	; 0x248 <usart0_send_char+0x4>
 24e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 252:	08 95       	ret

00000254 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 254:	98 e9       	ldi	r25, 0x98	; 152
 256:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 260:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
