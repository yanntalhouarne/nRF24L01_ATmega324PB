
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000fe6  0000107a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080011c  0080011c  00001096  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b77  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001272  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001752  00000000  00000000  00005211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b59  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fee  00000000  00000000  00007c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  00009c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  80:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_32>
  84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  90:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  94:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  ac:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  bc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  c8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  cc:	08 00       	.word	0x0008	; ????
  ce:	00 00       	nop
  d0:	be 92       	st	-X, r11
  d2:	24 49       	sbci	r18, 0x94	; 148
  d4:	12 3e       	cpi	r17, 0xE2	; 226
  d6:	ab aa       	std	Y+51, r10	; 0x33
  d8:	aa 2a       	or	r10, r26
  da:	be cd       	rjmp	.-1156   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
  dc:	cc cc       	rjmp	.-1640   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
  de:	4c 3e       	cpi	r20, 0xEC	; 236
  e0:	00 00       	nop
  e2:	00 80       	ld	r0, Z
  e4:	be ab       	std	Y+54, r27	; 0x36
  e6:	aa aa       	std	Y+50, r10	; 0x32
  e8:	aa 3e       	cpi	r26, 0xEA	; 234
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	bf 00       	.word	0x00bf	; ????
  f0:	00 00       	nop
  f2:	80 3f       	cpi	r24, 0xF0	; 240
  f4:	00 00       	nop
  f6:	00 00       	nop
  f8:	00 08       	sbc	r0, r0
  fa:	41 78       	andi	r20, 0x81	; 129
  fc:	d3 bb       	out	0x13, r29	; 19
  fe:	43 87       	std	Z+11, r20	; 0x0b
 100:	d1 13       	cpse	r29, r17
 102:	3d 19       	sub	r19, r13
 104:	0e 3c       	cpi	r16, 0xCE	; 206
 106:	c3 bd       	out	0x23, r28	; 35
 108:	42 82       	std	Z+2, r4	; 0x02
 10a:	ad 2b       	or	r26, r29
 10c:	3e 68       	ori	r19, 0x8E	; 142
 10e:	ec 82       	std	Y+4, r14	; 0x04
 110:	76 be       	out	0x36, r7	; 54
 112:	d9 8f       	std	Y+25, r29	; 0x19
 114:	e1 a9       	ldd	r30, Z+49	; 0x31
 116:	3e 4c       	sbci	r19, 0xCE	; 206
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	ff be       	out	0x3f, r15	; 63
 11c:	01 c4       	rjmp	.+2050   	; 0x920 <spi1_send_bytes+0xc>
 11e:	ff 7f       	andi	r31, 0xFF	; 255
 120:	3f 00       	.word	0x003f	; ????
 122:	00 00       	nop
	...

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf ef       	ldi	r28, 0xFF	; 255
 12c:	d8 e0       	ldi	r29, 0x08	; 8
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	11 e0       	ldi	r17, 0x01	; 1
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	e6 ee       	ldi	r30, 0xE6	; 230
 13a:	ff e0       	ldi	r31, 0x0F	; 15
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	ac 31       	cpi	r26, 0x1C	; 28
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	ac e1       	ldi	r26, 0x1C	; 28
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	af 32       	cpi	r26, 0x2F	; 47
 154:	b2 07       	cpc	r27, r18
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	0e 94 b4 02 	call	0x568	; 0x568 <main>
 15c:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <_exit>

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	87 68       	ori	r24, 0x87	; 135
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <analog_read>:
int analog_read(unsigned char channel)
{
    int analog_in = 0;
    
	//ADMUX = (0x07)&channel; // select channel
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	98 7f       	andi	r25, 0xF8	; 248
 182:	87 70       	andi	r24, 0x07	; 7
 184:	89 2b       	or	r24, r25
 186:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC); // start conversion
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
    while ((ADCSRA & (1 << ADIF)) == 0)
 192:	80 81       	ld	r24, Z
 194:	84 ff       	sbrs	r24, 4
 196:	fd cf       	rjmp	.-6      	; 0x192 <analog_read+0x18>
        ; // wait for flag

    analog_in = (0x00FF) & (ADCL);       // get lower byte
 198:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    analog_in |= (0x2F00) & (ADCH << 8); // get higher byte
 19c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

    return analog_in;
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	9f 72       	andi	r25, 0x2F	; 47
}
 1aa:	82 2b       	or	r24, r18
 1ac:	08 95       	ret

000001ae <analog_get_average>:

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
    int average = 0;
    for (int i = 0; i < elements; i++)
 1bc:	e6 2e       	mov	r14, r22
 1be:	f1 2c       	mov	r15, r1
 1c0:	1e 14       	cp	r1, r14
 1c2:	1f 04       	cpc	r1, r15
 1c4:	ac f4       	brge	.+42     	; 0x1f0 <analog_get_average+0x42>
 1c6:	d8 2e       	mov	r13, r24
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
    {
        average += analog_read(channel);
 1d0:	8d 2d       	mov	r24, r13
 1d2:	0e 94 bd 00 	call	0x17a	; 0x17a <analog_read>
 1d6:	08 0f       	add	r16, r24
 1d8:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e9       	ldi	r24, 0x9F	; 159
 1dc:	9f e0       	ldi	r25, 0x0F	; 15
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <analog_get_average+0x30>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <analog_get_average+0x36>
 1e4:	00 00       	nop
}

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
    int average = 0;
    for (int i = 0; i < elements; i++)
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	ce 15       	cp	r28, r14
 1ea:	df 05       	cpc	r29, r15
 1ec:	89 f7       	brne	.-30     	; 0x1d0 <analog_get_average+0x22>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <analog_get_average+0x46>
    return analog_in;
}

int analog_get_average(unsigned char channel, unsigned char elements) // not tested
{
    int average = 0;
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	10 e0       	ldi	r17, 0x00	; 0
        _delay_ms(DELAY_CONVERSION);
    }

    average /= elements;

    return average;
 1f4:	c8 01       	movw	r24, r16
 1f6:	b7 01       	movw	r22, r14
 1f8:	0e 94 94 07 	call	0xf28	; 0xf28 <__divmodhi4>
 1fc:	cb 01       	movw	r24, r22
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	08 95       	ret

0000020e <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& FUNCTIONS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED1_DDR |= (1<<LED1_PIN); // set LED gpio as output
 20e:	6c 9a       	sbi	0x0d, 4	; 13
	LED2_DDR |= (1<<LED2_PIN);
 210:	25 9a       	sbi	0x04, 5	; 4
	DDRC |= (1<<4);
 212:	3c 9a       	sbi	0x07, 4	; 7
	IN1_DDR |= (1<<IN1);
 214:	55 9a       	sbi	0x0a, 5	; 10
	IN2_DDR |= (1<<IN2);
 216:	54 9a       	sbi	0x0a, 4	; 10
	EN1_DDR |= (1<<EN1);
 218:	21 9a       	sbi	0x04, 1	; 4
	EN2_DDR |= (1<<EN2);
 21a:	22 9a       	sbi	0x04, 2	; 4
 21c:	08 95       	ret

0000021e <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	69 f0       	breq	.+26     	; 0x23c <delay_ms+0x1e>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	ef e9       	ldi	r30, 0x9F	; 159
 228:	ff e0       	ldi	r31, 0x0F	; 15
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <delay_ms+0xc>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <delay_ms+0x12>
 230:	00 00       	nop
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	82 17       	cp	r24, r18
 238:	93 07       	cpc	r25, r19
 23a:	a9 f7       	brne	.-22     	; 0x226 <delay_ms+0x8>
 23c:	08 95       	ret

0000023e <flash_LED>:
	EN2_DDR |= (1<<EN2);
	
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 248:	88 23       	and	r24, r24
 24a:	79 f0       	breq	.+30     	; 0x26a <flash_LED+0x2c>
 24c:	8b 01       	movw	r16, r22
 24e:	d8 2f       	mov	r29, r24
 250:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED2;
 252:	68 94       	set
 254:	ff 24       	eor	r15, r15
 256:	f5 f8       	bld	r15, 5
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	9f 25       	eor	r25, r15
 25c:	95 b9       	out	0x05, r25	; 5
		delay_ms(ms);
 25e:	c8 01       	movw	r24, r16
 260:	0e 94 0f 01 	call	0x21e	; 0x21e <delay_ms>
	
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	dc 13       	cpse	r29, r28
 268:	f7 cf       	rjmp	.-18     	; 0x258 <flash_LED+0x1a>
	{
		TOGGLE_LED2;
		delay_ms(ms);
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	08 95       	ret

00000276 <setup_TMR1_pwm>:

//&&&&&&&&&&&&&&&&&&& DC MOTOR &&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR1_pwm()
{
	TCCR1A |= (1 << WGM10) ; // fast PWM
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1<<CS10); // no prescaler with f_osc (so 62.5KHz PWM)
 280:	e1 e8       	ldi	r30, 0x81	; 129
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	89 60       	ori	r24, 0x09	; 9
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <set_TMR1A_duty_cycle>:
}
void set_TMR1A_duty_cycle(int duty_cycle)
{
	duty_cycle = .256 * duty_cycle - 1;
 28c:	bc 01       	movw	r22, r24
 28e:	99 0f       	add	r25, r25
 290:	88 0b       	sbc	r24, r24
 292:	99 0b       	sbc	r25, r25
 294:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
 298:	2f e6       	ldi	r18, 0x6F	; 111
 29a:	32 e1       	ldi	r19, 0x12	; 18
 29c:	43 e8       	ldi	r20, 0x83	; 131
 29e:	5e e3       	ldi	r21, 0x3E	; 62
 2a0:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
 2b0:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixsfsi>
	if (duty_cycle > 200)
	duty_cycle = 200;
	OCR1A = (char)((0x00FF) & duty_cycle);
 2b4:	69 3c       	cpi	r22, 0xC9	; 201
 2b6:	71 05       	cpc	r23, r1
 2b8:	14 f0       	brlt	.+4      	; 0x2be <set_TMR1A_duty_cycle+0x32>
 2ba:	68 ec       	ldi	r22, 0xC8	; 200
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	77 27       	eor	r23, r23
 2c0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c8:	08 95       	ret

000002ca <set_TMR1B_duty_cycle>:
}
void set_TMR1B_duty_cycle(int duty_cycle)
{
	duty_cycle = .256 * duty_cycle - 1;
 2ca:	bc 01       	movw	r22, r24
 2cc:	99 0f       	add	r25, r25
 2ce:	88 0b       	sbc	r24, r24
 2d0:	99 0b       	sbc	r25, r25
 2d2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
 2d6:	2f e6       	ldi	r18, 0x6F	; 111
 2d8:	32 e1       	ldi	r19, 0x12	; 18
 2da:	43 e8       	ldi	r20, 0x83	; 131
 2dc:	5e e3       	ldi	r21, 0x3E	; 62
 2de:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e8       	ldi	r20, 0x80	; 128
 2e8:	5f e3       	ldi	r21, 0x3F	; 63
 2ea:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
 2ee:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixsfsi>
	if (duty_cycle > 200)
	duty_cycle = 200;
	OCR1B = (char)((0x00FF) & duty_cycle);
 2f2:	69 3c       	cpi	r22, 0xC9	; 201
 2f4:	71 05       	cpc	r23, r1
 2f6:	14 f0       	brlt	.+4      	; 0x2fc <set_TMR1B_duty_cycle+0x32>
 2f8:	68 ec       	ldi	r22, 0xC8	; 200
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	77 27       	eor	r23, r23
 2fe:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 302:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 306:	08 95       	ret

00000308 <stop_TMR1A_pwm>:
}
void stop_TMR1A_pwm()
{
	TCCR1A &= ~(1 << COM1A1); // no prescaler with f_osc (so 62.5KHz PWM)
 308:	e0 e8       	ldi	r30, 0x80	; 128
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8f 77       	andi	r24, 0x7F	; 127
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <stop_TMR1B_pwm>:
}
void stop_TMR1B_pwm()
{
	TCCR1A &= ~(1 << COM1B1); // no prescaler with f_osc (so 62.5KHz PWM)
 314:	e0 e8       	ldi	r30, 0x80	; 128
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8f 7d       	andi	r24, 0xDF	; 223
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <start_TMR1A_pwm>:
}
void start_TMR1A_pwm()
{
	TCCR1A |= (1 << COM1A1); // no prescaler with f_osc (so 62.5KHz PWM)
 320:	e0 e8       	ldi	r30, 0x80	; 128
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	80 68       	ori	r24, 0x80	; 128
 328:	80 83       	st	Z, r24
 32a:	08 95       	ret

0000032c <start_TMR1B_pwm>:
}
void start_TMR1B_pwm()
{
	TCCR1A |= (1 << COM1B1); // no prescaler with f_osc (so 62.5KHz PWM)
 32c:	e0 e8       	ldi	r30, 0x80	; 128
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	80 62       	ori	r24, 0x20	; 32
 334:	80 83       	st	Z, r24
 336:	08 95       	ret

00000338 <motor_off>:
}
void motor_off()
{
	EN1_PORT &= ~(1<<EN1);
 338:	29 98       	cbi	0x05, 1	; 5
	EN2_PORT &= ~(1<<EN2);
 33a:	2a 98       	cbi	0x05, 2	; 5
 33c:	08 95       	ret

0000033e <motor_on>:
}
void motor_on()
{
	EN1_PORT |= (1<<EN1);
 33e:	29 9a       	sbi	0x05, 1	; 5
	EN2_PORT |= (1<<EN2);
 340:	2a 9a       	sbi	0x05, 2	; 5
 342:	08 95       	ret

00000344 <process_mtr_cmd>:
}
void process_mtr_cmd()
{
	if (abs(mtr_cmd) < MTR_SIDE_DEADBAND) // deadband (mtr_cmd is from -1000 to 1000)
 344:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 348:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 34c:	89 2b       	or	r24, r25
 34e:	39 f4       	brne	.+14     	; 0x35e <process_mtr_cmd+0x1a>
	{
		stop_TMR1A_pwm();
 350:	0e 94 84 01 	call	0x308	; 0x308 <stop_TMR1A_pwm>
		stop_TMR1B_pwm();
 354:	0e 94 8a 01 	call	0x314	; 0x314 <stop_TMR1B_pwm>
		motor_off();
 358:	0e 94 9c 01 	call	0x338	; 0x338 <motor_off>
 35c:	08 95       	ret
	}
	else
	{
		motor_on();
 35e:	0e 94 9f 01 	call	0x33e	; 0x33e <motor_on>
		if (mtr_cmd > 0 ) // forward direction
 362:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 366:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 36a:	18 16       	cp	r1, r24
 36c:	19 06       	cpc	r1, r25
 36e:	c4 f4       	brge	.+48     	; 0x3a0 <process_mtr_cmd+0x5c>
		{
			if (mtr_cmd > 750)
 370:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 374:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 378:	8f 3e       	cpi	r24, 0xEF	; 239
 37a:	92 40       	sbci	r25, 0x02	; 2
 37c:	34 f0       	brlt	.+12     	; 0x38a <process_mtr_cmd+0x46>
				mtr_cmd = 750;
 37e:	8e ee       	ldi	r24, 0xEE	; 238
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <mtr_cmd+0x1>
 386:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mtr_cmd>
			stop_TMR1B_pwm();
 38a:	0e 94 8a 01 	call	0x314	; 0x314 <stop_TMR1B_pwm>
			start_TMR1A_pwm();
 38e:	0e 94 90 01 	call	0x320	; 0x320 <start_TMR1A_pwm>
			set_TMR1A_duty_cycle(mtr_cmd);
 392:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 396:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 39a:	0e 94 46 01 	call	0x28c	; 0x28c <set_TMR1A_duty_cycle>
 39e:	08 95       	ret
		}
		else if (mtr_cmd < 0)  // backward direction
 3a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 3a4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 3a8:	99 23       	and	r25, r25
 3aa:	e4 f4       	brge	.+56     	; 0x3e4 <process_mtr_cmd+0xa0>
		{
			if (mtr_cmd < -750)
 3ac:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 3b0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 3b4:	82 31       	cpi	r24, 0x12	; 18
 3b6:	9d 4f       	sbci	r25, 0xFD	; 253
 3b8:	34 f4       	brge	.+12     	; 0x3c6 <process_mtr_cmd+0x82>
				mtr_cmd = -750;
 3ba:	82 e1       	ldi	r24, 0x12	; 18
 3bc:	9d ef       	ldi	r25, 0xFD	; 253
 3be:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <mtr_cmd+0x1>
 3c2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mtr_cmd>
			stop_TMR1A_pwm();
 3c6:	0e 94 84 01 	call	0x308	; 0x308 <stop_TMR1A_pwm>
			start_TMR1B_pwm();
 3ca:	0e 94 96 01 	call	0x32c	; 0x32c <start_TMR1B_pwm>
			set_TMR1B_duty_cycle(abs(mtr_cmd));
 3ce:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 3d2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 3d6:	99 23       	and	r25, r25
 3d8:	1c f4       	brge	.+6      	; 0x3e0 <process_mtr_cmd+0x9c>
 3da:	91 95       	neg	r25
 3dc:	81 95       	neg	r24
 3de:	91 09       	sbc	r25, r1
 3e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <set_TMR1B_duty_cycle>
 3e4:	08 95       	ret

000003e6 <setup_TMR3>:

//&&&&&&&&&&&&&& TMR3 for communication timeout &&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR3()
{
	TCCR3A |= (1<<COM3A1) | (1<<COM3A0); // clear OCRA on compare
 3e6:	e0 e9       	ldi	r30, 0x90	; 144
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 6c       	ori	r24, 0xC0	; 192
 3ee:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS32) | (1<<CS30) | (1<<WGM32); // 1024 prescaler, CTC mode
 3f0:	e1 e9       	ldi	r30, 0x91	; 145
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	8d 60       	ori	r24, 0x0D	; 13
 3f8:	80 83       	st	Z, r24
	OCR3A = 7812; // 500 ms period
 3fa:	84 e8       	ldi	r24, 0x84	; 132
 3fc:	9e e1       	ldi	r25, 0x1E	; 30
 3fe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 402:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TIMSK3 |= (1<<OCIE3A); // set interrupt on OCA compare
 406:	e1 e7       	ldi	r30, 0x71	; 113
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	80 83       	st	Z, r24
 410:	08 95       	ret

00000412 <start_TMR3>:
}
void start_TMR3()
{
	TIMSK3 |= (1<<OCIE3A);
 412:	e1 e7       	ldi	r30, 0x71	; 113
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
 41c:	08 95       	ret

0000041e <stop_TMR3>:
}
void stop_TMR3()
{
	TIMSK3 &= ~(1<<OCIE3A);
 41e:	e1 e7       	ldi	r30, 0x71	; 113
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	8d 7f       	andi	r24, 0xFD	; 253
 426:	80 83       	st	Z, r24
 428:	08 95       	ret

0000042a <get_voltage>:
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
float get_voltage()
{
	float _voltage = 0;
	// get analog reading
	_voltage = analog_get_average(VOLTAGE_SENSOR, 5);
 42a:	65 e0       	ldi	r22, 0x05	; 5
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
 432:	bc 01       	movw	r22, r24
 434:	99 0f       	add	r25, r25
 436:	88 0b       	sbc	r24, r24
 438:	99 0b       	sbc	r25, r25
 43a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
	// convert to volts
	_voltage *= 5;
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 ea       	ldi	r20, 0xA0	; 160
 444:	50 e4       	ldi	r21, 0x40	; 64
 446:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
	_voltage /= 1023; 
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 ec       	ldi	r19, 0xC0	; 192
 44e:	4f e7       	ldi	r20, 0x7F	; 127
 450:	54 e4       	ldi	r21, 0x44	; 68
 452:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	// voltage divider scaling factor
	_voltage *= 48;
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e4       	ldi	r20, 0x40	; 64
 45c:	52 e4       	ldi	r21, 0x42	; 66
 45e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
	_voltage /= 10; 
	
	return _voltage;
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e2       	ldi	r20, 0x20	; 32
 468:	51 e4       	ldi	r21, 0x41	; 65
 46a:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
}
 46e:	08 95       	ret

00000470 <get_current>:
float get_current()
{
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
	float _current = 0;
	// get analog reading
	_current = analog_get_average(CURRENT_SENSOR, 5);
 478:	65 e0       	ldi	r22, 0x05	; 5
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
 480:	bc 01       	movw	r22, r24
 482:	99 0f       	add	r25, r25
 484:	88 0b       	sbc	r24, r24
 486:	99 0b       	sbc	r25, r25
 488:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
	// convert to mV
	_current *= 5000;
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e4       	ldi	r19, 0x40	; 64
 490:	4c e9       	ldi	r20, 0x9C	; 156
 492:	55 e4       	ldi	r21, 0x45	; 69
 494:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
	_current /=  1023; 
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 ec       	ldi	r19, 0xC0	; 192
 49c:	4f e7       	ldi	r20, 0x7F	; 127
 49e:	54 e4       	ldi	r21, 0x44	; 68
 4a0:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	_current -= 444; // 0A offset
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	4e ed       	ldi	r20, 0xDE	; 222
 4aa:	53 e4       	ldi	r21, 0x43	; 67
 4ac:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
	_current /= 400; // 400mV per 1A
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	48 ec       	ldi	r20, 0xC8	; 200
 4b6:	53 e4       	ldi	r21, 0x43	; 67
 4b8:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
 4bc:	6b 01       	movw	r12, r22
 4be:	7c 01       	movw	r14, r24
	if (_current < 0)
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	a9 01       	movw	r20, r18
 4c6:	0e 94 43 05 	call	0xa86	; 0xa86 <__cmpsf2>
 4ca:	88 23       	and	r24, r24
 4cc:	1c f4       	brge	.+6      	; 0x4d4 <get_current+0x64>
		_current = 0; // cannot be negative
 4ce:	c1 2c       	mov	r12, r1
 4d0:	d1 2c       	mov	r13, r1
 4d2:	76 01       	movw	r14, r12
		
	return _current;	
}
 4d4:	c7 01       	movw	r24, r14
 4d6:	b6 01       	movw	r22, r12
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	08 95       	ret

000004e2 <get_temperature>:
float get_temperature()
{
	float _temperature = 0;
	
	_temperature = analog_get_average(TEMP_SENSOR, 5);
 4e2:	65 e0       	ldi	r22, 0x05	; 5
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
	_temperature = 1023 / _temperature - 1;
 4ea:	bc 01       	movw	r22, r24
 4ec:	99 0f       	add	r25, r25
 4ee:	88 0b       	sbc	r24, r24
 4f0:	99 0b       	sbc	r25, r25
 4f2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
 4f6:	9b 01       	movw	r18, r22
 4f8:	ac 01       	movw	r20, r24
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	70 ec       	ldi	r23, 0xC0	; 192
 4fe:	8f e7       	ldi	r24, 0x7F	; 127
 500:	94 e4       	ldi	r25, 0x44	; 68
 502:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e8       	ldi	r20, 0x80	; 128
 50c:	5f e3       	ldi	r21, 0x3F	; 63
 50e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
 512:	9b 01       	movw	r18, r22
 514:	ac 01       	movw	r20, r24
	_temperature = SERIESRESISTOR / _temperature;
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e4       	ldi	r23, 0x40	; 64
 51a:	8c e1       	ldi	r24, 0x1C	; 28
 51c:	96 e4       	ldi	r25, 0x46	; 70
 51e:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	_temperature = _temperature / THERMISTORNOMINAL;     // (R/Ro)
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e4       	ldi	r19, 0x40	; 64
 526:	4c e1       	ldi	r20, 0x1C	; 28
 528:	56 e4       	ldi	r21, 0x46	; 70
 52a:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	_temperature = log(_temperature);                  // ln(R/Ro)
 52e:	0e 94 aa 06 	call	0xd54	; 0xd54 <log>
	_temperature /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 ed       	ldi	r19, 0xD0	; 208
 536:	44 e8       	ldi	r20, 0x84	; 132
 538:	55 e4       	ldi	r21, 0x45	; 69
 53a:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	_temperature += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
 53e:	2f e0       	ldi	r18, 0x0F	; 15
 540:	3f ec       	ldi	r19, 0xCF	; 207
 542:	4b e5       	ldi	r20, 0x5B	; 91
 544:	5b e3       	ldi	r21, 0x3B	; 59
 546:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 54a:	9b 01       	movw	r18, r22
 54c:	ac 01       	movw	r20, r24
	_temperature = 1.0 / _temperature;                 // Invert
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e8       	ldi	r24, 0x80	; 128
 554:	9f e3       	ldi	r25, 0x3F	; 63
 556:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
	_temperature -= 273.15;                         // convert to C
	
	return _temperature;
 55a:	23 e3       	ldi	r18, 0x33	; 51
 55c:	33 e9       	ldi	r19, 0x93	; 147
 55e:	48 e8       	ldi	r20, 0x88	; 136
 560:	53 e4       	ldi	r21, 0x43	; 67
 562:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
}
 566:	08 95       	ret

00000568 <main>:
	
	
	
int main(void)
{
	setup_gpios(); 
 568:	0e 94 07 01 	call	0x20e	; 0x20e <setup_gpios>
	
	/* USART setup */
	setup_usart0(BR_38400); // for NEO6 GPS
 56c:	89 e1       	ldi	r24, 0x19	; 25
 56e:	0e 94 cd 04 	call	0x99a	; 0x99a <setup_usart0>
	
	/* nRF24L01 setup */
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 572:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 576:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mirf_init>
	mirf_config(); // configure nRF24L01
 57a:	0e 94 91 03 	call	0x722	; 0x722 <mirf_config>
	mirf_set_RADDR(rx_address);
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 ed 03 	call	0x7da	; 0x7da <mirf_set_RADDR>
	
	/* setup TMR3 for communication tiemout */
	setup_TMR3();
 586:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <setup_TMR3>

	/* ADC for current and temperature sensor (and joystick indirect joystick mode) */
	setup_adc();
 58a:	0e 94 b2 00 	call	0x164	; 0x164 <setup_adc>

	/* DC motor setup */
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
 58e:	0e 94 3b 01 	call	0x276	; 0x276 <setup_TMR1_pwm>
	
	sei(); // enable global interrupts
 592:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 594:	62 e3       	ldi	r22, 0x32	; 50
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	8a e0       	ldi	r24, 0x0A	; 10
 59a:	0e 94 1f 01 	call	0x23e	; 0x23e <flash_LED>
	println_0("System initialized...;");
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <println_0>
 5a6:	8f e3       	ldi	r24, 0x3F	; 63
 5a8:	9c e9       	ldi	r25, 0x9C	; 156
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <main+0x42>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x48>
 5b0:	00 00       	nop
	_delay_ms(10);
	
	LED1_OFF;
 5b2:	74 98       	cbi	0x0e, 4	; 14

    while (1)  
    {
		TOGGLE_LED2;
 5b4:	c0 e2       	ldi	r28, 0x20	; 32
		while(!mirf_data_ready())
		{
			if (timeout)
			{
				timeout = 0;
				false_cmd = 1;
 5b6:	d1 e0       	ldi	r29, 0x01	; 1
	
	LED1_OFF;

    while (1)  
    {
		TOGGLE_LED2;
 5b8:	85 b1       	in	r24, 0x05	; 5
 5ba:	8c 27       	eor	r24, r28
 5bc:	85 b9       	out	0x05, r24	; 5
		
		voltage = get_voltage(); // in V
 5be:	0e 94 15 02 	call	0x42a	; 0x42a <get_voltage>
		voltage *= 100; // convert to centi-V to obtain an integer
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	48 ec       	ldi	r20, 0xC8	; 200
 5c8:	52 e4       	ldi	r21, 0x42	; 66
 5ca:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
 5ce:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <voltage>
 5d2:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <voltage+0x1>
 5d6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <voltage+0x2>
 5da:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <voltage+0x3>
// 		print_int_0((int16_t)voltage);
// 				print_char_0(',');
// 				print_char_0(' ');
// 				
		current = get_current(); // in A
 5de:	0e 94 38 02 	call	0x470	; 0x470 <get_current>
		current *= 1000; // convert to mA to get an integer
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	4a e7       	ldi	r20, 0x7A	; 122
 5e8:	54 e4       	ldi	r21, 0x44	; 68
 5ea:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
 5ee:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <current>
 5f2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <current+0x1>
 5f6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <current+0x2>
 5fa:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <current+0x3>
// 		print_int_0((int16_t)current);
// 		print_char_0(',');
// 		print_char_0(' ');
		
		temperature =  get_temperature();
 5fe:	0e 94 71 02 	call	0x4e2	; 0x4e2 <get_temperature>
 602:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <temperature>
 606:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <temperature+0x1>
 60a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <temperature+0x2>
 60e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <temperature+0x3>
		//println_int_0((int16_t)temperature);
		
		/* MIRF stuff */
		set_RX_MODE();
 612:	0e 94 87 03 	call	0x70e	; 0x70e <set_RX_MODE>
		
		start_TMR3();
 616:	0e 94 09 02 	call	0x412	; 0x412 <start_TMR3>
		
		while(!mirf_data_ready())
 61a:	09 c0       	rjmp	.+18     	; 0x62e <main+0xc6>
		{
			if (timeout)
 61c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <timeout>
 620:	88 23       	and	r24, r24
 622:	29 f0       	breq	.+10     	; 0x62e <main+0xc6>
			{
				timeout = 0;
 624:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <timeout>
				false_cmd = 1;
 628:	d0 93 1c 01 	sts	0x011C, r29	; 0x80011c <__data_end>
				break;
 62c:	04 c0       	rjmp	.+8      	; 0x636 <main+0xce>
		/* MIRF stuff */
		set_RX_MODE();
		
		start_TMR3();
		
		while(!mirf_data_ready())
 62e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <mirf_data_ready>
 632:	88 23       	and	r24, r24
 634:	99 f3       	breq	.-26     	; 0x61c <main+0xb4>
				false_cmd = 1;
				break;
			}
		}
		
		stop_TMR3();
 636:	0e 94 0f 02 	call	0x41e	; 0x41e <stop_TMR3>
		
		mirf_CE_lo; // enter Stanby_I mode to save current consumption	
 63a:	47 98       	cbi	0x08, 7	; 8
		
		mirf_get_data(buffer); // get the data, put it in buffer	
 63c:	8c e2       	ldi	r24, 0x2C	; 44
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	0e 94 c2 03 	call	0x784	; 0x784 <mirf_get_data>
					
				
		// only if communication is successful
		if (!false_cmd)
 644:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 648:	81 11       	cpse	r24, r1
 64a:	26 c0       	rjmp	.+76     	; 0x698 <main+0x130>
		{		
				
			// get signed 16-bit mtr cmd
			mtr_cmd =  buffer[0]; // get LSB
 64c:	ec e2       	ldi	r30, 0x2C	; 44
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	80 81       	ld	r24, Z
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <mtr_cmd+0x1>
 658:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mtr_cmd>
			mtr_cmd |= (buffer[1]<<8); // get MSB
 65c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 660:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 664:	21 81       	ldd	r18, Z+1	; 0x01
 666:	92 2b       	or	r25, r18
 668:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <mtr_cmd+0x1>
 66c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mtr_cmd>
			
 			// low-pass filter
//  			mtr_cmd = mtr_cmd*alpha + old_mtr_cmd*(1-alpha);
//  			old_mtr_cmd = mtr_cmd;

			mtr_cmd *= 7;
 670:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <mtr_cmd>
 674:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <mtr_cmd+0x1>
 678:	c9 01       	movw	r24, r18
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	82 1b       	sub	r24, r18
 688:	93 0b       	sbc	r25, r19
 68a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <mtr_cmd+0x1>
 68e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mtr_cmd>
			
			process_mtr_cmd();
 692:	0e 94 a2 01 	call	0x344	; 0x344 <process_mtr_cmd>
 696:	02 c0       	rjmp	.+4      	; 0x69c <main+0x134>
		}
		else
			false_cmd = 0;
 698:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
			
			println_int_0((int16_t)mtr_cmd);
 69c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mtr_cmd>
 6a0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mtr_cmd+0x1>
 6a4:	0e 94 1b 04 	call	0x836	; 0x836 <println_int_0>
		
		//_delay_ms(LOOP_DELAY);
    }
 6a8:	87 cf       	rjmp	.-242    	; 0x5b8 <main+0x50>

000006aa <__vector_32>:

//&&&&&&&&&&&&&&&&&&&&&& TMR3 ISR &&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ISR(TIMER3_COMPA_vect)
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	8f 93       	push	r24
	timeout = 1;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <timeout>
 6bc:	8f 91       	pop	r24
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 6c8:	3f 9a       	sbi	0x07, 7	; 7
 6ca:	56 9a       	sbi	0x0a, 6	; 10
 6cc:	47 98       	cbi	0x08, 7	; 8
 6ce:	5e 9a       	sbi	0x0b, 6	; 11
 6d0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi1_master_initialize>
 6d4:	08 95       	ret

000006d6 <mirf_data_ready>:
 6d6:	5e 98       	cbi	0x0b, 6	; 11
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	0e 94 80 04 	call	0x900	; 0x900 <spi1_exchange_char>
 6de:	5e 9a       	sbi	0x0b, 6	; 11
 6e0:	80 74       	andi	r24, 0x40	; 64
 6e2:	08 95       	ret

000006e4 <mirf_config_register>:
 6e4:	cf 93       	push	r28
 6e6:	c6 2f       	mov	r28, r22
 6e8:	5e 98       	cbi	0x0b, 6	; 11
 6ea:	8f 71       	andi	r24, 0x1F	; 31
 6ec:	80 62       	ori	r24, 0x20	; 32
 6ee:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi1_send_char>
 6f2:	85 e8       	ldi	r24, 0x85	; 133
 6f4:	8a 95       	dec	r24
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <mirf_config_register+0x10>
 6f8:	00 00       	nop
 6fa:	8c 2f       	mov	r24, r28
 6fc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi1_send_char>
 700:	5e 9a       	sbi	0x0b, 6	; 11
 702:	85 e8       	ldi	r24, 0x85	; 133
 704:	8a 95       	dec	r24
 706:	f1 f7       	brne	.-4      	; 0x704 <mirf_config_register+0x20>
 708:	00 00       	nop
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <set_RX_MODE>:
 70e:	60 e7       	ldi	r22, 0x70	; 112
 710:	87 e0       	ldi	r24, 0x07	; 7
 712:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 716:	6b e5       	ldi	r22, 0x5B	; 91
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 71e:	47 9a       	sbi	0x08, 7	; 8
 720:	08 95       	ret

00000722 <mirf_config>:
 722:	6c e6       	ldi	r22, 0x6C	; 108
 724:	85 e0       	ldi	r24, 0x05	; 5
 726:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 72a:	63 e0       	ldi	r22, 0x03	; 3
 72c:	81 e1       	ldi	r24, 0x11	; 17
 72e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	82 e1       	ldi	r24, 0x12	; 18
 736:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	83 e1       	ldi	r24, 0x13	; 19
 73e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	84 e1       	ldi	r24, 0x14	; 20
 746:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	85 e1       	ldi	r24, 0x15	; 21
 74e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	86 e1       	ldi	r24, 0x16	; 22
 756:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 75a:	66 e0       	ldi	r22, 0x06	; 6
 75c:	86 e0       	ldi	r24, 0x06	; 6
 75e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	84 e0       	ldi	r24, 0x04	; 4
 776:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 77a:	60 e7       	ldi	r22, 0x70	; 112
 77c:	87 e0       	ldi	r24, 0x07	; 7
 77e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 782:	08 95       	ret

00000784 <mirf_get_data>:
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	ec 01       	movw	r28, r24
 78a:	5e 98       	cbi	0x0b, 6	; 11
 78c:	81 e6       	ldi	r24, 0x61	; 97
 78e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi1_send_char>
 792:	43 e0       	ldi	r20, 0x03	; 3
 794:	be 01       	movw	r22, r28
 796:	ce 01       	movw	r24, r28
 798:	0e 94 a1 04 	call	0x942	; 0x942 <spi1_exchange_bytes>
 79c:	5e 9a       	sbi	0x0b, 6	; 11
 79e:	60 e4       	ldi	r22, 0x40	; 64
 7a0:	87 e0       	ldi	r24, 0x07	; 7
 7a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mirf_config_register>
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 7ac:	1f 93       	push	r17
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	eb 01       	movw	r28, r22
 7b4:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 7b6:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 7b8:	8f 71       	andi	r24, 0x1F	; 31
 7ba:	80 62       	ori	r24, 0x20	; 32
 7bc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <spi1_send_char>
	spi1_send_bytes(value, len);
 7c0:	61 2f       	mov	r22, r17
 7c2:	ce 01       	movw	r24, r28
 7c4:	0e 94 8a 04 	call	0x914	; 0x914 <spi1_send_bytes>
	mirf_CSN_hi;
 7c8:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ca:	85 e8       	ldi	r24, 0x85	; 133
 7cc:	8a 95       	dec	r24
 7ce:	f1 f7       	brne	.-4      	; 0x7cc <mirf_write_register+0x20>
 7d0:	00 00       	nop
	_delay_us(25);
	
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	08 95       	ret

000007da <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 7da:	47 98       	cbi	0x08, 7	; 8
	mirf_write_register(RX_ADDR_P0, adr, 5);
 7dc:	45 e0       	ldi	r20, 0x05	; 5
 7de:	bc 01       	movw	r22, r24
 7e0:	8a e0       	ldi	r24, 0x0A	; 10
 7e2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <mirf_write_register>
	mirf_CE_hi;
 7e6:	47 9a       	sbi	0x08, 7	; 8
 7e8:	08 95       	ret

000007ea <println_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	8c 01       	movw	r16, r24
 7f4:	fc 01       	movw	r30, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	8a 30       	cpi	r24, 0x0A	; 10
 7fa:	69 f0       	breq	.+26     	; 0x816 <println_0+0x2c>
 7fc:	8b 33       	cpi	r24, 0x3B	; 59
 7fe:	79 f4       	brne	.+30     	; 0x81e <println_0+0x34>
 800:	0a c0       	rjmp	.+20     	; 0x816 <println_0+0x2c>
 802:	89 91       	ld	r24, Y+
 804:	8a 30       	cpi	r24, 0x0A	; 10
 806:	39 f0       	breq	.+14     	; 0x816 <println_0+0x2c>
 808:	8b 33       	cpi	r24, 0x3B	; 59
 80a:	29 f0       	breq	.+10     	; 0x816 <println_0+0x2c>
 80c:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
 810:	0c 17       	cp	r16, r28
 812:	1d 07       	cpc	r17, r29
 814:	b1 f7       	brne	.-20     	; 0x802 <println_0+0x18>
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
 81c:	07 c0       	rjmp	.+14     	; 0x82c <println_0+0x42>
 81e:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
 822:	e8 01       	movw	r28, r16
 824:	21 96       	adiw	r28, 0x01	; 1
 826:	08 53       	subi	r16, 0x38	; 56
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	eb cf       	rjmp	.-42     	; 0x802 <println_0+0x18>
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	08 95       	ret

00000836 <println_int_0>:

void println_int_0(int number)
{
 836:	ef 92       	push	r14
 838:	ff 92       	push	r15
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
 846:	c0 54       	subi	r28, 0x40	; 64
 848:	d1 09       	sbc	r29, r1
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	8c 01       	movw	r16, r24
	if (number == 0)
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	31 f4       	brne	.+12     	; 0x866 <println_int_0+0x30>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 85a:	80 e3       	ldi	r24, 0x30	; 48
 85c:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
	if (number == 0)
	{
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
 860:	e1 2c       	mov	r14, r1
 862:	f1 2c       	mov	r15, r1
 864:	16 c0       	rjmp	.+44     	; 0x892 <println_int_0+0x5c>
 866:	20 e0       	ldi	r18, 0x00	; 0
 868:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 86a:	ea e0       	ldi	r30, 0x0A	; 10
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	01 c0       	rjmp	.+2      	; 0x872 <println_int_0+0x3c>
		num_digit++;
 870:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 872:	bf 01       	movw	r22, r30
 874:	0e 94 94 07 	call	0xf28	; 0xf28 <__divmodhi4>
 878:	cb 01       	movw	r24, r22
		num_digit++;
 87a:	79 01       	movw	r14, r18
 87c:	4f ef       	ldi	r20, 0xFF	; 255
 87e:	e4 1a       	sub	r14, r20
 880:	f4 0a       	sbc	r15, r20
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 882:	00 97       	sbiw	r24, 0x00	; 0
 884:	a9 f7       	brne	.-22     	; 0x870 <println_int_0+0x3a>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 886:	11 23       	and	r17, r17
 888:	24 f4       	brge	.+8      	; 0x892 <println_int_0+0x5c>
 88a:	79 01       	movw	r14, r18
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	e8 0e       	add	r14, r24
 890:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 892:	4a e0       	ldi	r20, 0x0A	; 10
 894:	be 01       	movw	r22, r28
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	c8 01       	movw	r24, r16
 89c:	0e 94 bc 07 	call	0xf78	; 0xf78 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 8a0:	1e 14       	cp	r1, r14
 8a2:	1f 04       	cpc	r1, r15
 8a4:	6c f4       	brge	.+26     	; 0x8c0 <println_int_0+0x8a>
 8a6:	8e 01       	movw	r16, r28
 8a8:	0f 5f       	subi	r16, 0xFF	; 255
 8aa:	1f 4f       	sbci	r17, 0xFF	; 255
 8ac:	e0 0e       	add	r14, r16
 8ae:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 8b0:	f8 01       	movw	r30, r16
 8b2:	81 91       	ld	r24, Z+
 8b4:	8f 01       	movw	r16, r30
 8b6:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 8ba:	0e 15       	cp	r16, r14
 8bc:	1f 05       	cpc	r17, r15
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <println_int_0+0x7a>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 8c0:	8a e0       	ldi	r24, 0x0A	; 10
 8c2:	0e 94 c5 04 	call	0x98a	; 0x98a <usart0_send_char>
}
 8c6:	c0 5c       	subi	r28, 0xC0	; 192
 8c8:	df 4f       	sbci	r29, 0xFF	; 255
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	f8 94       	cli
 8ce:	de bf       	out	0x3e, r29	; 62
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	cd bf       	out	0x3d, r28	; 61
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	08 95       	ret

000008e2 <spi1_master_initialize>:
 8e2:	6b 9a       	sbi	0x0d, 3	; 13
 8e4:	57 9a       	sbi	0x0a, 7	; 10
 8e6:	56 9a       	sbi	0x0a, 6	; 10
 8e8:	82 e5       	ldi	r24, 0x52	; 82
 8ea:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 8ee:	08 95       	ret

000008f0 <spi1_send_char>:
 8f0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 8f4:	ed ea       	ldi	r30, 0xAD	; 173
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	88 23       	and	r24, r24
 8fc:	ec f7       	brge	.-6      	; 0x8f8 <spi1_send_char+0x8>
 8fe:	08 95       	ret

00000900 <spi1_exchange_char>:
 900:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 904:	ed ea       	ldi	r30, 0xAD	; 173
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	88 23       	and	r24, r24
 90c:	ec f7       	brge	.-6      	; 0x908 <spi1_exchange_char+0x8>
 90e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 912:	08 95       	ret

00000914 <spi1_send_bytes>:
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	66 23       	and	r22, r22
 91a:	81 f0       	breq	.+32     	; 0x93c <spi1_send_bytes+0x28>
 91c:	dc 01       	movw	r26, r24
 91e:	9c 01       	movw	r18, r24
 920:	26 0f       	add	r18, r22
 922:	31 1d       	adc	r19, r1
 924:	ce ea       	ldi	r28, 0xAE	; 174
 926:	d0 e0       	ldi	r29, 0x00	; 0
 928:	ed ea       	ldi	r30, 0xAD	; 173
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	9d 91       	ld	r25, X+
 92e:	98 83       	st	Y, r25
 930:	90 81       	ld	r25, Z
 932:	99 23       	and	r25, r25
 934:	ec f7       	brge	.-6      	; 0x930 <spi1_send_bytes+0x1c>
 936:	a2 17       	cp	r26, r18
 938:	b3 07       	cpc	r27, r19
 93a:	c1 f7       	brne	.-16     	; 0x92c <spi1_send_bytes+0x18>
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <spi1_exchange_bytes>:
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	44 23       	and	r20, r20
 94c:	c9 f0       	breq	.+50     	; 0x980 <spi1_exchange_bytes+0x3e>
 94e:	dc 01       	movw	r26, r24
 950:	06 2f       	mov	r16, r22
 952:	17 2f       	mov	r17, r23
 954:	9c 01       	movw	r18, r24
 956:	24 0f       	add	r18, r20
 958:	31 1d       	adc	r19, r1
 95a:	a9 01       	movw	r20, r18
 95c:	2e ea       	ldi	r18, 0xAE	; 174
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	ed ea       	ldi	r30, 0xAD	; 173
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	9d 91       	ld	r25, X+
 966:	e9 01       	movw	r28, r18
 968:	98 83       	st	Y, r25
 96a:	90 81       	ld	r25, Z
 96c:	99 23       	and	r25, r25
 96e:	ec f7       	brge	.-6      	; 0x96a <spi1_exchange_bytes+0x28>
 970:	e9 01       	movw	r28, r18
 972:	98 81       	ld	r25, Y
 974:	e8 01       	movw	r28, r16
 976:	99 93       	st	Y+, r25
 978:	8e 01       	movw	r16, r28
 97a:	a4 17       	cp	r26, r20
 97c:	b5 07       	cpc	r27, r21
 97e:	91 f7       	brne	.-28     	; 0x964 <spi1_exchange_bytes+0x22>
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 98a:	e0 ec       	ldi	r30, 0xC0	; 192
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	90 81       	ld	r25, Z
 990:	95 ff       	sbrs	r25, 5
 992:	fd cf       	rjmp	.-6      	; 0x98e <usart0_send_char+0x4>
 994:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 998:	08 95       	ret

0000099a <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 99a:	98 e9       	ldi	r25, 0x98	; 152
 99c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 9a0:	96 e0       	ldi	r25, 0x06	; 6
 9a2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 9a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 9aa:	08 95       	ret

000009ac <__subsf3>:
 9ac:	50 58       	subi	r21, 0x80	; 128

000009ae <__addsf3>:
 9ae:	bb 27       	eor	r27, r27
 9b0:	aa 27       	eor	r26, r26
 9b2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
 9b6:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_round>
 9ba:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_pscA>
 9be:	38 f0       	brcs	.+14     	; 0x9ce <__addsf3+0x20>
 9c0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscB>
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <__addsf3+0x20>
 9c6:	39 f4       	brne	.+14     	; 0x9d6 <__addsf3+0x28>
 9c8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ca:	19 f4       	brne	.+6      	; 0x9d2 <__addsf3+0x24>
 9cc:	26 f4       	brtc	.+8      	; 0x9d6 <__addsf3+0x28>
 9ce:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_nan>
 9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3+0x28>
 9d4:	e0 95       	com	r30
 9d6:	e7 fb       	bst	r30, 7
 9d8:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>

000009dc <__addsf3x>:
 9dc:	e9 2f       	mov	r30, r25
 9de:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_split3>
 9e2:	58 f3       	brcs	.-42     	; 0x9ba <__addsf3+0xc>
 9e4:	ba 17       	cp	r27, r26
 9e6:	62 07       	cpc	r22, r18
 9e8:	73 07       	cpc	r23, r19
 9ea:	84 07       	cpc	r24, r20
 9ec:	95 07       	cpc	r25, r21
 9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3x+0x1c>
 9f0:	79 f4       	brne	.+30     	; 0xa10 <__addsf3x+0x34>
 9f2:	a6 f5       	brtc	.+104    	; 0xa5c <__addsf3x+0x80>
 9f4:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_zero>
 9f8:	0e f4       	brtc	.+2      	; 0x9fc <__addsf3x+0x20>
 9fa:	e0 95       	com	r30
 9fc:	0b 2e       	mov	r0, r27
 9fe:	ba 2f       	mov	r27, r26
 a00:	a0 2d       	mov	r26, r0
 a02:	0b 01       	movw	r0, r22
 a04:	b9 01       	movw	r22, r18
 a06:	90 01       	movw	r18, r0
 a08:	0c 01       	movw	r0, r24
 a0a:	ca 01       	movw	r24, r20
 a0c:	a0 01       	movw	r20, r0
 a0e:	11 24       	eor	r1, r1
 a10:	ff 27       	eor	r31, r31
 a12:	59 1b       	sub	r21, r25
 a14:	99 f0       	breq	.+38     	; 0xa3c <__addsf3x+0x60>
 a16:	59 3f       	cpi	r21, 0xF9	; 249
 a18:	50 f4       	brcc	.+20     	; 0xa2e <__addsf3x+0x52>
 a1a:	50 3e       	cpi	r21, 0xE0	; 224
 a1c:	68 f1       	brcs	.+90     	; 0xa78 <__addsf3x+0x9c>
 a1e:	1a 16       	cp	r1, r26
 a20:	f0 40       	sbci	r31, 0x00	; 0
 a22:	a2 2f       	mov	r26, r18
 a24:	23 2f       	mov	r18, r19
 a26:	34 2f       	mov	r19, r20
 a28:	44 27       	eor	r20, r20
 a2a:	58 5f       	subi	r21, 0xF8	; 248
 a2c:	f3 cf       	rjmp	.-26     	; 0xa14 <__addsf3x+0x38>
 a2e:	46 95       	lsr	r20
 a30:	37 95       	ror	r19
 a32:	27 95       	ror	r18
 a34:	a7 95       	ror	r26
 a36:	f0 40       	sbci	r31, 0x00	; 0
 a38:	53 95       	inc	r21
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__addsf3x+0x52>
 a3c:	7e f4       	brtc	.+30     	; 0xa5c <__addsf3x+0x80>
 a3e:	1f 16       	cp	r1, r31
 a40:	ba 0b       	sbc	r27, r26
 a42:	62 0b       	sbc	r22, r18
 a44:	73 0b       	sbc	r23, r19
 a46:	84 0b       	sbc	r24, r20
 a48:	ba f0       	brmi	.+46     	; 0xa78 <__addsf3x+0x9c>
 a4a:	91 50       	subi	r25, 0x01	; 1
 a4c:	a1 f0       	breq	.+40     	; 0xa76 <__addsf3x+0x9a>
 a4e:	ff 0f       	add	r31, r31
 a50:	bb 1f       	adc	r27, r27
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	c2 f7       	brpl	.-16     	; 0xa4a <__addsf3x+0x6e>
 a5a:	0e c0       	rjmp	.+28     	; 0xa78 <__addsf3x+0x9c>
 a5c:	ba 0f       	add	r27, r26
 a5e:	62 1f       	adc	r22, r18
 a60:	73 1f       	adc	r23, r19
 a62:	84 1f       	adc	r24, r20
 a64:	48 f4       	brcc	.+18     	; 0xa78 <__addsf3x+0x9c>
 a66:	87 95       	ror	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	b7 95       	ror	r27
 a6e:	f7 95       	ror	r31
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	08 f0       	brcs	.+2      	; 0xa76 <__addsf3x+0x9a>
 a74:	b0 cf       	rjmp	.-160    	; 0x9d6 <__addsf3+0x28>
 a76:	93 95       	inc	r25
 a78:	88 0f       	add	r24, r24
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0xa2>
 a7c:	99 27       	eor	r25, r25
 a7e:	ee 0f       	add	r30, r30
 a80:	97 95       	ror	r25
 a82:	87 95       	ror	r24
 a84:	08 95       	ret

00000a86 <__cmpsf2>:
 a86:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_cmp>
 a8a:	08 f4       	brcc	.+2      	; 0xa8e <__cmpsf2+0x8>
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	08 95       	ret

00000a90 <__divsf3>:
 a90:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divsf3x>
 a94:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_round>
 a98:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscB>
 a9c:	58 f0       	brcs	.+22     	; 0xab4 <__divsf3+0x24>
 a9e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_pscA>
 aa2:	40 f0       	brcs	.+16     	; 0xab4 <__divsf3+0x24>
 aa4:	29 f4       	brne	.+10     	; 0xab0 <__divsf3+0x20>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	29 f0       	breq	.+10     	; 0xab4 <__divsf3+0x24>
 aaa:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 aae:	51 11       	cpse	r21, r1
 ab0:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 ab4:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_nan>

00000ab8 <__divsf3x>:
 ab8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_split3>
 abc:	68 f3       	brcs	.-38     	; 0xa98 <__divsf3+0x8>

00000abe <__divsf3_pse>:
 abe:	99 23       	and	r25, r25
 ac0:	b1 f3       	breq	.-20     	; 0xaae <__divsf3+0x1e>
 ac2:	55 23       	and	r21, r21
 ac4:	91 f3       	breq	.-28     	; 0xaaa <__divsf3+0x1a>
 ac6:	95 1b       	sub	r25, r21
 ac8:	55 0b       	sbc	r21, r21
 aca:	bb 27       	eor	r27, r27
 acc:	aa 27       	eor	r26, r26
 ace:	62 17       	cp	r22, r18
 ad0:	73 07       	cpc	r23, r19
 ad2:	84 07       	cpc	r24, r20
 ad4:	38 f0       	brcs	.+14     	; 0xae4 <__divsf3_pse+0x26>
 ad6:	9f 5f       	subi	r25, 0xFF	; 255
 ad8:	5f 4f       	sbci	r21, 0xFF	; 255
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	44 1f       	adc	r20, r20
 ae0:	aa 1f       	adc	r26, r26
 ae2:	a9 f3       	breq	.-22     	; 0xace <__divsf3_pse+0x10>
 ae4:	35 d0       	rcall	.+106    	; 0xb50 <__divsf3_pse+0x92>
 ae6:	0e 2e       	mov	r0, r30
 ae8:	3a f0       	brmi	.+14     	; 0xaf8 <__divsf3_pse+0x3a>
 aea:	e0 e8       	ldi	r30, 0x80	; 128
 aec:	32 d0       	rcall	.+100    	; 0xb52 <__divsf3_pse+0x94>
 aee:	91 50       	subi	r25, 0x01	; 1
 af0:	50 40       	sbci	r21, 0x00	; 0
 af2:	e6 95       	lsr	r30
 af4:	00 1c       	adc	r0, r0
 af6:	ca f7       	brpl	.-14     	; 0xaea <__divsf3_pse+0x2c>
 af8:	2b d0       	rcall	.+86     	; 0xb50 <__divsf3_pse+0x92>
 afa:	fe 2f       	mov	r31, r30
 afc:	29 d0       	rcall	.+82     	; 0xb50 <__divsf3_pse+0x92>
 afe:	66 0f       	add	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	bb 1f       	adc	r27, r27
 b06:	26 17       	cp	r18, r22
 b08:	37 07       	cpc	r19, r23
 b0a:	48 07       	cpc	r20, r24
 b0c:	ab 07       	cpc	r26, r27
 b0e:	b0 e8       	ldi	r27, 0x80	; 128
 b10:	09 f0       	breq	.+2      	; 0xb14 <__divsf3_pse+0x56>
 b12:	bb 0b       	sbc	r27, r27
 b14:	80 2d       	mov	r24, r0
 b16:	bf 01       	movw	r22, r30
 b18:	ff 27       	eor	r31, r31
 b1a:	93 58       	subi	r25, 0x83	; 131
 b1c:	5f 4f       	sbci	r21, 0xFF	; 255
 b1e:	3a f0       	brmi	.+14     	; 0xb2e <__divsf3_pse+0x70>
 b20:	9e 3f       	cpi	r25, 0xFE	; 254
 b22:	51 05       	cpc	r21, r1
 b24:	78 f0       	brcs	.+30     	; 0xb44 <__divsf3_pse+0x86>
 b26:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 b2a:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 b2e:	5f 3f       	cpi	r21, 0xFF	; 255
 b30:	e4 f3       	brlt	.-8      	; 0xb2a <__divsf3_pse+0x6c>
 b32:	98 3e       	cpi	r25, 0xE8	; 232
 b34:	d4 f3       	brlt	.-12     	; 0xb2a <__divsf3_pse+0x6c>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b7 95       	ror	r27
 b3e:	f7 95       	ror	r31
 b40:	9f 5f       	subi	r25, 0xFF	; 255
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__divsf3_pse+0x78>
 b44:	88 0f       	add	r24, r24
 b46:	91 1d       	adc	r25, r1
 b48:	96 95       	lsr	r25
 b4a:	87 95       	ror	r24
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret
 b50:	e1 e0       	ldi	r30, 0x01	; 1
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	bb 1f       	adc	r27, r27
 b5a:	62 17       	cp	r22, r18
 b5c:	73 07       	cpc	r23, r19
 b5e:	84 07       	cpc	r24, r20
 b60:	ba 07       	cpc	r27, r26
 b62:	20 f0       	brcs	.+8      	; 0xb6c <__divsf3_pse+0xae>
 b64:	62 1b       	sub	r22, r18
 b66:	73 0b       	sbc	r23, r19
 b68:	84 0b       	sbc	r24, r20
 b6a:	ba 0b       	sbc	r27, r26
 b6c:	ee 1f       	adc	r30, r30
 b6e:	88 f7       	brcc	.-30     	; 0xb52 <__divsf3_pse+0x94>
 b70:	e0 95       	com	r30
 b72:	08 95       	ret

00000b74 <__fixsfsi>:
 b74:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fixunssfsi>
 b78:	68 94       	set
 b7a:	b1 11       	cpse	r27, r1
 b7c:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 b80:	08 95       	ret

00000b82 <__fixunssfsi>:
 b82:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_splitA>
 b86:	88 f0       	brcs	.+34     	; 0xbaa <__fixunssfsi+0x28>
 b88:	9f 57       	subi	r25, 0x7F	; 127
 b8a:	98 f0       	brcs	.+38     	; 0xbb2 <__fixunssfsi+0x30>
 b8c:	b9 2f       	mov	r27, r25
 b8e:	99 27       	eor	r25, r25
 b90:	b7 51       	subi	r27, 0x17	; 23
 b92:	b0 f0       	brcs	.+44     	; 0xbc0 <__fixunssfsi+0x3e>
 b94:	e1 f0       	breq	.+56     	; 0xbce <__fixunssfsi+0x4c>
 b96:	66 0f       	add	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	1a f0       	brmi	.+6      	; 0xba6 <__fixunssfsi+0x24>
 ba0:	ba 95       	dec	r27
 ba2:	c9 f7       	brne	.-14     	; 0xb96 <__fixunssfsi+0x14>
 ba4:	14 c0       	rjmp	.+40     	; 0xbce <__fixunssfsi+0x4c>
 ba6:	b1 30       	cpi	r27, 0x01	; 1
 ba8:	91 f0       	breq	.+36     	; 0xbce <__fixunssfsi+0x4c>
 baa:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_zero>
 bae:	b1 e0       	ldi	r27, 0x01	; 1
 bb0:	08 95       	ret
 bb2:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_zero>
 bb6:	67 2f       	mov	r22, r23
 bb8:	78 2f       	mov	r23, r24
 bba:	88 27       	eor	r24, r24
 bbc:	b8 5f       	subi	r27, 0xF8	; 248
 bbe:	39 f0       	breq	.+14     	; 0xbce <__fixunssfsi+0x4c>
 bc0:	b9 3f       	cpi	r27, 0xF9	; 249
 bc2:	cc f3       	brlt	.-14     	; 0xbb6 <__fixunssfsi+0x34>
 bc4:	86 95       	lsr	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b3 95       	inc	r27
 bcc:	d9 f7       	brne	.-10     	; 0xbc4 <__fixunssfsi+0x42>
 bce:	3e f4       	brtc	.+14     	; 0xbde <__fixunssfsi+0x5c>
 bd0:	90 95       	com	r25
 bd2:	80 95       	com	r24
 bd4:	70 95       	com	r23
 bd6:	61 95       	neg	r22
 bd8:	7f 4f       	sbci	r23, 0xFF	; 255
 bda:	8f 4f       	sbci	r24, 0xFF	; 255
 bdc:	9f 4f       	sbci	r25, 0xFF	; 255
 bde:	08 95       	ret

00000be0 <__floatunsisf>:
 be0:	e8 94       	clt
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <__floatsisf+0x12>

00000be4 <__floatsisf>:
 be4:	97 fb       	bst	r25, 7
 be6:	3e f4       	brtc	.+14     	; 0xbf6 <__floatsisf+0x12>
 be8:	90 95       	com	r25
 bea:	80 95       	com	r24
 bec:	70 95       	com	r23
 bee:	61 95       	neg	r22
 bf0:	7f 4f       	sbci	r23, 0xFF	; 255
 bf2:	8f 4f       	sbci	r24, 0xFF	; 255
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	99 23       	and	r25, r25
 bf8:	a9 f0       	breq	.+42     	; 0xc24 <__floatsisf+0x40>
 bfa:	f9 2f       	mov	r31, r25
 bfc:	96 e9       	ldi	r25, 0x96	; 150
 bfe:	bb 27       	eor	r27, r27
 c00:	93 95       	inc	r25
 c02:	f6 95       	lsr	r31
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	b7 95       	ror	r27
 c0c:	f1 11       	cpse	r31, r1
 c0e:	f8 cf       	rjmp	.-16     	; 0xc00 <__floatsisf+0x1c>
 c10:	fa f4       	brpl	.+62     	; 0xc50 <__floatsisf+0x6c>
 c12:	bb 0f       	add	r27, r27
 c14:	11 f4       	brne	.+4      	; 0xc1a <__floatsisf+0x36>
 c16:	60 ff       	sbrs	r22, 0
 c18:	1b c0       	rjmp	.+54     	; 0xc50 <__floatsisf+0x6c>
 c1a:	6f 5f       	subi	r22, 0xFF	; 255
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	8f 4f       	sbci	r24, 0xFF	; 255
 c20:	9f 4f       	sbci	r25, 0xFF	; 255
 c22:	16 c0       	rjmp	.+44     	; 0xc50 <__floatsisf+0x6c>
 c24:	88 23       	and	r24, r24
 c26:	11 f0       	breq	.+4      	; 0xc2c <__floatsisf+0x48>
 c28:	96 e9       	ldi	r25, 0x96	; 150
 c2a:	11 c0       	rjmp	.+34     	; 0xc4e <__floatsisf+0x6a>
 c2c:	77 23       	and	r23, r23
 c2e:	21 f0       	breq	.+8      	; 0xc38 <__floatsisf+0x54>
 c30:	9e e8       	ldi	r25, 0x8E	; 142
 c32:	87 2f       	mov	r24, r23
 c34:	76 2f       	mov	r23, r22
 c36:	05 c0       	rjmp	.+10     	; 0xc42 <__floatsisf+0x5e>
 c38:	66 23       	and	r22, r22
 c3a:	71 f0       	breq	.+28     	; 0xc58 <__floatsisf+0x74>
 c3c:	96 e8       	ldi	r25, 0x86	; 134
 c3e:	86 2f       	mov	r24, r22
 c40:	70 e0       	ldi	r23, 0x00	; 0
 c42:	60 e0       	ldi	r22, 0x00	; 0
 c44:	2a f0       	brmi	.+10     	; 0xc50 <__floatsisf+0x6c>
 c46:	9a 95       	dec	r25
 c48:	66 0f       	add	r22, r22
 c4a:	77 1f       	adc	r23, r23
 c4c:	88 1f       	adc	r24, r24
 c4e:	da f7       	brpl	.-10     	; 0xc46 <__floatsisf+0x62>
 c50:	88 0f       	add	r24, r24
 c52:	96 95       	lsr	r25
 c54:	87 95       	ror	r24
 c56:	97 f9       	bld	r25, 7
 c58:	08 95       	ret

00000c5a <__fp_cmp>:
 c5a:	99 0f       	add	r25, r25
 c5c:	00 08       	sbc	r0, r0
 c5e:	55 0f       	add	r21, r21
 c60:	aa 0b       	sbc	r26, r26
 c62:	e0 e8       	ldi	r30, 0x80	; 128
 c64:	fe ef       	ldi	r31, 0xFE	; 254
 c66:	16 16       	cp	r1, r22
 c68:	17 06       	cpc	r1, r23
 c6a:	e8 07       	cpc	r30, r24
 c6c:	f9 07       	cpc	r31, r25
 c6e:	c0 f0       	brcs	.+48     	; 0xca0 <__fp_cmp+0x46>
 c70:	12 16       	cp	r1, r18
 c72:	13 06       	cpc	r1, r19
 c74:	e4 07       	cpc	r30, r20
 c76:	f5 07       	cpc	r31, r21
 c78:	98 f0       	brcs	.+38     	; 0xca0 <__fp_cmp+0x46>
 c7a:	62 1b       	sub	r22, r18
 c7c:	73 0b       	sbc	r23, r19
 c7e:	84 0b       	sbc	r24, r20
 c80:	95 0b       	sbc	r25, r21
 c82:	39 f4       	brne	.+14     	; 0xc92 <__fp_cmp+0x38>
 c84:	0a 26       	eor	r0, r26
 c86:	61 f0       	breq	.+24     	; 0xca0 <__fp_cmp+0x46>
 c88:	23 2b       	or	r18, r19
 c8a:	24 2b       	or	r18, r20
 c8c:	25 2b       	or	r18, r21
 c8e:	21 f4       	brne	.+8      	; 0xc98 <__fp_cmp+0x3e>
 c90:	08 95       	ret
 c92:	0a 26       	eor	r0, r26
 c94:	09 f4       	brne	.+2      	; 0xc98 <__fp_cmp+0x3e>
 c96:	a1 40       	sbci	r26, 0x01	; 1
 c98:	a6 95       	lsr	r26
 c9a:	8f ef       	ldi	r24, 0xFF	; 255
 c9c:	81 1d       	adc	r24, r1
 c9e:	81 1d       	adc	r24, r1
 ca0:	08 95       	ret

00000ca2 <__fp_inf>:
 ca2:	97 f9       	bld	r25, 7
 ca4:	9f 67       	ori	r25, 0x7F	; 127
 ca6:	80 e8       	ldi	r24, 0x80	; 128
 ca8:	70 e0       	ldi	r23, 0x00	; 0
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	08 95       	ret

00000cae <__fp_nan>:
 cae:	9f ef       	ldi	r25, 0xFF	; 255
 cb0:	80 ec       	ldi	r24, 0xC0	; 192
 cb2:	08 95       	ret

00000cb4 <__fp_pscA>:
 cb4:	00 24       	eor	r0, r0
 cb6:	0a 94       	dec	r0
 cb8:	16 16       	cp	r1, r22
 cba:	17 06       	cpc	r1, r23
 cbc:	18 06       	cpc	r1, r24
 cbe:	09 06       	cpc	r0, r25
 cc0:	08 95       	ret

00000cc2 <__fp_pscB>:
 cc2:	00 24       	eor	r0, r0
 cc4:	0a 94       	dec	r0
 cc6:	12 16       	cp	r1, r18
 cc8:	13 06       	cpc	r1, r19
 cca:	14 06       	cpc	r1, r20
 ccc:	05 06       	cpc	r0, r21
 cce:	08 95       	ret

00000cd0 <__fp_round>:
 cd0:	09 2e       	mov	r0, r25
 cd2:	03 94       	inc	r0
 cd4:	00 0c       	add	r0, r0
 cd6:	11 f4       	brne	.+4      	; 0xcdc <__fp_round+0xc>
 cd8:	88 23       	and	r24, r24
 cda:	52 f0       	brmi	.+20     	; 0xcf0 <__fp_round+0x20>
 cdc:	bb 0f       	add	r27, r27
 cde:	40 f4       	brcc	.+16     	; 0xcf0 <__fp_round+0x20>
 ce0:	bf 2b       	or	r27, r31
 ce2:	11 f4       	brne	.+4      	; 0xce8 <__fp_round+0x18>
 ce4:	60 ff       	sbrs	r22, 0
 ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <__fp_round+0x20>
 ce8:	6f 5f       	subi	r22, 0xFF	; 255
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	08 95       	ret

00000cf2 <__fp_split3>:
 cf2:	57 fd       	sbrc	r21, 7
 cf4:	90 58       	subi	r25, 0x80	; 128
 cf6:	44 0f       	add	r20, r20
 cf8:	55 1f       	adc	r21, r21
 cfa:	59 f0       	breq	.+22     	; 0xd12 <__fp_splitA+0x10>
 cfc:	5f 3f       	cpi	r21, 0xFF	; 255
 cfe:	71 f0       	breq	.+28     	; 0xd1c <__fp_splitA+0x1a>
 d00:	47 95       	ror	r20

00000d02 <__fp_splitA>:
 d02:	88 0f       	add	r24, r24
 d04:	97 fb       	bst	r25, 7
 d06:	99 1f       	adc	r25, r25
 d08:	61 f0       	breq	.+24     	; 0xd22 <__fp_splitA+0x20>
 d0a:	9f 3f       	cpi	r25, 0xFF	; 255
 d0c:	79 f0       	breq	.+30     	; 0xd2c <__fp_splitA+0x2a>
 d0e:	87 95       	ror	r24
 d10:	08 95       	ret
 d12:	12 16       	cp	r1, r18
 d14:	13 06       	cpc	r1, r19
 d16:	14 06       	cpc	r1, r20
 d18:	55 1f       	adc	r21, r21
 d1a:	f2 cf       	rjmp	.-28     	; 0xd00 <__fp_split3+0xe>
 d1c:	46 95       	lsr	r20
 d1e:	f1 df       	rcall	.-30     	; 0xd02 <__fp_splitA>
 d20:	08 c0       	rjmp	.+16     	; 0xd32 <__fp_splitA+0x30>
 d22:	16 16       	cp	r1, r22
 d24:	17 06       	cpc	r1, r23
 d26:	18 06       	cpc	r1, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	f1 cf       	rjmp	.-30     	; 0xd0e <__fp_splitA+0xc>
 d2c:	86 95       	lsr	r24
 d2e:	71 05       	cpc	r23, r1
 d30:	61 05       	cpc	r22, r1
 d32:	08 94       	sec
 d34:	08 95       	ret

00000d36 <__fp_zero>:
 d36:	e8 94       	clt

00000d38 <__fp_szero>:
 d38:	bb 27       	eor	r27, r27
 d3a:	66 27       	eor	r22, r22
 d3c:	77 27       	eor	r23, r23
 d3e:	cb 01       	movw	r24, r22
 d40:	97 f9       	bld	r25, 7
 d42:	08 95       	ret
 d44:	16 f0       	brts	.+4      	; 0xd4a <__fp_szero+0x12>
 d46:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_mpack>
 d4a:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_nan>
 d4e:	68 94       	set
 d50:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>

00000d54 <log>:
 d54:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_splitA>
 d58:	a8 f3       	brcs	.-22     	; 0xd44 <__fp_szero+0xc>
 d5a:	99 23       	and	r25, r25
 d5c:	c1 f3       	breq	.-16     	; 0xd4e <__fp_szero+0x16>
 d5e:	ae f3       	brts	.-22     	; 0xd4a <__fp_szero+0x12>
 d60:	df 93       	push	r29
 d62:	cf 93       	push	r28
 d64:	1f 93       	push	r17
 d66:	0f 93       	push	r16
 d68:	ff 92       	push	r15
 d6a:	c9 2f       	mov	r28, r25
 d6c:	dd 27       	eor	r29, r29
 d6e:	88 23       	and	r24, r24
 d70:	2a f0       	brmi	.+10     	; 0xd7c <log+0x28>
 d72:	21 97       	sbiw	r28, 0x01	; 1
 d74:	66 0f       	add	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	da f7       	brpl	.-10     	; 0xd72 <log+0x1e>
 d7c:	20 e0       	ldi	r18, 0x00	; 0
 d7e:	30 e0       	ldi	r19, 0x00	; 0
 d80:	40 e8       	ldi	r20, 0x80	; 128
 d82:	5f eb       	ldi	r21, 0xBF	; 191
 d84:	9f e3       	ldi	r25, 0x3F	; 63
 d86:	88 39       	cpi	r24, 0x98	; 152
 d88:	20 f0       	brcs	.+8      	; 0xd92 <log+0x3e>
 d8a:	80 3e       	cpi	r24, 0xE0	; 224
 d8c:	38 f0       	brcs	.+14     	; 0xd9c <log+0x48>
 d8e:	21 96       	adiw	r28, 0x01	; 1
 d90:	8f 77       	andi	r24, 0x7F	; 127
 d92:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 d96:	ec ec       	ldi	r30, 0xCC	; 204
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	04 c0       	rjmp	.+8      	; 0xda4 <log+0x50>
 d9c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
 da0:	e9 ef       	ldi	r30, 0xF9	; 249
 da2:	f0 e0       	ldi	r31, 0x00	; 0
 da4:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_powser>
 da8:	8b 01       	movw	r16, r22
 daa:	be 01       	movw	r22, r28
 dac:	ec 01       	movw	r28, r24
 dae:	fb 2e       	mov	r15, r27
 db0:	6f 57       	subi	r22, 0x7F	; 127
 db2:	71 09       	sbc	r23, r1
 db4:	75 95       	asr	r23
 db6:	77 1f       	adc	r23, r23
 db8:	88 0b       	sbc	r24, r24
 dba:	99 0b       	sbc	r25, r25
 dbc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__floatsisf>
 dc0:	28 e1       	ldi	r18, 0x18	; 24
 dc2:	32 e7       	ldi	r19, 0x72	; 114
 dc4:	41 e3       	ldi	r20, 0x31	; 49
 dc6:	5f e3       	ldi	r21, 0x3F	; 63
 dc8:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
 dcc:	af 2d       	mov	r26, r15
 dce:	98 01       	movw	r18, r16
 dd0:	ae 01       	movw	r20, r28
 dd2:	ff 90       	pop	r15
 dd4:	0f 91       	pop	r16
 dd6:	1f 91       	pop	r17
 dd8:	cf 91       	pop	r28
 dda:	df 91       	pop	r29
 ddc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
 de0:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_round>

00000de4 <__mulsf3>:
 de4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
 de8:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_round>
 dec:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_pscA>
 df0:	38 f0       	brcs	.+14     	; 0xe00 <__mulsf3+0x1c>
 df2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscB>
 df6:	20 f0       	brcs	.+8      	; 0xe00 <__mulsf3+0x1c>
 df8:	95 23       	and	r25, r21
 dfa:	11 f0       	breq	.+4      	; 0xe00 <__mulsf3+0x1c>
 dfc:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 e00:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_nan>
 e04:	11 24       	eor	r1, r1
 e06:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>

00000e0a <__mulsf3x>:
 e0a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_split3>
 e0e:	70 f3       	brcs	.-36     	; 0xdec <__mulsf3+0x8>

00000e10 <__mulsf3_pse>:
 e10:	95 9f       	mul	r25, r21
 e12:	c1 f3       	breq	.-16     	; 0xe04 <__mulsf3+0x20>
 e14:	95 0f       	add	r25, r21
 e16:	50 e0       	ldi	r21, 0x00	; 0
 e18:	55 1f       	adc	r21, r21
 e1a:	62 9f       	mul	r22, r18
 e1c:	f0 01       	movw	r30, r0
 e1e:	72 9f       	mul	r23, r18
 e20:	bb 27       	eor	r27, r27
 e22:	f0 0d       	add	r31, r0
 e24:	b1 1d       	adc	r27, r1
 e26:	63 9f       	mul	r22, r19
 e28:	aa 27       	eor	r26, r26
 e2a:	f0 0d       	add	r31, r0
 e2c:	b1 1d       	adc	r27, r1
 e2e:	aa 1f       	adc	r26, r26
 e30:	64 9f       	mul	r22, r20
 e32:	66 27       	eor	r22, r22
 e34:	b0 0d       	add	r27, r0
 e36:	a1 1d       	adc	r26, r1
 e38:	66 1f       	adc	r22, r22
 e3a:	82 9f       	mul	r24, r18
 e3c:	22 27       	eor	r18, r18
 e3e:	b0 0d       	add	r27, r0
 e40:	a1 1d       	adc	r26, r1
 e42:	62 1f       	adc	r22, r18
 e44:	73 9f       	mul	r23, r19
 e46:	b0 0d       	add	r27, r0
 e48:	a1 1d       	adc	r26, r1
 e4a:	62 1f       	adc	r22, r18
 e4c:	83 9f       	mul	r24, r19
 e4e:	a0 0d       	add	r26, r0
 e50:	61 1d       	adc	r22, r1
 e52:	22 1f       	adc	r18, r18
 e54:	74 9f       	mul	r23, r20
 e56:	33 27       	eor	r19, r19
 e58:	a0 0d       	add	r26, r0
 e5a:	61 1d       	adc	r22, r1
 e5c:	23 1f       	adc	r18, r19
 e5e:	84 9f       	mul	r24, r20
 e60:	60 0d       	add	r22, r0
 e62:	21 1d       	adc	r18, r1
 e64:	82 2f       	mov	r24, r18
 e66:	76 2f       	mov	r23, r22
 e68:	6a 2f       	mov	r22, r26
 e6a:	11 24       	eor	r1, r1
 e6c:	9f 57       	subi	r25, 0x7F	; 127
 e6e:	50 40       	sbci	r21, 0x00	; 0
 e70:	9a f0       	brmi	.+38     	; 0xe98 <__mulsf3_pse+0x88>
 e72:	f1 f0       	breq	.+60     	; 0xeb0 <__mulsf3_pse+0xa0>
 e74:	88 23       	and	r24, r24
 e76:	4a f0       	brmi	.+18     	; 0xe8a <__mulsf3_pse+0x7a>
 e78:	ee 0f       	add	r30, r30
 e7a:	ff 1f       	adc	r31, r31
 e7c:	bb 1f       	adc	r27, r27
 e7e:	66 1f       	adc	r22, r22
 e80:	77 1f       	adc	r23, r23
 e82:	88 1f       	adc	r24, r24
 e84:	91 50       	subi	r25, 0x01	; 1
 e86:	50 40       	sbci	r21, 0x00	; 0
 e88:	a9 f7       	brne	.-22     	; 0xe74 <__mulsf3_pse+0x64>
 e8a:	9e 3f       	cpi	r25, 0xFE	; 254
 e8c:	51 05       	cpc	r21, r1
 e8e:	80 f0       	brcs	.+32     	; 0xeb0 <__mulsf3_pse+0xa0>
 e90:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 e94:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 e98:	5f 3f       	cpi	r21, 0xFF	; 255
 e9a:	e4 f3       	brlt	.-8      	; 0xe94 <__mulsf3_pse+0x84>
 e9c:	98 3e       	cpi	r25, 0xE8	; 232
 e9e:	d4 f3       	brlt	.-12     	; 0xe94 <__mulsf3_pse+0x84>
 ea0:	86 95       	lsr	r24
 ea2:	77 95       	ror	r23
 ea4:	67 95       	ror	r22
 ea6:	b7 95       	ror	r27
 ea8:	f7 95       	ror	r31
 eaa:	e7 95       	ror	r30
 eac:	9f 5f       	subi	r25, 0xFF	; 255
 eae:	c1 f7       	brne	.-16     	; 0xea0 <__mulsf3_pse+0x90>
 eb0:	fe 2b       	or	r31, r30
 eb2:	88 0f       	add	r24, r24
 eb4:	91 1d       	adc	r25, r1
 eb6:	96 95       	lsr	r25
 eb8:	87 95       	ror	r24
 eba:	97 f9       	bld	r25, 7
 ebc:	08 95       	ret

00000ebe <__fp_mpack>:
 ebe:	9f 3f       	cpi	r25, 0xFF	; 255
 ec0:	31 f0       	breq	.+12     	; 0xece <__fp_mpack_finite+0xc>

00000ec2 <__fp_mpack_finite>:
 ec2:	91 50       	subi	r25, 0x01	; 1
 ec4:	20 f4       	brcc	.+8      	; 0xece <__fp_mpack_finite+0xc>
 ec6:	87 95       	ror	r24
 ec8:	77 95       	ror	r23
 eca:	67 95       	ror	r22
 ecc:	b7 95       	ror	r27
 ece:	88 0f       	add	r24, r24
 ed0:	91 1d       	adc	r25, r1
 ed2:	96 95       	lsr	r25
 ed4:	87 95       	ror	r24
 ed6:	97 f9       	bld	r25, 7
 ed8:	08 95       	ret

00000eda <__fp_powser>:
 eda:	df 93       	push	r29
 edc:	cf 93       	push	r28
 ede:	1f 93       	push	r17
 ee0:	0f 93       	push	r16
 ee2:	ff 92       	push	r15
 ee4:	ef 92       	push	r14
 ee6:	df 92       	push	r13
 ee8:	7b 01       	movw	r14, r22
 eea:	8c 01       	movw	r16, r24
 eec:	68 94       	set
 eee:	06 c0       	rjmp	.+12     	; 0xefc <__fp_powser+0x22>
 ef0:	da 2e       	mov	r13, r26
 ef2:	ef 01       	movw	r28, r30
 ef4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
 ef8:	fe 01       	movw	r30, r28
 efa:	e8 94       	clt
 efc:	a5 91       	lpm	r26, Z+
 efe:	25 91       	lpm	r18, Z+
 f00:	35 91       	lpm	r19, Z+
 f02:	45 91       	lpm	r20, Z+
 f04:	55 91       	lpm	r21, Z+
 f06:	a6 f3       	brts	.-24     	; 0xef0 <__fp_powser+0x16>
 f08:	ef 01       	movw	r28, r30
 f0a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
 f0e:	fe 01       	movw	r30, r28
 f10:	97 01       	movw	r18, r14
 f12:	a8 01       	movw	r20, r16
 f14:	da 94       	dec	r13
 f16:	69 f7       	brne	.-38     	; 0xef2 <__fp_powser+0x18>
 f18:	df 90       	pop	r13
 f1a:	ef 90       	pop	r14
 f1c:	ff 90       	pop	r15
 f1e:	0f 91       	pop	r16
 f20:	1f 91       	pop	r17
 f22:	cf 91       	pop	r28
 f24:	df 91       	pop	r29
 f26:	08 95       	ret

00000f28 <__divmodhi4>:
 f28:	97 fb       	bst	r25, 7
 f2a:	07 2e       	mov	r0, r23
 f2c:	16 f4       	brtc	.+4      	; 0xf32 <__divmodhi4+0xa>
 f2e:	00 94       	com	r0
 f30:	07 d0       	rcall	.+14     	; 0xf40 <__divmodhi4_neg1>
 f32:	77 fd       	sbrc	r23, 7
 f34:	09 d0       	rcall	.+18     	; 0xf48 <__divmodhi4_neg2>
 f36:	0e 94 a8 07 	call	0xf50	; 0xf50 <__udivmodhi4>
 f3a:	07 fc       	sbrc	r0, 7
 f3c:	05 d0       	rcall	.+10     	; 0xf48 <__divmodhi4_neg2>
 f3e:	3e f4       	brtc	.+14     	; 0xf4e <__divmodhi4_exit>

00000f40 <__divmodhi4_neg1>:
 f40:	90 95       	com	r25
 f42:	81 95       	neg	r24
 f44:	9f 4f       	sbci	r25, 0xFF	; 255
 f46:	08 95       	ret

00000f48 <__divmodhi4_neg2>:
 f48:	70 95       	com	r23
 f4a:	61 95       	neg	r22
 f4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000f4e <__divmodhi4_exit>:
 f4e:	08 95       	ret

00000f50 <__udivmodhi4>:
 f50:	aa 1b       	sub	r26, r26
 f52:	bb 1b       	sub	r27, r27
 f54:	51 e1       	ldi	r21, 0x11	; 17
 f56:	07 c0       	rjmp	.+14     	; 0xf66 <__udivmodhi4_ep>

00000f58 <__udivmodhi4_loop>:
 f58:	aa 1f       	adc	r26, r26
 f5a:	bb 1f       	adc	r27, r27
 f5c:	a6 17       	cp	r26, r22
 f5e:	b7 07       	cpc	r27, r23
 f60:	10 f0       	brcs	.+4      	; 0xf66 <__udivmodhi4_ep>
 f62:	a6 1b       	sub	r26, r22
 f64:	b7 0b       	sbc	r27, r23

00000f66 <__udivmodhi4_ep>:
 f66:	88 1f       	adc	r24, r24
 f68:	99 1f       	adc	r25, r25
 f6a:	5a 95       	dec	r21
 f6c:	a9 f7       	brne	.-22     	; 0xf58 <__udivmodhi4_loop>
 f6e:	80 95       	com	r24
 f70:	90 95       	com	r25
 f72:	bc 01       	movw	r22, r24
 f74:	cd 01       	movw	r24, r26
 f76:	08 95       	ret

00000f78 <__itoa_ncheck>:
 f78:	bb 27       	eor	r27, r27
 f7a:	4a 30       	cpi	r20, 0x0A	; 10
 f7c:	31 f4       	brne	.+12     	; 0xf8a <__itoa_ncheck+0x12>
 f7e:	99 23       	and	r25, r25
 f80:	22 f4       	brpl	.+8      	; 0xf8a <__itoa_ncheck+0x12>
 f82:	bd e2       	ldi	r27, 0x2D	; 45
 f84:	90 95       	com	r25
 f86:	81 95       	neg	r24
 f88:	9f 4f       	sbci	r25, 0xFF	; 255
 f8a:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__utoa_common>

00000f8e <__utoa_ncheck>:
 f8e:	bb 27       	eor	r27, r27

00000f90 <__utoa_common>:
 f90:	fb 01       	movw	r30, r22
 f92:	55 27       	eor	r21, r21
 f94:	aa 27       	eor	r26, r26
 f96:	88 0f       	add	r24, r24
 f98:	99 1f       	adc	r25, r25
 f9a:	aa 1f       	adc	r26, r26
 f9c:	a4 17       	cp	r26, r20
 f9e:	10 f0       	brcs	.+4      	; 0xfa4 <__utoa_common+0x14>
 fa0:	a4 1b       	sub	r26, r20
 fa2:	83 95       	inc	r24
 fa4:	50 51       	subi	r21, 0x10	; 16
 fa6:	b9 f7       	brne	.-18     	; 0xf96 <__utoa_common+0x6>
 fa8:	a0 5d       	subi	r26, 0xD0	; 208
 faa:	aa 33       	cpi	r26, 0x3A	; 58
 fac:	08 f0       	brcs	.+2      	; 0xfb0 <__utoa_common+0x20>
 fae:	a9 5d       	subi	r26, 0xD9	; 217
 fb0:	a1 93       	st	Z+, r26
 fb2:	00 97       	sbiw	r24, 0x00	; 0
 fb4:	79 f7       	brne	.-34     	; 0xf94 <__utoa_common+0x4>
 fb6:	b1 11       	cpse	r27, r1
 fb8:	b1 93       	st	Z+, r27
 fba:	11 92       	st	Z+, r1
 fbc:	cb 01       	movw	r24, r22
 fbe:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <strrev>

00000fc2 <strrev>:
 fc2:	dc 01       	movw	r26, r24
 fc4:	fc 01       	movw	r30, r24
 fc6:	67 2f       	mov	r22, r23
 fc8:	71 91       	ld	r23, Z+
 fca:	77 23       	and	r23, r23
 fcc:	e1 f7       	brne	.-8      	; 0xfc6 <strrev+0x4>
 fce:	32 97       	sbiw	r30, 0x02	; 2
 fd0:	04 c0       	rjmp	.+8      	; 0xfda <strrev+0x18>
 fd2:	7c 91       	ld	r23, X
 fd4:	6d 93       	st	X+, r22
 fd6:	70 83       	st	Z, r23
 fd8:	62 91       	ld	r22, -Z
 fda:	ae 17       	cp	r26, r30
 fdc:	bf 07       	cpc	r27, r31
 fde:	c8 f3       	brcs	.-14     	; 0xfd2 <strrev+0x10>
 fe0:	08 95       	ret

00000fe2 <_exit>:
 fe2:	f8 94       	cli

00000fe4 <__stop_program>:
 fe4:	ff cf       	rjmp	.-2      	; 0xfe4 <__stop_program>
