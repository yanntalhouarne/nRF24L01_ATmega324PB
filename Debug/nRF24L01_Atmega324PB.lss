
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800192  00800192  000006ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002633  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001035  00000000  00000000  00002f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001275  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00005234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c6  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c9d  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 ec       	ldi	r30, 0xC6	; 198
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 39       	cpi	r26, 0x92	; 146
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a2 e9       	ldi	r26, 0x92	; 146
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a3 39       	cpi	r26, 0x93	; 147
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 102:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output 
 10a:	20 9a       	sbi	0x04, 0	; 4
 10c:	08 95       	ret

0000010e <main>:

uint8_t status = 0;

int main(void)
{
	setup_gpios();
 10e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 118:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi1_master_initialize>
	mirf_init();
 11c:	0e 94 66 01 	call	0x2cc	; 0x2cc <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	38 e3       	ldi	r19, 0x38	; 56
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x22>
 130:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 132:	95 b1       	in	r25, 0x05	; 5
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 27       	eor	r25, r24
 138:	95 b9       	out	0x05, r25	; 5
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	e0 e7       	ldi	r30, 0x70	; 112
 13e:	f2 e0       	ldi	r31, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	e0 40       	sbci	r30, 0x00	; 0
 144:	f0 40       	sbci	r31, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	98 27       	eor	r25, r24
 150:	95 b9       	out	0x05, r25	; 5
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	30 e7       	ldi	r19, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x54>
 162:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 164:	95 b1       	in	r25, 0x05	; 5
 166:	98 27       	eor	r25, r24
 168:	95 b9       	out	0x05, r25	; 5
 16a:	ef ef       	ldi	r30, 0xFF	; 255
 16c:	f0 e7       	ldi	r31, 0x70	; 112
 16e:	22 e0       	ldi	r18, 0x02	; 2
 170:	e1 50       	subi	r30, 0x01	; 1
 172:	f0 40       	sbci	r31, 0x00	; 0
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x62>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x6c>
 17a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	98 27       	eor	r25, r24
 180:	95 b9       	out	0x05, r25	; 5
 182:	3f ef       	ldi	r19, 0xFF	; 255
 184:	90 e7       	ldi	r25, 0x70	; 112
 186:	e2 e0       	ldi	r30, 0x02	; 2
 188:	31 50       	subi	r19, 0x01	; 1
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e0 40       	sbci	r30, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 194:	95 b1       	in	r25, 0x05	; 5
 196:	98 27       	eor	r25, r24
 198:	95 b9       	out	0x05, r25	; 5
 19a:	ff ef       	ldi	r31, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	f1 50       	subi	r31, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x92>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x9c>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	98 27       	eor	r25, r24
 1b0:	95 b9       	out	0x05, r25	; 5
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	e0 e7       	ldi	r30, 0x70	; 112
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	e0 40       	sbci	r30, 0x00	; 0
 1bc:	f0 40       	sbci	r31, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xaa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb4>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	98 27       	eor	r25, r24
 1c8:	95 b9       	out	0x05, r25	; 5
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	30 e7       	ldi	r19, 0x70	; 112
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xc2>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xcc>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	89 27       	eor	r24, r25
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	ef ef       	ldi	r30, 0xFF	; 255
 1e4:	f9 e6       	ldi	r31, 0x69	; 105
 1e6:	28 e1       	ldi	r18, 0x18	; 24
 1e8:	e1 50       	subi	r30, 0x01	; 1
 1ea:	f0 40       	sbci	r31, 0x00	; 0
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xda>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xe4>
 1f2:	00 00       	nop
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 1f4:	78 94       	sei
	
	mirf_config();
 1f6:	0e 94 a5 01 	call	0x34a	; 0x34a <mirf_config>

	println_0("nRF24L01 initialized...;");
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>
 202:	8f e1       	ldi	r24, 0x1F	; 31
 204:	9e e4       	ldi	r25, 0x4E	; 78
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xf8>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xfe>
 20c:	00 00       	nop
		_delay_us(10);
			
		println_0("Waiting for echo...;");
		while(!mirf_data_ready()) // wait for the receiver to echo the data sent
		{
			TOGGLE_LED;	// toggle LED while waiting
 20e:	c1 e0       	ldi	r28, 0x01	; 1
	println_0("nRF24L01 initialized...;");
	_delay_ms(10);

    while (1) 
    {
		println_0("Sending data...;");
 210:	89 e2       	ldi	r24, 0x29	; 41
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>
 218:	ef ec       	ldi	r30, 0xCF	; 207
 21a:	f7 e0       	ldi	r31, 0x07	; 7
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x10e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x114>
 222:	00 00       	nop
		_delay_ms(1);
		mirf_send(buffer, mirf_PAYLOAD);
 224:	60 e1       	ldi	r22, 0x10	; 16
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 c9 01 	call	0x392	; 0x392 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	fa e1       	ldi	r31, 0x1A	; 26
 230:	fa 95       	dec	r31
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x122>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x128>
		_delay_us(10);
		while (!mirf_data_sent());
 236:	0e 94 81 01 	call	0x302	; 0x302 <mirf_data_sent>
 23a:	88 23       	and	r24, r24
 23c:	e1 f3       	breq	.-8      	; 0x236 <main+0x128>
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 23e:	60 e3       	ldi	r22, 0x30	; 48
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
		println_0("Data sent successfully.;");
 246:	8a e3       	ldi	r24, 0x3A	; 58
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>
 24e:	2a e1       	ldi	r18, 0x1A	; 26
 250:	2a 95       	dec	r18
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x142>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x148>
		_delay_us(10);
			
		println_0("Waiting for echo...;");
 256:	83 e5       	ldi	r24, 0x53	; 83
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>
		while(!mirf_data_ready()) // wait for the receiver to echo the data sent
 25e:	0c c0       	rjmp	.+24     	; 0x278 <main+0x16a>
		{
			TOGGLE_LED;	// toggle LED while waiting
 260:	85 b1       	in	r24, 0x05	; 5
 262:	8c 27       	eor	r24, r28
 264:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	80 e7       	ldi	r24, 0x70	; 112
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	31 50       	subi	r19, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x15e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x168>
 276:	00 00       	nop
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
		println_0("Data sent successfully.;");
		_delay_us(10);
			
		println_0("Waiting for echo...;");
		while(!mirf_data_ready()) // wait for the receiver to echo the data sent
 278:	0e 94 74 01 	call	0x2e8	; 0x2e8 <mirf_data_ready>
 27c:	88 23       	and	r24, r24
 27e:	81 f3       	breq	.-32     	; 0x260 <main+0x152>
		{
			TOGGLE_LED;	// toggle LED while waiting
			_delay_ms(100);
		}
		LED_ON; // turn on LED if echo has been received
 280:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(buffer); // read the data from the nRF24L01
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 b5 01 	call	0x36a	; 0x36a <mirf_get_data>
			
		print_0("Echo received: ;"); // send data to uart_0 (terminal)
 28a:	88 e6       	ldi	r24, 0x68	; 104
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 33 02 	call	0x466	; 0x466 <print_0>
		print_char_0(buffer[0]);
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	11 e0       	ldi	r17, 0x01	; 1
 296:	f8 01       	movw	r30, r16
 298:	80 81       	ld	r24, Z
 29a:	0e 94 30 02 	call	0x460	; 0x460 <print_char_0>
		print_char_0(',');
 29e:	8c e2       	ldi	r24, 0x2C	; 44
 2a0:	0e 94 30 02 	call	0x460	; 0x460 <print_char_0>
		print_char_0(' ');
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	0e 94 30 02 	call	0x460	; 0x460 <print_char_0>
		print_char_0(buffer[1]);
 2aa:	f8 01       	movw	r30, r16
 2ac:	81 81       	ldd	r24, Z+1	; 0x01
 2ae:	0e 94 30 02 	call	0x460	; 0x460 <print_char_0>
		print_char_0(NL);
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	0e 94 30 02 	call	0x460	; 0x460 <print_char_0>
 2b8:	ff ef       	ldi	r31, 0xFF	; 255
 2ba:	20 e7       	ldi	r18, 0x70	; 112
 2bc:	32 e0       	ldi	r19, 0x02	; 2
 2be:	f1 50       	subi	r31, 0x01	; 1
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	30 40       	sbci	r19, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x1b0>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x1ba>
 2c8:	00 00       	nop
 2ca:	a2 cf       	rjmp	.-188    	; 0x210 <main+0x102>

000002cc <mirf_init>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr, 5);
 2cc:	54 9a       	sbi	0x0a, 4	; 10
 2ce:	56 9a       	sbi	0x0a, 6	; 10
 2d0:	5c 98       	cbi	0x0b, 4	; 11
 2d2:	5e 9a       	sbi	0x0b, 6	; 11
 2d4:	e8 98       	cbi	0x1d, 0	; 29
 2d6:	e9 e6       	ldi	r30, 0x69	; 105
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	80 83       	st	Z, r24
 2e0:	e8 9a       	sbi	0x1d, 0	; 29
 2e2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi1_master_initialize>
 2e6:	08 95       	ret

000002e8 <mirf_data_ready>:
 2e8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 2ec:	81 11       	cpse	r24, r1
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <mirf_data_ready+0x16>
 2f0:	5e 98       	cbi	0x0b, 6	; 11
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	0e 94 8b 02 	call	0x516	; 0x516 <spi1_exchange_char>
 2f8:	5e 9a       	sbi	0x0b, 6	; 11
 2fa:	80 74       	andi	r24, 0x40	; 64
 2fc:	08 95       	ret
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret

00000302 <mirf_data_sent>:
 302:	cf 93       	push	r28
 304:	5e 98       	cbi	0x0b, 6	; 11
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	0e 94 8b 02 	call	0x516	; 0x516 <spi1_exchange_char>
 30c:	c8 2f       	mov	r28, r24
 30e:	5e 9a       	sbi	0x0b, 6	; 11
 310:	89 e7       	ldi	r24, 0x79	; 121
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>
 318:	8c 2f       	mov	r24, r28
 31a:	80 72       	andi	r24, 0x20	; 32
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <mirf_config_register>:
 320:	cf 93       	push	r28
 322:	c6 2f       	mov	r28, r22
 324:	5e 98       	cbi	0x0b, 6	; 11
 326:	8f 71       	andi	r24, 0x1F	; 31
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	0e 94 83 02 	call	0x506	; 0x506 <spi1_send_char>
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <mirf_config_register+0x10>
 334:	00 c0       	rjmp	.+0      	; 0x336 <mirf_config_register+0x16>
 336:	8c 2f       	mov	r24, r28
 338:	0e 94 83 02 	call	0x506	; 0x506 <spi1_send_char>
 33c:	5e 9a       	sbi	0x0b, 6	; 11
 33e:	82 e4       	ldi	r24, 0x42	; 66
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <mirf_config_register+0x20>
 344:	00 c0       	rjmp	.+0      	; 0x346 <mirf_config_register+0x26>
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <mirf_config>:
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
 352:	60 e1       	ldi	r22, 0x10	; 16
 354:	81 e1       	ldi	r24, 0x11	; 17
 356:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
 35a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
 35e:	6b e4       	ldi	r22, 0x4B	; 75
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
 366:	5c 9a       	sbi	0x0b, 4	; 11
 368:	08 95       	ret

0000036a <mirf_get_data>:
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
 370:	5e 98       	cbi	0x0b, 6	; 11
 372:	81 e6       	ldi	r24, 0x61	; 97
 374:	0e 94 83 02 	call	0x506	; 0x506 <spi1_send_char>
 378:	40 e1       	ldi	r20, 0x10	; 16
 37a:	be 01       	movw	r22, r28
 37c:	ce 01       	movw	r24, r28
 37e:	0e 94 ac 02 	call	0x558	; 0x558 <spi1_exchange_bytes>
 382:	5e 9a       	sbi	0x0b, 6	; 11
 384:	60 e4       	ldi	r22, 0x40	; 64
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
 39a:	16 2f       	mov	r17, r22
	while (PTX)
 39c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 3a0:	88 23       	and	r24, r24
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <mirf_send+0x22>
	{
		println_0("while(PTX)")	;	
 3a4:	86 e8       	ldi	r24, 0x86	; 134
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 56 02 	call	0x4ac	; 0x4ac <println_0>

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
	while (PTX)
 3ac:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 3b0:	81 11       	cpse	r24, r1
 3b2:	f8 cf       	rjmp	.-16     	; 0x3a4 <mirf_send+0x12>
	{
		println_0("while(PTX)")	;	
	} // Wait until last packet is send

	mirf_CE_lo;
 3b4:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 3bc:	6a e4       	ldi	r22, 0x4A	; 74
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 3c4:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 3c6:	81 ee       	ldi	r24, 0xE1	; 225
 3c8:	0e 94 83 02 	call	0x506	; 0x506 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 3cc:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	82 e4       	ldi	r24, 0x42	; 66
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <mirf_send+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <mirf_send+0x44>
	_delay_us(25);
	
	mirf_CSN_lo;                     // Pull down chip select
 3d6:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 3d8:	80 ea       	ldi	r24, 0xA0	; 160
 3da:	0e 94 83 02 	call	0x506	; 0x506 <spi1_send_char>
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <mirf_send+0x4e>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <mirf_send+0x54>
	_delay_us(25);
	spi1_send_bytes(value, len);      // Write payload
 3e6:	61 2f       	mov	r22, r17
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 95 02 	call	0x52a	; 0x52a <spi1_send_bytes>
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <mirf_send+0x5e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <mirf_send+0x64>
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select
 3f6:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 3f8:	5c 9a       	sbi	0x0b, 4	; 11
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	7f 93       	push	r23
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	af 93       	push	r26
 41e:	bf 93       	push	r27
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	//if (PTX)
	//{
		// Read MiRF status
		mirf_CSN_lo;                     // Pull down chip select
 424:	5e 98       	cbi	0x0b, 6	; 11
		status = spi1_exchange_char(NOP); // Read status register
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	0e 94 8b 02 	call	0x516	; 0x516 <spi1_exchange_char>
		mirf_CSN_hi;                     // Pull up chip select
 42c:	5e 9a       	sbi	0x0b, 6	; 11
		
		mirf_CE_lo; // Deactivate transreceiver
 42e:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP; // Power up in receiving mode
 430:	6b e4       	ldi	r22, 0x4B	; 75
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 90 01 	call	0x320	; 0x320 <mirf_config_register>
		mirf_CE_hi; // Listening for pakets
 438:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;    // Set to receiving mode
 43a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>

		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	//}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <print_char_0>:
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 460:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
 464:	08 95       	ret

00000466 <print_0>:
}


void print_0(char char_array[]) // prints to usart
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	fc 01       	movw	r30, r24
	for (int i=0; i<200 ; i++)
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
 470:	80 81       	ld	r24, Z
 472:	8a 30       	cpi	r24, 0x0A	; 10
 474:	b1 f0       	breq	.+44     	; 0x4a2 <print_0+0x3c>
 476:	8b 33       	cpi	r24, 0x3B	; 59
 478:	61 f4       	brne	.+24     	; 0x492 <print_0+0x2c>
 47a:	13 c0       	rjmp	.+38     	; 0x4a2 <print_0+0x3c>
 47c:	89 91       	ld	r24, Y+
 47e:	8a 30       	cpi	r24, 0x0A	; 10
 480:	81 f0       	breq	.+32     	; 0x4a2 <print_0+0x3c>
 482:	8b 33       	cpi	r24, 0x3B	; 59
 484:	71 f0       	breq	.+28     	; 0x4a2 <print_0+0x3c>
			break;
		usart0_send_char(char_array[i]);
 486:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
}


void print_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 48a:	0c 17       	cp	r16, r28
 48c:	1d 07       	cpc	r17, r29
 48e:	b1 f7       	brne	.-20     	; 0x47c <print_0+0x16>
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <print_0+0x3c>
 492:	8f 01       	movw	r16, r30
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 494:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
 498:	e8 01       	movw	r28, r16
 49a:	21 96       	adiw	r28, 0x01	; 1
 49c:	08 53       	subi	r16, 0x38	; 56
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	ed cf       	rjmp	.-38     	; 0x47c <print_0+0x16>
	}
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <println_0>:

void println_0(char char_array[]) // prints to usart
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	8a 30       	cpi	r24, 0x0A	; 10
 4bc:	69 f0       	breq	.+26     	; 0x4d8 <println_0+0x2c>
 4be:	8b 33       	cpi	r24, 0x3B	; 59
 4c0:	79 f4       	brne	.+30     	; 0x4e0 <println_0+0x34>
 4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <println_0+0x2c>
 4c4:	89 91       	ld	r24, Y+
 4c6:	8a 30       	cpi	r24, 0x0A	; 10
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <println_0+0x2c>
 4ca:	8b 33       	cpi	r24, 0x3B	; 59
 4cc:	29 f0       	breq	.+10     	; 0x4d8 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 4ce:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 4d2:	0c 17       	cp	r16, r28
 4d4:	1d 07       	cpc	r17, r29
 4d6:	b1 f7       	brne	.-20     	; 0x4c4 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
}
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 4e0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usart0_send_char>
 4e4:	e8 01       	movw	r28, r16
 4e6:	21 96       	adiw	r28, 0x01	; 1
 4e8:	08 53       	subi	r16, 0x38	; 56
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	eb cf       	rjmp	.-42     	; 0x4c4 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 4f8:	6b 9a       	sbi	0x0d, 3	; 13
 4fa:	57 9a       	sbi	0x0a, 7	; 10
 4fc:	56 9a       	sbi	0x0a, 6	; 10
 4fe:	82 e5       	ldi	r24, 0x52	; 82
 500:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 504:	08 95       	ret

00000506 <spi1_send_char>:
 506:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 50a:	ed ea       	ldi	r30, 0xAD	; 173
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	ec f7       	brge	.-6      	; 0x50e <spi1_send_char+0x8>
 514:	08 95       	ret

00000516 <spi1_exchange_char>:
 516:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 51a:	ed ea       	ldi	r30, 0xAD	; 173
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	88 23       	and	r24, r24
 522:	ec f7       	brge	.-6      	; 0x51e <spi1_exchange_char+0x8>
 524:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 528:	08 95       	ret

0000052a <spi1_send_bytes>:
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	66 23       	and	r22, r22
 530:	81 f0       	breq	.+32     	; 0x552 <spi1_send_bytes+0x28>
 532:	dc 01       	movw	r26, r24
 534:	9c 01       	movw	r18, r24
 536:	26 0f       	add	r18, r22
 538:	31 1d       	adc	r19, r1
 53a:	ce ea       	ldi	r28, 0xAE	; 174
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	ed ea       	ldi	r30, 0xAD	; 173
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	9d 91       	ld	r25, X+
 544:	98 83       	st	Y, r25
 546:	90 81       	ld	r25, Z
 548:	99 23       	and	r25, r25
 54a:	ec f7       	brge	.-6      	; 0x546 <spi1_send_bytes+0x1c>
 54c:	a2 17       	cp	r26, r18
 54e:	b3 07       	cpc	r27, r19
 550:	c1 f7       	brne	.-16     	; 0x542 <spi1_send_bytes+0x18>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 560:	44 23       	and	r20, r20
 562:	c9 f0       	breq	.+50     	; 0x596 <spi1_exchange_bytes+0x3e>
 564:	dc 01       	movw	r26, r24
 566:	06 2f       	mov	r16, r22
 568:	17 2f       	mov	r17, r23
 56a:	9c 01       	movw	r18, r24
 56c:	24 0f       	add	r18, r20
 56e:	31 1d       	adc	r19, r1
 570:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 572:	2e ea       	ldi	r18, 0xAE	; 174
 574:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 576:	ed ea       	ldi	r30, 0xAD	; 173
 578:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 57a:	9d 91       	ld	r25, X+
 57c:	e9 01       	movw	r28, r18
 57e:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 580:	90 81       	ld	r25, Z
 582:	99 23       	and	r25, r25
 584:	ec f7       	brge	.-6      	; 0x580 <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 586:	e9 01       	movw	r28, r18
 588:	98 81       	ld	r25, Y
 58a:	e8 01       	movw	r28, r16
 58c:	99 93       	st	Y+, r25
 58e:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 590:	a4 17       	cp	r26, r20
 592:	b5 07       	cpc	r27, r21
 594:	91 f7       	brne	.-28     	; 0x57a <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 5a0:	e0 ec       	ldi	r30, 0xC0	; 192
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	90 81       	ld	r25, Z
 5a6:	95 ff       	sbrs	r25, 5
 5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <usart0_send_char+0x4>
 5aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5ae:	08 95       	ret

000005b0 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 5b0:	98 e9       	ldi	r25, 0x98	; 152
 5b2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 5b6:	96 e0       	ldi	r25, 0x06	; 6
 5b8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 5bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
