
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800168  00800168  00000630  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002287  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f72  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001150  00000000  00000000  00003a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00004bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a8  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a3d  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00007435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e3       	ldi	r30, 0x34	; 52
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 36       	cpi	r26, 0x68	; 104
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e6       	ldi	r26, 0x68	; 104
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 3a       	cpi	r26, 0xAB	; 171
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 102:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output 
 10a:	20 9a       	sbi	0x04, 0	; 4
 10c:	08 95       	ret

0000010e <main>:

uint8_t status = 0;

int main(void)
{
	setup_gpios();
 10e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_9600); // for FTDI debugging (terminal)
 112:	83 e3       	ldi	r24, 0x33	; 51
 114:	0e 94 8f 02 	call	0x51e	; 0x51e <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 118:	0e 94 33 02 	call	0x466	; 0x466 <spi1_master_initialize>
	mirf_init();
 11c:	0e 94 3c 01 	call	0x278	; 0x278 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	38 e3       	ldi	r19, 0x38	; 56
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x22>
 130:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 132:	95 b1       	in	r25, 0x05	; 5
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 27       	eor	r25, r24
 138:	95 b9       	out	0x05, r25	; 5
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	20 e7       	ldi	r18, 0x70	; 112
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	98 27       	eor	r25, r24
 150:	95 b9       	out	0x05, r25	; 5
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	20 e7       	ldi	r18, 0x70	; 112
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x54>
 162:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 164:	95 b1       	in	r25, 0x05	; 5
 166:	98 27       	eor	r25, r24
 168:	95 b9       	out	0x05, r25	; 5
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	20 e7       	ldi	r18, 0x70	; 112
 16e:	32 e0       	ldi	r19, 0x02	; 2
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x62>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x6c>
 17a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	98 27       	eor	r25, r24
 180:	95 b9       	out	0x05, r25	; 5
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	20 e7       	ldi	r18, 0x70	; 112
 186:	32 e0       	ldi	r19, 0x02	; 2
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 194:	95 b1       	in	r25, 0x05	; 5
 196:	98 27       	eor	r25, r24
 198:	95 b9       	out	0x05, r25	; 5
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x92>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x9c>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	98 27       	eor	r25, r24
 1b0:	95 b9       	out	0x05, r25	; 5
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	20 e7       	ldi	r18, 0x70	; 112
 1b6:	32 e0       	ldi	r19, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xaa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb4>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	98 27       	eor	r25, r24
 1c8:	95 b9       	out	0x05, r25	; 5
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xc2>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xcc>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	89 27       	eor	r24, r25
 1e0:	85 b9       	out	0x05, r24	; 5
	
	sei(); // enable global interrupts
 1e2:	78 94       	sei
	
	mirf_config();
 1e4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mirf_config>

	println_0("nRF24L01 initialized...;");
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 0d 02 	call	0x41a	; 0x41a <println_0>
 1f0:	8f ec       	ldi	r24, 0xCF	; 207
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xe6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xec>
 1fa:	00 00       	nop
	_delay_ms(1);

	println_0("Testing comunication...;");
 1fc:	89 e1       	ldi	r24, 0x19	; 25
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 0d 02 	call	0x41a	; 0x41a <println_0>
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0xfa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x100>
 20e:	00 00       	nop
	_delay_ms(1);
	mirf_send(buffer, mirf_PAYLOAD);
 210:	60 e1       	ldi	r22, 0x10	; 16
 212:	8a e9       	ldi	r24, 0x9A	; 154
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 88 01 	call	0x310	; 0x310 <mirf_send>

	println_0("Waiting for echo...;");
 21a:	82 e3       	ldi	r24, 0x32	; 50
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 0d 02 	call	0x41a	; 0x41a <println_0>
	while(!mirf_data_ready())
 222:	0e 94 4a 01 	call	0x294	; 0x294 <mirf_data_ready>
 226:	88 23       	and	r24, r24
 228:	e1 f3       	breq	.-8      	; 0x222 <main+0x114>
		mirf_CSN_hi;                     // Pull up chip select
		print_0("status: ;");
		println_int_0(status);
		*/
	}
	mirf_get_data(buffer);
 22a:	8a e9       	ldi	r24, 0x9A	; 154
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <mirf_get_data>

	print_0("Echo received: ;");
 232:	87 e4       	ldi	r24, 0x47	; 71
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <print_0>
	print_char_0(buffer[0]);
 23a:	ca e9       	ldi	r28, 0x9A	; 154
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	88 81       	ld	r24, Y
 240:	0e 94 e7 01 	call	0x3ce	; 0x3ce <print_char_0>
	print_char_0(',');
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	0e 94 e7 01 	call	0x3ce	; 0x3ce <print_char_0>
	print_char_0(' ');
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <print_char_0>
	print_char_0(buffer[1]);
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	0e 94 e7 01 	call	0x3ce	; 0x3ce <print_char_0>
	print_char_0(NL);
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	0e 94 e7 01 	call	0x3ce	; 0x3ce <print_char_0>

	uint8_t status = 0;

    while (1) 
    {
		TOGGLE_LED;
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	89 27       	eor	r24, r25
 262:	85 b9       	out	0x05, r24	; 5
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	34 e3       	ldi	r19, 0x34	; 52
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	30 40       	sbci	r19, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x15c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x166>
 274:	00 00       	nop
 276:	f3 cf       	rjmp	.-26     	; 0x25e <main+0x150>

00000278 <mirf_init>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr, 5);
 278:	54 9a       	sbi	0x0a, 4	; 10
 27a:	56 9a       	sbi	0x0a, 6	; 10
 27c:	5c 98       	cbi	0x0b, 4	; 11
 27e:	5e 9a       	sbi	0x0b, 6	; 11
 280:	e8 98       	cbi	0x1d, 0	; 29
 282:	e9 e6       	ldi	r30, 0x69	; 105
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	80 83       	st	Z, r24
 28c:	e8 9a       	sbi	0x1d, 0	; 29
 28e:	0e 94 33 02 	call	0x466	; 0x466 <spi1_master_initialize>
 292:	08 95       	ret

00000294 <mirf_data_ready>:
 294:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <PTX>
 298:	81 11       	cpse	r24, r1
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <mirf_data_ready+0x16>
 29c:	5e 98       	cbi	0x0b, 6	; 11
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	0e 94 42 02 	call	0x484	; 0x484 <spi1_exchange_char>
 2a4:	5e 9a       	sbi	0x0b, 6	; 11
 2a6:	80 74       	andi	r24, 0x40	; 64
 2a8:	08 95       	ret
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret

000002ae <mirf_config_register>:
 2ae:	cf 93       	push	r28
 2b0:	c6 2f       	mov	r28, r22
 2b2:	5e 98       	cbi	0x0b, 6	; 11
 2b4:	8f 71       	andi	r24, 0x1F	; 31
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	0e 94 3a 02 	call	0x474	; 0x474 <spi1_send_char>
 2bc:	8c 2f       	mov	r24, r28
 2be:	0e 94 3a 02 	call	0x474	; 0x474 <spi1_send_char>
 2c2:	5e 9a       	sbi	0x0b, 6	; 11
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <mirf_config>:
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
 2d0:	60 e1       	ldi	r22, 0x10	; 16
 2d2:	81 e1       	ldi	r24, 0x11	; 17
 2d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
 2d8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <PTX>
 2dc:	6b e4       	ldi	r22, 0x4B	; 75
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
 2e4:	5c 9a       	sbi	0x0b, 4	; 11
 2e6:	08 95       	ret

000002e8 <mirf_get_data>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
 2ee:	5e 98       	cbi	0x0b, 6	; 11
 2f0:	81 e6       	ldi	r24, 0x61	; 97
 2f2:	0e 94 3a 02 	call	0x474	; 0x474 <spi1_send_char>
 2f6:	40 e1       	ldi	r20, 0x10	; 16
 2f8:	be 01       	movw	r22, r28
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <spi1_exchange_bytes>
 300:	5e 9a       	sbi	0x0b, 6	; 11
 302:	60 e4       	ldi	r22, 0x40	; 64
 304:	87 e0       	ldi	r24, 0x07	; 7
 306:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	16 2f       	mov	r17, r22
	println_0("In mirf_send();");
 31a:	88 e5       	ldi	r24, 0x58	; 88
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 0d 02 	call	0x41a	; 0x41a <println_0>

	while (PTX)
 322:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <PTX>
 326:	81 11       	cpse	r24, r1
 328:	fc cf       	rjmp	.-8      	; 0x322 <mirf_send+0x12>
	{
				
	} // Wait until last packet is send

	mirf_CE_lo;
 32a:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 332:	6a e4       	ldi	r22, 0x4A	; 74
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 33a:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 33c:	81 ee       	ldi	r24, 0xE1	; 225
 33e:	0e 94 3a 02 	call	0x474	; 0x474 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 342:	5e 9a       	sbi	0x0b, 6	; 11
	
	mirf_CSN_lo;                     // Pull down chip select
 344:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 346:	80 ea       	ldi	r24, 0xA0	; 160
 348:	0e 94 3a 02 	call	0x474	; 0x474 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 34c:	61 2f       	mov	r22, r17
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 4c 02 	call	0x498	; 0x498 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 354:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 356:	5c 9a       	sbi	0x0b, 4	; 11
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 382:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <PTX>
 386:	88 23       	and	r24, r24
 388:	89 f0       	breq	.+34     	; 0x3ac <__vector_1+0x4c>
	{

		// Read MiRF status
		mirf_CSN_lo;                     // Pull down chip select
 38a:	5e 98       	cbi	0x0b, 6	; 11
		status = spi1_exchange_char(NOP); // Read status register
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	0e 94 42 02 	call	0x484	; 0x484 <spi1_exchange_char>
		mirf_CSN_hi;                     // Pull up chip select
 392:	5e 9a       	sbi	0x0b, 6	; 11

		mirf_CE_lo; // Deactivate transreceiver
 394:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP; // Power up in receiving mode
 396:	6b e4       	ldi	r22, 0x4B	; 75
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
		mirf_CE_hi; // Listening for pakets
 39e:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;    // Set to receiving mode
 3a0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <PTX>

		// Reset status register for further interaction
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 3a4:	60 e3       	ldi	r22, 0x30	; 48
 3a6:	87 e0       	ldi	r24, 0x07	; 7
 3a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <mirf_config_register>
	}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <print_char_0>:
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 3ce:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
 3d2:	08 95       	ret

000003d4 <print_0>:
}


void print_0(char char_array[]) // prints to usart
{
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	fc 01       	movw	r30, r24
	for (int i=0; i<200 ; i++)
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
 3de:	80 81       	ld	r24, Z
 3e0:	8a 30       	cpi	r24, 0x0A	; 10
 3e2:	b1 f0       	breq	.+44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e4:	8b 33       	cpi	r24, 0x3B	; 59
 3e6:	61 f4       	brne	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ea:	89 91       	ld	r24, Y+
 3ec:	8a 30       	cpi	r24, 0x0A	; 10
 3ee:	81 f0       	breq	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f0:	8b 33       	cpi	r24, 0x3B	; 59
 3f2:	71 f0       	breq	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			break;
		usart0_send_char(char_array[i]);
 3f4:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
}


void print_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 3f8:	0c 17       	cp	r16, r28
 3fa:	1d 07       	cpc	r17, r29
 3fc:	b1 f7       	brne	.-20     	; 0x3ea <print_0+0x16>
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	8f 01       	movw	r16, r30
	{
		if ( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 402:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
 406:	e8 01       	movw	r28, r16
 408:	21 96       	adiw	r28, 0x01	; 1
 40a:	08 53       	subi	r16, 0x38	; 56
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	ed cf       	rjmp	.-38     	; 0x3ea <print_0+0x16>
	}
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <println_0>:

void println_0(char char_array[]) // prints to usart
{
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 424:	fc 01       	movw	r30, r24
 426:	80 81       	ld	r24, Z
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	69 f0       	breq	.+26     	; 0x446 <println_0+0x2c>
 42c:	8b 33       	cpi	r24, 0x3B	; 59
 42e:	79 f4       	brne	.+30     	; 0x44e <println_0+0x34>
 430:	0a c0       	rjmp	.+20     	; 0x446 <println_0+0x2c>
 432:	89 91       	ld	r24, Y+
 434:	8a 30       	cpi	r24, 0x0A	; 10
 436:	39 f0       	breq	.+14     	; 0x446 <println_0+0x2c>
 438:	8b 33       	cpi	r24, 0x3B	; 59
 43a:	29 f0       	breq	.+10     	; 0x446 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 43c:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 440:	0c 17       	cp	r16, r28
 442:	1d 07       	cpc	r17, r29
 444:	b1 f7       	brne	.-20     	; 0x432 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 446:	8a e0       	ldi	r24, 0x0A	; 10
 448:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
}
 44c:	07 c0       	rjmp	.+14     	; 0x45c <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 44e:	0e 94 87 02 	call	0x50e	; 0x50e <usart0_send_char>
 452:	e8 01       	movw	r28, r16
 454:	21 96       	adiw	r28, 0x01	; 1
 456:	08 53       	subi	r16, 0x38	; 56
 458:	1f 4f       	sbci	r17, 0xFF	; 255
 45a:	eb cf       	rjmp	.-42     	; 0x432 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 466:	6b 9a       	sbi	0x0d, 3	; 13
 468:	57 9a       	sbi	0x0a, 7	; 10
 46a:	56 9a       	sbi	0x0a, 6	; 10
 46c:	86 e5       	ldi	r24, 0x56	; 86
 46e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 472:	08 95       	ret

00000474 <spi1_send_char>:
 474:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 478:	ed ea       	ldi	r30, 0xAD	; 173
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	88 23       	and	r24, r24
 480:	ec f7       	brge	.-6      	; 0x47c <spi1_send_char+0x8>
 482:	08 95       	ret

00000484 <spi1_exchange_char>:
 484:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 488:	ed ea       	ldi	r30, 0xAD	; 173
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	88 23       	and	r24, r24
 490:	ec f7       	brge	.-6      	; 0x48c <spi1_exchange_char+0x8>
 492:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 496:	08 95       	ret

00000498 <spi1_send_bytes>:
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	66 23       	and	r22, r22
 49e:	81 f0       	breq	.+32     	; 0x4c0 <spi1_send_bytes+0x28>
 4a0:	dc 01       	movw	r26, r24
 4a2:	9c 01       	movw	r18, r24
 4a4:	26 0f       	add	r18, r22
 4a6:	31 1d       	adc	r19, r1
 4a8:	ce ea       	ldi	r28, 0xAE	; 174
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	ed ea       	ldi	r30, 0xAD	; 173
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	9d 91       	ld	r25, X+
 4b2:	98 83       	st	Y, r25
 4b4:	90 81       	ld	r25, Z
 4b6:	99 23       	and	r25, r25
 4b8:	ec f7       	brge	.-6      	; 0x4b4 <spi1_send_bytes+0x1c>
 4ba:	a2 17       	cp	r26, r18
 4bc:	b3 07       	cpc	r27, r19
 4be:	c1 f7       	brne	.-16     	; 0x4b0 <spi1_send_bytes+0x18>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 4ce:	44 23       	and	r20, r20
 4d0:	c9 f0       	breq	.+50     	; 0x504 <spi1_exchange_bytes+0x3e>
 4d2:	dc 01       	movw	r26, r24
 4d4:	06 2f       	mov	r16, r22
 4d6:	17 2f       	mov	r17, r23
 4d8:	9c 01       	movw	r18, r24
 4da:	24 0f       	add	r18, r20
 4dc:	31 1d       	adc	r19, r1
 4de:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 4e0:	2e ea       	ldi	r18, 0xAE	; 174
 4e2:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 4e4:	ed ea       	ldi	r30, 0xAD	; 173
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 4e8:	9d 91       	ld	r25, X+
 4ea:	e9 01       	movw	r28, r18
 4ec:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 4ee:	90 81       	ld	r25, Z
 4f0:	99 23       	and	r25, r25
 4f2:	ec f7       	brge	.-6      	; 0x4ee <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 4f4:	e9 01       	movw	r28, r18
 4f6:	98 81       	ld	r25, Y
 4f8:	e8 01       	movw	r28, r16
 4fa:	99 93       	st	Y+, r25
 4fc:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 4fe:	a4 17       	cp	r26, r20
 500:	b5 07       	cpc	r27, r21
 502:	91 f7       	brne	.-28     	; 0x4e8 <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 50e:	e0 ec       	ldi	r30, 0xC0	; 192
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	90 81       	ld	r25, Z
 514:	95 ff       	sbrs	r25, 5
 516:	fd cf       	rjmp	.-6      	; 0x512 <usart0_send_char+0x4>
 518:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 51c:	08 95       	ret

0000051e <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 51e:	98 e9       	ldi	r25, 0x98	; 152
 520:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 524:	96 e0       	ldi	r25, 0x06	; 6
 526:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 52a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
