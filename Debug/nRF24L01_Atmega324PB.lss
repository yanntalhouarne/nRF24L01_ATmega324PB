
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000124e  000012e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000124e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800120  00800120  00001302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d01  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128b  00000000  00000000  0000436d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185d  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  00006e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5b  00000000  00000000  00007668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000219a  00000000  00000000  000081c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000a35d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      80:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_32>
      84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      90:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      94:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      ac:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      bc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      cc:	08 00       	.word	0x0008	; ????
      ce:	00 00       	nop
      d0:	be 92       	st	-X, r11
      d2:	24 49       	sbci	r18, 0x94	; 148
      d4:	12 3e       	cpi	r17, 0xE2	; 226
      d6:	ab aa       	std	Y+51, r10	; 0x33
      d8:	aa 2a       	or	r10, r26
      da:	be cd       	rjmp	.-1156   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
      dc:	cc cc       	rjmp	.-1640   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
      de:	4c 3e       	cpi	r20, 0xEC	; 236
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	be ab       	std	Y+54, r27	; 0x36
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	aa 3e       	cpi	r26, 0xEA	; 234
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	bf 00       	.word	0x00bf	; ????
      f0:	00 00       	nop
      f2:	80 3f       	cpi	r24, 0xF0	; 240
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 08       	sbc	r0, r0
      fa:	41 78       	andi	r20, 0x81	; 129
      fc:	d3 bb       	out	0x13, r29	; 19
      fe:	43 87       	std	Z+11, r20	; 0x0b
     100:	d1 13       	cpse	r29, r17
     102:	3d 19       	sub	r19, r13
     104:	0e 3c       	cpi	r16, 0xCE	; 206
     106:	c3 bd       	out	0x23, r28	; 35
     108:	42 82       	std	Z+2, r4	; 0x02
     10a:	ad 2b       	or	r26, r29
     10c:	3e 68       	ori	r19, 0x8E	; 142
     10e:	ec 82       	std	Y+4, r14	; 0x04
     110:	76 be       	out	0x36, r7	; 54
     112:	d9 8f       	std	Y+25, r29	; 0x19
     114:	e1 a9       	ldd	r30, Z+49	; 0x31
     116:	3e 4c       	sbci	r19, 0xCE	; 206
     118:	80 ef       	ldi	r24, 0xF0	; 240
     11a:	ff be       	out	0x3f, r15	; 63
     11c:	01 c4       	rjmp	.+2050   	; 0x920 <__stack+0x21>
     11e:	ff 7f       	andi	r31, 0xFF	; 255
     120:	3f 00       	.word	0x003f	; ????
     122:	00 00       	nop
	...

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d8 e0       	ldi	r29, 0x08	; 8
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	ee e4       	ldi	r30, 0x4E	; 78
     13a:	f2 e1       	ldi	r31, 0x12	; 18
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
     13e:	05 90       	lpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	a0 32       	cpi	r26, 0x20	; 32
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	a0 e2       	ldi	r26, 0x20	; 32
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	ac 33       	cpi	r26, 0x3C	; 60
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	0e 94 9a 03 	call	0x734	; 0x734 <main>
     15c:	0c 94 25 09 	jmp	0x124a	; 0x124a <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <setup_adc>:
     164:	ec e7       	ldi	r30, 0x7C	; 124
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	80 83       	st	Z, r24
     16e:	ea e7       	ldi	r30, 0x7A	; 122
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	87 68       	ori	r24, 0x87	; 135
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <analog_read>:
     17a:	ec e7       	ldi	r30, 0x7C	; 124
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	90 81       	ld	r25, Z
     180:	98 7f       	andi	r25, 0xF8	; 248
     182:	87 70       	andi	r24, 0x07	; 7
     184:	89 2b       	or	r24, r25
     186:	80 83       	st	Z, r24
     188:	ea e7       	ldi	r30, 0x7A	; 122
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	80 64       	ori	r24, 0x40	; 64
     190:	80 83       	st	Z, r24
     192:	80 81       	ld	r24, Z
     194:	84 ff       	sbrs	r24, 4
     196:	fd cf       	rjmp	.-6      	; 0x192 <analog_read+0x18>
     198:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     19c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	98 2f       	mov	r25, r24
     1a4:	88 27       	eor	r24, r24
     1a6:	88 27       	eor	r24, r24
     1a8:	9f 72       	andi	r25, 0x2F	; 47
     1aa:	82 2b       	or	r24, r18
     1ac:	08 95       	ret

000001ae <analog_get_average>:
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	e6 2e       	mov	r14, r22
     1be:	f1 2c       	mov	r15, r1
     1c0:	1e 14       	cp	r1, r14
     1c2:	1f 04       	cpc	r1, r15
     1c4:	ac f4       	brge	.+42     	; 0x1f0 <analog_get_average+0x42>
     1c6:	d8 2e       	mov	r13, r24
     1c8:	c0 e0       	ldi	r28, 0x00	; 0
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	00 e0       	ldi	r16, 0x00	; 0
     1ce:	10 e0       	ldi	r17, 0x00	; 0
     1d0:	8d 2d       	mov	r24, r13
     1d2:	0e 94 bd 00 	call	0x17a	; 0x17a <analog_read>
     1d6:	08 0f       	add	r16, r24
     1d8:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	8f e9       	ldi	r24, 0x9F	; 159
     1dc:	9f e0       	ldi	r25, 0x0F	; 15
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <analog_get_average+0x30>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <analog_get_average+0x36>
     1e4:	00 00       	nop
     1e6:	21 96       	adiw	r28, 0x01	; 1
     1e8:	ce 15       	cp	r28, r14
     1ea:	df 05       	cpc	r29, r15
     1ec:	89 f7       	brne	.-30     	; 0x1d0 <analog_get_average+0x22>
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <analog_get_average+0x46>
     1f0:	00 e0       	ldi	r16, 0x00	; 0
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	c8 01       	movw	r24, r16
     1f6:	b7 01       	movw	r22, r14
     1f8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divmodhi4>
     1fc:	cb 01       	movw	r24, r22
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	ff 90       	pop	r15
     208:	ef 90       	pop	r14
     20a:	df 90       	pop	r13
     20c:	08 95       	ret

0000020e <delay_ms>:
	stop_TMR3();
}
void start_TMR3()
{
	TCNT3 = 0;
	TIMSK3 |= (1<<OCIE3A); // set interrupt on OCA compare
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	69 f0       	breq	.+26     	; 0x22c <delay_ms+0x1e>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	ef e9       	ldi	r30, 0x9F	; 159
     218:	ff e0       	ldi	r31, 0x0F	; 15
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <delay_ms+0xc>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <delay_ms+0x12>
     220:	00 00       	nop
     222:	2f 5f       	subi	r18, 0xFF	; 255
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	82 17       	cp	r24, r18
     228:	93 07       	cpc	r25, r19
     22a:	a9 f7       	brne	.-22     	; 0x216 <delay_ms+0x8>
     22c:	08 95       	ret

0000022e <flash_LED>:
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	88 23       	and	r24, r24
     23a:	71 f0       	breq	.+28     	; 0x258 <flash_LED+0x2a>
     23c:	8b 01       	movw	r16, r22
     23e:	d8 2f       	mov	r29, r24
     240:	c0 e0       	ldi	r28, 0x00	; 0
     242:	ff 24       	eor	r15, r15
     244:	f3 94       	inc	r15
     246:	98 b1       	in	r25, 0x08	; 8
     248:	9f 25       	eor	r25, r15
     24a:	98 b9       	out	0x08, r25	; 8
     24c:	c8 01       	movw	r24, r16
     24e:	0e 94 07 01 	call	0x20e	; 0x20e <delay_ms>
     252:	cf 5f       	subi	r28, 0xFF	; 255
     254:	dc 13       	cpse	r29, r28
     256:	f7 cf       	rjmp	.-18     	; 0x246 <flash_LED+0x18>
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	08 95       	ret

00000264 <setup_TMR1_pwm>:
     264:	e0 e8       	ldi	r30, 0x80	; 128
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	81 60       	ori	r24, 0x01	; 1
     26c:	80 83       	st	Z, r24
     26e:	e1 e8       	ldi	r30, 0x81	; 129
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8a 60       	ori	r24, 0x0A	; 10
     276:	80 83       	st	Z, r24
     278:	08 95       	ret

0000027a <set_TMR1A_duty_cycle>:
     27a:	80 3b       	cpi	r24, 0xB0	; 176
     27c:	91 05       	cpc	r25, r1
     27e:	14 f0       	brlt	.+4      	; 0x284 <set_TMR1A_duty_cycle+0xa>
     280:	8f ea       	ldi	r24, 0xAF	; 175
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	99 27       	eor	r25, r25
     286:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     28a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     28e:	08 95       	ret

00000290 <set_TMR1B_duty_cycle>:
     290:	80 3b       	cpi	r24, 0xB0	; 176
     292:	91 05       	cpc	r25, r1
     294:	14 f0       	brlt	.+4      	; 0x29a <set_TMR1B_duty_cycle+0xa>
     296:	8f ea       	ldi	r24, 0xAF	; 175
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	99 27       	eor	r25, r25
     29c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     2a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     2a4:	08 95       	ret

000002a6 <stop_TMR1A_pwm>:
     2a6:	e0 e8       	ldi	r30, 0x80	; 128
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 77       	andi	r24, 0x7F	; 127
     2ae:	80 83       	st	Z, r24
     2b0:	08 95       	ret

000002b2 <stop_TMR1B_pwm>:
     2b2:	e0 e8       	ldi	r30, 0x80	; 128
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	8f 7d       	andi	r24, 0xDF	; 223
     2ba:	80 83       	st	Z, r24
     2bc:	08 95       	ret

000002be <start_TMR1A_pwm>:
     2be:	e0 e8       	ldi	r30, 0x80	; 128
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	80 68       	ori	r24, 0x80	; 128
     2c6:	80 83       	st	Z, r24
     2c8:	08 95       	ret

000002ca <start_TMR1B_pwm>:
     2ca:	e0 e8       	ldi	r30, 0x80	; 128
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	80 62       	ori	r24, 0x20	; 32
     2d2:	80 83       	st	Z, r24
     2d4:	08 95       	ret

000002d6 <motor_off>:
     2d6:	29 98       	cbi	0x05, 1	; 5
     2d8:	2a 98       	cbi	0x05, 2	; 5
     2da:	08 95       	ret

000002dc <motor_on>:
     2dc:	29 9a       	sbi	0x05, 1	; 5
     2de:	2a 9a       	sbi	0x05, 2	; 5
     2e0:	08 95       	ret

000002e2 <process_mtr_cmd>:
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	c0 91 31 01 	lds	r28, 0x0131	; 0x800131 <mtr_cmd>
     2fa:	d0 91 32 01 	lds	r29, 0x0132	; 0x800132 <mtr_cmd+0x1>
     2fe:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     302:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     306:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     30a:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     30e:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <old_mtr_cmd>
     312:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     316:	07 2e       	mov	r0, r23
     318:	00 0c       	add	r0, r0
     31a:	88 0b       	sbc	r24, r24
     31c:	99 0b       	sbc	r25, r25
     31e:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     322:	4b 01       	movw	r8, r22
     324:	5c 01       	movw	r10, r24
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	80 e8       	ldi	r24, 0x80	; 128
     330:	9f e3       	ldi	r25, 0x3F	; 63
     332:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     342:	4b 01       	movw	r8, r22
     344:	5c 01       	movw	r10, r24
     346:	be 01       	movw	r22, r28
     348:	dd 0f       	add	r29, r29
     34a:	88 0b       	sbc	r24, r24
     34c:	99 0b       	sbc	r25, r25
     34e:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     352:	a7 01       	movw	r20, r14
     354:	96 01       	movw	r18, r12
     356:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     366:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     36a:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <mtr_cmd+0x1>
     36e:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <mtr_cmd>
     372:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     376:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     37a:	89 2b       	or	r24, r25
     37c:	59 f4       	brne	.+22     	; 0x394 <process_mtr_cmd+0xb2>
     37e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mtr_cmd+0x1>
     382:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mtr_cmd>
     386:	0e 94 53 01 	call	0x2a6	; 0x2a6 <stop_TMR1A_pwm>
     38a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <stop_TMR1B_pwm>
     38e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <motor_off>
     392:	02 c0       	rjmp	.+4      	; 0x398 <process_mtr_cmd+0xb6>
     394:	0e 94 6e 01 	call	0x2dc	; 0x2dc <motor_on>
     398:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     39c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     3a0:	18 16       	cp	r1, r24
     3a2:	19 06       	cpc	r1, r25
     3a4:	0c f0       	brlt	.+2      	; 0x3a8 <process_mtr_cmd+0xc6>
     3a6:	44 c0       	rjmp	.+136    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3a8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     3ac:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     3b0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <old_mtr_cmd>
     3b4:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     3b8:	82 1b       	sub	r24, r18
     3ba:	93 0b       	sbc	r25, r19
     3bc:	9c 01       	movw	r18, r24
     3be:	22 f4       	brpl	.+8      	; 0x3c8 <process_mtr_cmd+0xe6>
     3c0:	22 27       	eor	r18, r18
     3c2:	33 27       	eor	r19, r19
     3c4:	28 1b       	sub	r18, r24
     3c6:	39 0b       	sbc	r19, r25
     3c8:	2b 30       	cpi	r18, 0x0B	; 11
     3ca:	31 05       	cpc	r19, r1
     3cc:	f4 f0       	brlt	.+60     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3ce:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <mtr_cmd>
     3d2:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <mtr_cmd+0x1>
     3d6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     3da:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     3de:	82 17       	cp	r24, r18
     3e0:	93 07       	cpc	r25, r19
     3e2:	54 f4       	brge	.+20     	; 0x3f8 <process_mtr_cmd+0x116>
     3e4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     3e8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     3ec:	0a 96       	adiw	r24, 0x0a	; 10
     3ee:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     3f2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     3fc:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     400:	0a 97       	sbiw	r24, 0x0a	; 10
     402:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     406:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
     40a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     40e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     412:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <old_mtr_cmd+0x1>
     416:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <old_mtr_cmd>
     41a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <stop_TMR1B_pwm>
     41e:	0e 94 5f 01 	call	0x2be	; 0x2be <start_TMR1A_pwm>
     422:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     426:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     42a:	0e 94 3d 01 	call	0x27a	; 0x27a <set_TMR1A_duty_cycle>
     42e:	5a c0       	rjmp	.+180    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     430:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     434:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     438:	99 23       	and	r25, r25
     43a:	0c f0       	brlt	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	53 c0       	rjmp	.+166    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     43e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <stop_TMR1A_pwm>
     442:	0e 94 65 01 	call	0x2ca	; 0x2ca <start_TMR1B_pwm>
     446:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     44a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     44e:	91 95       	neg	r25
     450:	81 95       	neg	r24
     452:	91 09       	sbc	r25, r1
     454:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     458:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
     45c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     460:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     464:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <old_mtr_cmd>
     468:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     46c:	82 1b       	sub	r24, r18
     46e:	93 0b       	sbc	r25, r19
     470:	9c 01       	movw	r18, r24
     472:	22 f4       	brpl	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     474:	22 27       	eor	r18, r18
     476:	33 27       	eor	r19, r19
     478:	28 1b       	sub	r18, r24
     47a:	39 0b       	sbc	r19, r25
     47c:	2b 30       	cpi	r18, 0x0B	; 11
     47e:	31 05       	cpc	r19, r1
     480:	f4 f0       	brlt	.+60     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     482:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <mtr_cmd>
     486:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <mtr_cmd+0x1>
     48a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     48e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     492:	82 17       	cp	r24, r18
     494:	93 07       	cpc	r25, r19
     496:	54 f4       	brge	.+20     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     498:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     49c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     4a0:	0a 96       	adiw	r24, 0x0a	; 10
     4a2:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     4a6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
     4aa:	09 c0       	rjmp	.+18     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <old_mtr_cmd>
     4b0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <old_mtr_cmd+0x1>
     4b4:	0a 97       	sbiw	r24, 0x0a	; 10
     4b6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     4ba:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
     4be:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     4c2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     4c6:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <old_mtr_cmd+0x1>
     4ca:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <old_mtr_cmd>
     4ce:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mtr_cmd>
     4d2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <mtr_cmd+0x1>
     4d6:	99 23       	and	r25, r25
     4d8:	1c f4       	brge	.+6      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4da:	91 95       	neg	r25
     4dc:	81 95       	neg	r24
     4de:	91 09       	sbc	r25, r1
     4e0:	0e 94 48 01 	call	0x290	; 0x290 <set_TMR1B_duty_cycle>
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	8f 90       	pop	r8
     4f8:	08 95       	ret

000004fa <stop_TMR3>:
}
void stop_TMR3()
{
	TIMSK3 &= ~(1<<OCIE3A);
     4fa:	e1 e7       	ldi	r30, 0x71	; 113
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	8d 7f       	andi	r24, 0xFD	; 253
     502:	80 83       	st	Z, r24
     504:	08 95       	ret

00000506 <setup_TMR3>:

//&&&&&&&&&&&&&& TMR3 for communication timeout &&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR3()
{
	TCCR3A |= (1<<COM3A1) | (1<<COM3A0); // clear OCRA on compare
     506:	e0 e9       	ldi	r30, 0x90	; 144
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	80 6c       	ori	r24, 0xC0	; 192
     50e:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS32) | (1<<CS30) | (1<<WGM32); // 1024 prescaler, CTC mode
     510:	e1 e9       	ldi	r30, 0x91	; 145
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	8d 60       	ori	r24, 0x0D	; 13
     518:	80 83       	st	Z, r24
	OCR3A = 15620; // 1s period
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	9d e3       	ldi	r25, 0x3D	; 61
     51e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     522:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TIMSK3 |= (1<<OCIE3A); // set interrupt on OCA compare
     526:	e1 e7       	ldi	r30, 0x71	; 113
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	80 83       	st	Z, r24
	
	stop_TMR3();
     530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <stop_TMR3>
     534:	08 95       	ret

00000536 <get_voltage>:
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
float get_voltage()
{
	float _voltage = 0;
	// get analog reading
	_voltage = analog_get_average(VOLTAGE_SENSOR, 1);
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
     53e:	bc 01       	movw	r22, r24
     540:	99 0f       	add	r25, r25
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
	// convert to volts
	_voltage *= VREF;
     54a:	2c e5       	ldi	r18, 0x5C	; 92
     54c:	3f e8       	ldi	r19, 0x8F	; 143
     54e:	42 ea       	ldi	r20, 0xA2	; 162
     550:	50 e4       	ldi	r21, 0x40	; 64
     552:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
	_voltage /= 1023; 
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 ec       	ldi	r19, 0xC0	; 192
     55a:	4f e7       	ldi	r20, 0x7F	; 127
     55c:	54 e4       	ldi	r21, 0x44	; 68
     55e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	// voltage divider scaling factor
	_voltage *= 112.7;
     562:	26 e6       	ldi	r18, 0x66	; 102
     564:	36 e6       	ldi	r19, 0x66	; 102
     566:	41 ee       	ldi	r20, 0xE1	; 225
     568:	52 e4       	ldi	r21, 0x42	; 66
     56a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
	_voltage /= 11.6; 
	
	return _voltage;
     56e:	2a e9       	ldi	r18, 0x9A	; 154
     570:	39 e9       	ldi	r19, 0x99	; 153
     572:	49 e3       	ldi	r20, 0x39	; 57
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
}
     57a:	08 95       	ret

0000057c <get_current>:
float get_current()
{
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
	float _current = 0;
	// get analog reading
	_current = analog_get_average(CURRENT_SENSOR, 1);
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
     58c:	bc 01       	movw	r22, r24
     58e:	99 0f       	add	r25, r25
     590:	88 0b       	sbc	r24, r24
     592:	99 0b       	sbc	r25, r25
     594:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
	// convert to mV
	_current *= VREF*1000;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 ec       	ldi	r19, 0xC0	; 192
     59c:	4e e9       	ldi	r20, 0x9E	; 158
     59e:	55 e4       	ldi	r21, 0x45	; 69
     5a0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
	_current /=  1023; 
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 ec       	ldi	r19, 0xC0	; 192
     5a8:	4f e7       	ldi	r20, 0x7F	; 127
     5aa:	54 e4       	ldi	r21, 0x44	; 68
     5ac:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	_current -= 444; // 0A offset
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	4e ed       	ldi	r20, 0xDE	; 222
     5b6:	53 e4       	ldi	r21, 0x43	; 67
     5b8:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
	_current /= 400; // 400mV per 1A
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	48 ec       	ldi	r20, 0xC8	; 200
     5c2:	53 e4       	ldi	r21, 0x43	; 67
     5c4:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
	if (_current < 0)
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	a9 01       	movw	r20, r18
     5d2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__cmpsf2>
     5d6:	88 23       	and	r24, r24
     5d8:	1c f4       	brge	.+6      	; 0x5e0 <get_current+0x64>
		_current = 0; // cannot be negative
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	76 01       	movw	r14, r12
		
	return _current;	
}
     5e0:	c7 01       	movw	r24, r14
     5e2:	b6 01       	movw	r22, r12
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <get_temperature>:
float get_temperature()
{
	float _temperature = 0;
	
	_temperature = analog_get_average(TEMP_SENSOR, 1);
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <analog_get_average>
	_temperature = 1023 / _temperature - 1;
     5f6:	bc 01       	movw	r22, r24
     5f8:	99 0f       	add	r25, r25
     5fa:	88 0b       	sbc	r24, r24
     5fc:	99 0b       	sbc	r25, r25
     5fe:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 ec       	ldi	r23, 0xC0	; 192
     60a:	8f e7       	ldi	r24, 0x7F	; 127
     60c:	94 e4       	ldi	r25, 0x44	; 68
     60e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	5f e3       	ldi	r21, 0x3F	; 63
     61a:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
	_temperature = SERIESRESISTOR / _temperature;
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e4       	ldi	r23, 0x40	; 64
     626:	8c e1       	ldi	r24, 0x1C	; 28
     628:	96 e4       	ldi	r25, 0x46	; 70
     62a:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	_temperature = _temperature / THERMISTORNOMINAL;     // (R/Ro)
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e4       	ldi	r19, 0x40	; 64
     632:	4c e1       	ldi	r20, 0x1C	; 28
     634:	56 e4       	ldi	r21, 0x46	; 70
     636:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	_temperature = log(_temperature);                  // ln(R/Ro)
     63a:	0e 94 13 08 	call	0x1026	; 0x1026 <log>
	_temperature /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 ed       	ldi	r19, 0xD0	; 208
     642:	44 e8       	ldi	r20, 0x84	; 132
     644:	55 e4       	ldi	r21, 0x45	; 69
     646:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	_temperature += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
     64a:	2f e0       	ldi	r18, 0x0F	; 15
     64c:	3f ec       	ldi	r19, 0xCF	; 207
     64e:	4b e5       	ldi	r20, 0x5B	; 91
     650:	5b e3       	ldi	r21, 0x3B	; 59
     652:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
	_temperature = 1.0 / _temperature;                 // Invert
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e8       	ldi	r24, 0x80	; 128
     660:	9f e3       	ldi	r25, 0x3F	; 63
     662:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divsf3>
	_temperature -= 273.15;                         // convert to C
	
	return _temperature;
     666:	23 e3       	ldi	r18, 0x33	; 51
     668:	33 e9       	ldi	r19, 0x93	; 147
     66a:	48 e8       	ldi	r20, 0x88	; 136
     66c:	53 e4       	ldi	r21, 0x43	; 67
     66e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
}
     672:	08 95       	ret

00000674 <move_servo>:
	TCCR0B |=  (1 << CS02) | (1 << CS00); // prescaler of 1024
	move_servo(0);

}
void move_servo(float angle)
{
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
	if (angle < -42)
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	48 e2       	ldi	r20, 0x28	; 40
     686:	52 ec       	ldi	r21, 0xC2	; 194
     688:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__cmpsf2>
     68c:	88 23       	and	r24, r24
     68e:	9c f0       	brlt	.+38     	; 0x6b6 <move_servo+0x42>
	{
		angle = -42;
	}
	else if (angle > 45)
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	44 e3       	ldi	r20, 0x34	; 52
     696:	52 e4       	ldi	r21, 0x42	; 66
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 06 08 	call	0x100c	; 0x100c <__gesf2>
     6a0:	18 16       	cp	r1, r24
     6a2:	8c f4       	brge	.+34     	; 0x6c6 <move_servo+0x52>
	{
		angle = 45;
     6a4:	0f 2e       	mov	r0, r31
     6a6:	c1 2c       	mov	r12, r1
     6a8:	d1 2c       	mov	r13, r1
     6aa:	f4 e3       	ldi	r31, 0x34	; 52
     6ac:	ef 2e       	mov	r14, r31
     6ae:	f2 e4       	ldi	r31, 0x42	; 66
     6b0:	ff 2e       	mov	r15, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <move_servo+0x52>
}
void move_servo(float angle)
{
	if (angle < -42)
	{
		angle = -42;
     6b6:	0f 2e       	mov	r0, r31
     6b8:	c1 2c       	mov	r12, r1
     6ba:	d1 2c       	mov	r13, r1
     6bc:	f8 e2       	ldi	r31, 0x28	; 40
     6be:	ef 2e       	mov	r14, r31
     6c0:	f2 ec       	ldi	r31, 0xC2	; 194
     6c2:	ff 2e       	mov	r15, r31
     6c4:	f0 2d       	mov	r31, r0
	}
	else if (angle > 45)
	{
		angle = 45;
	}
	angle = 23 + angle*.0889;
     6c6:	24 e3       	ldi	r18, 0x34	; 52
     6c8:	31 e1       	ldi	r19, 0x11	; 17
     6ca:	46 eb       	ldi	r20, 0xB6	; 182
     6cc:	5d e3       	ldi	r21, 0x3D	; 61
     6ce:	c7 01       	movw	r24, r14
     6d0:	b6 01       	movw	r22, r12
     6d2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
	OCR0A = (uint8_t)angle;
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	48 eb       	ldi	r20, 0xB8	; 184
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     6e2:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fixunssfsi>
     6e6:	67 bd       	out	0x27, r22	; 39
}
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	08 95       	ret

000006f2 <setup_gpios>:
//&&&&&&&&&&&&&&&&&&&&&& FUNCTIONS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	// set LED pins as output
	LED_DDR |= (1<<LED_PIN);
     6f2:	38 9a       	sbi	0x07, 0	; 7
	RED_LED_DDR |= (1<<RED_LED_PIN); 
     6f4:	39 9a       	sbi	0x07, 1	; 7
	BLUE_LED_DDR |= (1<<BLUE_LED_PIN);
     6f6:	3b 9a       	sbi	0x07, 3	; 7
	ORANGE_LED_DDR |= (1<<ORANGE_LED_PIN);
     6f8:	3d 9a       	sbi	0x07, 5	; 7
	
	// turn off LEDs initially
	LED_OFF;	 // misc. LED, toggles every time we go through the main loop
     6fa:	40 98       	cbi	0x08, 0	; 8
	RED_LED_OFF; // ON when RX timeout (false_cmd = 1) or TX  timeout (max_rt_count = 1), \
     6fc:	41 98       	cbi	0x08, 1	; 8
	turned OFF at every start of the main loop
	BLUE_LED_OFF; // toggles everytime we successfully receive data (false_cmd == 0)
     6fe:	43 98       	cbi	0x08, 3	; 8
	ORANGE_LED_OFF; // ON when TX timeout occurs (max_RT = 1)
     700:	45 98       	cbi	0x08, 5	; 8
	
	IN1_DDR |= (1<<IN1);
     702:	55 9a       	sbi	0x0a, 5	; 10
	IN2_DDR |= (1<<IN2);
     704:	54 9a       	sbi	0x0a, 4	; 10
	EN1_DDR |= (1<<EN1);
     706:	21 9a       	sbi	0x04, 1	; 4
	EN2_DDR |= (1<<EN2);
     708:	22 9a       	sbi	0x04, 2	; 4
	
	SERVO_PWM_DDR |= (1<<SERVO_PWM_PIN);	
     70a:	23 9a       	sbi	0x04, 3	; 4
	
	move_servo(0);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	cb 01       	movw	r24, r22
     712:	0e 94 3a 03 	call	0x674	; 0x674 <move_servo>
	
	motor_off();
     716:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <motor_off>
     71a:	08 95       	ret

0000071c <setup_TMR0_pwm>:

//&&&&&&&&&&&&&&&&&&& SERVO MOTOR &&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_TMR0_pwm()
{
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); // fast PWM
     71c:	84 b5       	in	r24, 0x24	; 36
     71e:	83 68       	ori	r24, 0x83	; 131
     720:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS02) | (1 << CS00); // prescaler of 1024
     722:	85 b5       	in	r24, 0x25	; 37
     724:	85 60       	ori	r24, 0x05	; 5
     726:	85 bd       	out	0x25, r24	; 37
	move_servo(0);
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	cb 01       	movw	r24, r22
     72e:	0e 94 3a 03 	call	0x674	; 0x674 <move_servo>
     732:	08 95       	ret

00000734 <main>:
 //&&&&&&&&&&&&&&&&& MAIN &&&&&&&&&&&&&&&&&&&&&&&&
 //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
int main(void)
{
	/* setup pins */
	setup_gpios(); 
     734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <setup_gpios>
	
	/* USART setup */
	USART0_setup(BR_38400); // for NEO6 GPS
     738:	89 e1       	ldi	r24, 0x19	; 25
     73a:	0e 94 31 06 	call	0xc62	; 0xc62 <USART0_setup>
	
	/* nRF24L01 setup */
	SPI1_masterInit();  // setup device as master for SPI com with nRF24L01
     73e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI1_masterInit>
	nRF_init(); 							 // initialize nRF24L01
     742:	0e 94 19 05 	call	0xa32	; 0xa32 <nRF_init>
	nRF_config(); 						 // configure nRF24L01
     746:	0e 94 46 05 	call	0xa8c	; 0xa8c <nRF_config>
	nRF_RXsetAddr(rx_address);
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 95 05 	call	0xb2a	; 0xb2a <nRF_RXsetAddr>
	//nRF_TXsetAddr(tx_address);
	
	/* setup TMR3 for communication timeout */
	setup_TMR3();
     752:	0e 94 83 02 	call	0x506	; 0x506 <setup_TMR3>
	stop_TMR3();
     756:	0e 94 7d 02 	call	0x4fa	; 0x4fa <stop_TMR3>

	/* ADC for current and temperature sensor (and joystick indirect joystick mode) */
	setup_adc();
     75a:	0e 94 b2 00 	call	0x164	; 0x164 <setup_adc>

	/* DC motor setup */
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
     75e:	0e 94 32 01 	call	0x264	; 0x264 <setup_TMR1_pwm>
	motor_off();
     762:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <motor_off>
	
	/* Servo motor setup */
	setup_TMR0_pwm();
     766:	0e 94 8e 03 	call	0x71c	; 0x71c <setup_TMR0_pwm>
	
	sei(); // enable global interrupts
     76a:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
     76c:	62 e3       	ldi	r22, 0x32	; 50
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	8a e0       	ldi	r24, 0x0A	; 10
     772:	0e 94 17 01 	call	0x22e	; 0x22e <flash_LED>
	println_0("System initialized...;");
     776:	89 e0       	ldi	r24, 0x09	; 9
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 af 05 	call	0xb5e	; 0xb5e <println_0>
     77e:	8f e3       	ldi	r24, 0x3F	; 63
     780:	9c e9       	ldi	r25, 0x9C	; 156
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <main+0x4e>
     786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x54>
     788:	00 00       	nop
    while (1) // main loop
    {	
		/* enter RX mode */
		nRF_SetRxMode();
				
		TOGGLE_LED; // main loop LED
     78a:	ff 24       	eor	r15, r15
     78c:	f3 94       	inc	r15
		temperature = (int16_t)(10*get_temperature());
		temperature = .5 * temperature + .5 * old_temperature;
		old_temperature = temperature;
		
		/* load analog data into buffer */
		buffer_analog[0] = current; // LSB
     78e:	c3 e3       	ldi	r28, 0x33	; 51
     790:	d1 e0       	ldi	r29, 0x01	; 1
			
			move_servo((float)srv_cmd);
		} // end of: if (!false_cmd)
		else
		{
			TOGGLE_RED_LED;
     792:	68 94       	set
     794:	dd 24       	eor	r13, r13
     796:	d1 f8       	bld	r13, 1
		/* read RX data */
		nRF_getData(buffer, TX_PAYLOAD_LENGTH); // get the data, put it in buffer	
		
		if (!false_cmd)
		{
			TOGGLE_BLUE_LED;
     798:	68 94       	set
     79a:	ee 24       	eor	r14, r14
     79c:	e3 f8       	bld	r14, 3
	
	
    while (1) // main loop
    {	
		/* enter RX mode */
		nRF_SetRxMode();
     79e:	0e 94 3c 05 	call	0xa78	; 0xa78 <nRF_SetRxMode>
				
		TOGGLE_LED; // main loop LED
     7a2:	88 b1       	in	r24, 0x08	; 8
     7a4:	8f 25       	eor	r24, r15
     7a6:	88 b9       	out	0x08, r24	; 8
		ORANGE_LED_OFF; // unused 
     7a8:	45 98       	cbi	0x08, 5	; 8
		
		/* read battery voltage */
		voltage = (int16_t)(100*get_voltage()); // in V
     7aa:	0e 94 9b 02 	call	0x536	; 0x536 <get_voltage>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	48 ec       	ldi	r20, 0xC8	; 200
     7b4:	52 e4       	ldi	r21, 0x42	; 66
     7b6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     7ba:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     7be:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <voltage+0x1>
     7c2:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <voltage>
		voltage = .3 * voltage + .7 * old_voltage;
     7c6:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <voltage>
     7ca:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <voltage+0x1>
     7ce:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <old_voltage>
     7d2:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <old_voltage+0x1>
     7d6:	07 2e       	mov	r0, r23
     7d8:	00 0c       	add	r0, r0
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     7e2:	2a e9       	ldi	r18, 0x9A	; 154
     7e4:	39 e9       	ldi	r19, 0x99	; 153
     7e6:	49 e9       	ldi	r20, 0x99	; 153
     7e8:	5e e3       	ldi	r21, 0x3E	; 62
     7ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     7ee:	4b 01       	movw	r8, r22
     7f0:	5c 01       	movw	r10, r24
     7f2:	b8 01       	movw	r22, r16
     7f4:	11 0f       	add	r17, r17
     7f6:	88 0b       	sbc	r24, r24
     7f8:	99 0b       	sbc	r25, r25
     7fa:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     7fe:	23 e3       	ldi	r18, 0x33	; 51
     800:	33 e3       	ldi	r19, 0x33	; 51
     802:	43 e3       	ldi	r20, 0x33	; 51
     804:	5f e3       	ldi	r21, 0x3F	; 63
     806:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	c5 01       	movw	r24, r10
     810:	b4 01       	movw	r22, r8
     812:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     816:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     81a:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <voltage+0x1>
     81e:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <voltage>
		old_voltage = voltage;
     822:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <voltage>
     826:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <voltage+0x1>
     82a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <old_voltage+0x1>
     82e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <old_voltage>
		
		/* read current */	
		current = (int16_t)(100*get_current()); // in A
     832:	0e 94 be 02 	call	0x57c	; 0x57c <get_current>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	48 ec       	ldi	r20, 0xC8	; 200
     83c:	52 e4       	ldi	r21, 0x42	; 66
     83e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     842:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     846:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <current+0x1>
     84a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <current>
		current = .1 * current + .9 * old_current;
     84e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current>
     852:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current+0x1>
     856:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <old_current>
     85a:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <old_current+0x1>
     85e:	07 2e       	mov	r0, r23
     860:	00 0c       	add	r0, r0
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     86a:	2d ec       	ldi	r18, 0xCD	; 205
     86c:	3c ec       	ldi	r19, 0xCC	; 204
     86e:	4c ec       	ldi	r20, 0xCC	; 204
     870:	5d e3       	ldi	r21, 0x3D	; 61
     872:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	b8 01       	movw	r22, r16
     87c:	11 0f       	add	r17, r17
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     886:	26 e6       	ldi	r18, 0x66	; 102
     888:	36 e6       	ldi	r19, 0x66	; 102
     88a:	46 e6       	ldi	r20, 0x66	; 102
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	c5 01       	movw	r24, r10
     898:	b4 01       	movw	r22, r8
     89a:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     89e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     8a2:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <current+0x1>
     8a6:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <current>
		old_current = current;
     8aa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
     8ae:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
     8b2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <old_current+0x1>
     8b6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <old_current>
		
		/* read temperature */					
		temperature = (int16_t)(10*get_temperature());
     8ba:	0e 94 f7 02 	call	0x5ee	; 0x5ee <get_temperature>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e2       	ldi	r20, 0x20	; 32
     8c4:	51 e4       	ldi	r21, 0x41	; 65
     8c6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     8ca:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     8ce:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <temperature+0x1>
     8d2:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <temperature>
		temperature = .5 * temperature + .5 * old_temperature;
     8d6:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <temperature>
     8da:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <temperature+0x1>
     8de:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <__data_end>
     8e2:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <__data_end+0x1>
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     8fe:	4b 01       	movw	r8, r22
     900:	5c 01       	movw	r10, r24
     902:	b8 01       	movw	r22, r16
     904:	11 0f       	add	r17, r17
     906:	88 0b       	sbc	r24, r24
     908:	99 0b       	sbc	r25, r25
     90a:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	5f e3       	ldi	r21, 0x3F	; 63
     916:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     926:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixsfsi>
     92a:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <temperature+0x1>
     92e:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <temperature>
		old_temperature = temperature;
     932:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
     936:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
     93a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     93e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		
		/* load analog data into buffer */
		buffer_analog[0] = current; // LSB
     942:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
     946:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
     94a:	88 83       	st	Y, r24
		buffer_analog[1] = (current>>8);	  // MSB
     94c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
     950:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
     954:	99 83       	std	Y+1, r25	; 0x01
		buffer_analog[2] = voltage; // LSB
     956:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <voltage>
     95a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <voltage+0x1>
     95e:	8a 83       	std	Y+2, r24	; 0x02
		buffer_analog[3] = (voltage>>8);	  // MSB
     960:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <voltage>
     964:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <voltage+0x1>
     968:	9b 83       	std	Y+3, r25	; 0x03
		buffer_analog[4] = temperature;
     96a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
     96e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
     972:	8c 83       	std	Y+4, r24	; 0x04
		buffer_analog[5] = (temperature>>8);
     974:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
     978:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
     97c:	9d 83       	std	Y+5, r25	; 0x05
		
		/* write analog data to ACK payload */
		nRF24_uploadACKpay(ACK_PAYLOAD_P0, buffer_analog, ACK_PAYLOAD_LENGTH);
     97e:	46 e0       	ldi	r20, 0x06	; 6
     980:	be 01       	movw	r22, r28
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 9d 05 	call	0xb3a	; 0xb3a <nRF24_uploadACKpay>
				
		/* wait for incoming data with a timeout of 1s */
// 		timeout = 0;	
// 		start_TMR3();
		while(!nRF_dataReady()) // RX timeout
     988:	09 c0       	rjmp	.+18     	; 0x99c <__stack+0x9d>
		{
			if (timeout)
     98a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <timeout>
     98e:	88 23       	and	r24, r24
     990:	29 f0       	breq	.+10     	; 0x99c <__stack+0x9d>
			{
				timeout = 0;
     992:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <timeout>
				false_cmd = 1;
     996:	f0 92 2c 01 	sts	0x012C, r15	; 0x80012c <false_cmd>
				break;
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <__stack+0xa5>
		nRF24_uploadACKpay(ACK_PAYLOAD_P0, buffer_analog, ACK_PAYLOAD_LENGTH);
				
		/* wait for incoming data with a timeout of 1s */
// 		timeout = 0;	
// 		start_TMR3();
		while(!nRF_dataReady()) // RX timeout
     99c:	0e 94 20 05 	call	0xa40	; 0xa40 <nRF_dataReady>
     9a0:	88 23       	and	r24, r24
     9a2:	99 f3       	breq	.-26     	; 0x98a <__stack+0x8b>
			}
		} // end of RX timeout
		//stop_TMR3();
		
		/* enter Stanby_I mode to save current consumption */	
		nRF_CLEAR_CE; 
     9a4:	47 98       	cbi	0x08, 7	; 8
		
		/* read RX data */
		nRF_getData(buffer, TX_PAYLOAD_LENGTH); // get the data, put it in buffer	
     9a6:	63 e0       	ldi	r22, 0x03	; 3
     9a8:	89 e3       	ldi	r24, 0x39	; 57
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 67 05 	call	0xace	; 0xace <nRF_getData>
		
		if (!false_cmd)
     9b0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <false_cmd>
     9b4:	81 11       	cpse	r24, r1
     9b6:	1c c0       	rjmp	.+56     	; 0x9f0 <__stack+0xf1>
		{
			TOGGLE_BLUE_LED;
     9b8:	88 b1       	in	r24, 0x08	; 8
     9ba:	8e 25       	eor	r24, r14
     9bc:	88 b9       	out	0x08, r24	; 8
			
			// get unsigned 8-bit mtr cmd
			mtr_cmd =  buffer[1]; // get LSB
     9be:	e9 e3       	ldi	r30, 0x39	; 57
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	81 81       	ldd	r24, Z+1	; 0x01
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mtr_cmd+0x1>
     9ca:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mtr_cmd>
			
			// get signed 8-bit srv cmd
			srv_cmd = buffer[2];
     9ce:	82 81       	ldd	r24, Z+2	; 0x02
     9d0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <srv_cmd>
			
			process_mtr_cmd();
     9d4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <process_mtr_cmd>
			
			move_servo((float)srv_cmd);
     9d8:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <srv_cmd>
     9dc:	06 2e       	mov	r0, r22
     9de:	00 0c       	add	r0, r0
     9e0:	77 0b       	sbc	r23, r23
     9e2:	88 0b       	sbc	r24, r24
     9e4:	99 0b       	sbc	r25, r25
     9e6:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
     9ea:	0e 94 3a 03 	call	0x674	; 0x674 <move_servo>
     9ee:	d7 ce       	rjmp	.-594    	; 0x79e <main+0x6a>
		} // end of: if (!false_cmd)
		else
		{
			TOGGLE_RED_LED;
     9f0:	88 b1       	in	r24, 0x08	; 8
     9f2:	8d 25       	eor	r24, r13
     9f4:	88 b9       	out	0x08, r24	; 8
			mtr_cmd = 0;
     9f6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <mtr_cmd+0x1>
     9fa:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mtr_cmd>
			process_mtr_cmd();
     9fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <process_mtr_cmd>
			false_cmd = 0;
     a02:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <false_cmd>
     a06:	8f e9       	ldi	r24, 0x9F	; 159
     a08:	9f e0       	ldi	r25, 0x0F	; 15
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <__stack+0x10b>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <__stack+0x111>
     a10:	00 00       	nop
     a12:	c5 ce       	rjmp	.-630    	; 0x79e <main+0x6a>

00000a14 <__vector_32>:

//&&&&&&&&&&&&&&&&&&&&&& TMR3 ISR &&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ISR(TIMER3_COMPA_vect)
{
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	8f 93       	push	r24
	timeout = 1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <timeout>
		
     a26:	8f 91       	pop	r24
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <nRF_init>:
	nRF_SET_CSN;                     // Pull up chip select

	nRF_SET_CE; // Start transmission
	_delay_us(15); // pulse CE for at least 10us
	nRF_CLEAR_CE; // data packet sent, ShockBurst automatically enters RX mode
}
     a32:	3f 9a       	sbi	0x07, 7	; 7
     a34:	56 9a       	sbi	0x0a, 6	; 10
     a36:	47 98       	cbi	0x08, 7	; 8
     a38:	5e 9a       	sbi	0x0b, 6	; 11
     a3a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI1_masterInit>
     a3e:	08 95       	ret

00000a40 <nRF_dataReady>:
     a40:	5e 98       	cbi	0x0b, 6	; 11
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <SPI1_exchangeChar>
     a48:	5e 9a       	sbi	0x0b, 6	; 11
     a4a:	80 74       	andi	r24, 0x40	; 64
     a4c:	08 95       	ret

00000a4e <nRF_configReg>:
     a4e:	cf 93       	push	r28
     a50:	c6 2f       	mov	r28, r22
     a52:	5e 98       	cbi	0x0b, 6	; 11
     a54:	8f 71       	andi	r24, 0x1F	; 31
     a56:	80 62       	ori	r24, 0x20	; 32
     a58:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <SPI1_sendChar>
     a5c:	85 e8       	ldi	r24, 0x85	; 133
     a5e:	8a 95       	dec	r24
     a60:	f1 f7       	brne	.-4      	; 0xa5e <nRF_configReg+0x10>
     a62:	00 00       	nop
     a64:	8c 2f       	mov	r24, r28
     a66:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <SPI1_sendChar>
     a6a:	5e 9a       	sbi	0x0b, 6	; 11
     a6c:	85 e8       	ldi	r24, 0x85	; 133
     a6e:	8a 95       	dec	r24
     a70:	f1 f7       	brne	.-4      	; 0xa6e <nRF_configReg+0x20>
     a72:	00 00       	nop
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <nRF_SetRxMode>:
     a78:	60 e7       	ldi	r22, 0x70	; 112
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     a80:	6b e5       	ldi	r22, 0x5B	; 91
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     a88:	47 9a       	sbi	0x08, 7	; 8
     a8a:	08 95       	ret

00000a8c <nRF_config>:
     a8c:	6c e6       	ldi	r22, 0x6C	; 108
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     a94:	66 e0       	ldi	r22, 0x06	; 6
     a96:	8d e1       	ldi	r24, 0x1D	; 29
     a98:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	8c e1       	ldi	r24, 0x1C	; 28
     aa0:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     aa4:	66 e2       	ldi	r22, 0x26	; 38
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     aac:	63 e0       	ldi	r22, 0x03	; 3
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     ab4:	63 e0       	ldi	r22, 0x03	; 3
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     abc:	6f ef       	ldi	r22, 0xFF	; 255
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     ac4:	60 e7       	ldi	r22, 0x70	; 112
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     acc:	08 95       	ret

00000ace <nRF_getData>:
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	16 2f       	mov	r17, r22
     ad8:	5e 98       	cbi	0x0b, 6	; 11
     ada:	81 e6       	ldi	r24, 0x61	; 97
     adc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <SPI1_sendChar>
     ae0:	41 2f       	mov	r20, r17
     ae2:	be 01       	movw	r22, r28
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 05 06 	call	0xc0a	; 0xc0a <SPI1_exchangeBytes>
     aea:	5e 9a       	sbi	0x0b, 6	; 11
     aec:	60 e4       	ldi	r22, 0x40	; 64
     aee:	87 e0       	ldi	r24, 0x07	; 7
     af0:	0e 94 27 05 	call	0xa4e	; 0xa4e <nRF_configReg>
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	08 95       	ret

00000afc <nRF_writeReg>:
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	eb 01       	movw	r28, r22
     b04:	14 2f       	mov	r17, r20
     b06:	5e 98       	cbi	0x0b, 6	; 11
     b08:	8f 71       	andi	r24, 0x1F	; 31
     b0a:	80 62       	ori	r24, 0x20	; 32
     b0c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <SPI1_sendChar>
     b10:	61 2f       	mov	r22, r17
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI1_sendBytes>
     b18:	5e 9a       	sbi	0x0b, 6	; 11
     b1a:	85 e8       	ldi	r24, 0x85	; 133
     b1c:	8a 95       	dec	r24
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <nRF_writeReg+0x20>
     b20:	00 00       	nop
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	08 95       	ret

00000b2a <nRF_RXsetAddr>:
     b2a:	47 98       	cbi	0x08, 7	; 8
     b2c:	45 e0       	ldi	r20, 0x05	; 5
     b2e:	bc 01       	movw	r22, r24
     b30:	8b e0       	ldi	r24, 0x0B	; 11
     b32:	0e 94 7e 05 	call	0xafc	; 0xafc <nRF_writeReg>
     b36:	47 9a       	sbi	0x08, 7	; 8
     b38:	08 95       	ret

00000b3a <nRF24_uploadACKpay>:


void nRF24_uploadACKpay(char pipe, char *value, char len)
{
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	eb 01       	movw	r28, r22
     b42:	14 2f       	mov	r17, r20
	nRF_CLEAR_CSN;                     // Pull down chip select
     b44:	5e 98       	cbi	0x0b, 6	; 11
	SPI1_sendChar(W_ACK_PAYLOAD | pipe);	 // Write cmd to write payload
     b46:	88 6a       	ori	r24, 0xA8	; 168
     b48:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <SPI1_sendChar>
	SPI1_sendBytes(value, len);      // Write payload
     b4c:	61 2f       	mov	r22, r17
     b4e:	ce 01       	movw	r24, r28
     b50:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI1_sendBytes>
	nRF_SET_CSN;                     // Pull up chip select
     b54:	5e 9a       	sbi	0x0b, 6	; 11
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	08 95       	ret

00000b5e <println_0>:
		USART0_sendChar(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
     b68:	fc 01       	movw	r30, r24
     b6a:	80 81       	ld	r24, Z
     b6c:	8a 30       	cpi	r24, 0x0A	; 10
     b6e:	69 f0       	breq	.+26     	; 0xb8a <println_0+0x2c>
     b70:	8b 33       	cpi	r24, 0x3B	; 59
     b72:	79 f4       	brne	.+30     	; 0xb92 <println_0+0x34>
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <println_0+0x2c>
     b76:	89 91       	ld	r24, Y+
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	39 f0       	breq	.+14     	; 0xb8a <println_0+0x2c>
     b7c:	8b 33       	cpi	r24, 0x3B	; 59
     b7e:	29 f0       	breq	.+10     	; 0xb8a <println_0+0x2c>
			break;
		USART0_sendChar(char_array[i]);
     b80:	0e 94 29 06 	call	0xc52	; 0xc52 <USART0_sendChar>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
     b84:	0c 17       	cp	r16, r28
     b86:	1d 07       	cpc	r17, r29
     b88:	b1 f7       	brne	.-20     	; 0xb76 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		USART0_sendChar(char_array[i]);
		
	}
	USART0_sendChar(0x0A); // NL
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0e 94 29 06 	call	0xc52	; 0xc52 <USART0_sendChar>
}
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		USART0_sendChar(char_array[i]);
     b92:	0e 94 29 06 	call	0xc52	; 0xc52 <USART0_sendChar>
     b96:	e8 01       	movw	r28, r16
     b98:	21 96       	adiw	r28, 0x01	; 1
     b9a:	08 53       	subi	r16, 0x38	; 56
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	eb cf       	rjmp	.-42     	; 0xb76 <println_0+0x18>
		
	}
	USART0_sendChar(0x0A); // NL
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <SPI1_masterInit>:

void SPI0_exchangeBytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
     baa:	6b 9a       	sbi	0x0d, 3	; 13
     bac:	57 9a       	sbi	0x0a, 7	; 10
     bae:	56 9a       	sbi	0x0a, 6	; 10
     bb0:	82 e5       	ldi	r24, 0x52	; 82
     bb2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     bb6:	08 95       	ret

00000bb8 <SPI1_sendChar>:
     bb8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     bbc:	ed ea       	ldi	r30, 0xAD	; 173
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	88 23       	and	r24, r24
     bc4:	ec f7       	brge	.-6      	; 0xbc0 <SPI1_sendChar+0x8>
     bc6:	08 95       	ret

00000bc8 <SPI1_exchangeChar>:
     bc8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     bcc:	ed ea       	ldi	r30, 0xAD	; 173
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	88 23       	and	r24, r24
     bd4:	ec f7       	brge	.-6      	; 0xbd0 <SPI1_exchangeChar+0x8>
     bd6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     bda:	08 95       	ret

00000bdc <SPI1_sendBytes>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	66 23       	and	r22, r22
     be2:	81 f0       	breq	.+32     	; 0xc04 <SPI1_sendBytes+0x28>
     be4:	dc 01       	movw	r26, r24
     be6:	9c 01       	movw	r18, r24
     be8:	26 0f       	add	r18, r22
     bea:	31 1d       	adc	r19, r1
     bec:	ce ea       	ldi	r28, 0xAE	; 174
     bee:	d0 e0       	ldi	r29, 0x00	; 0
     bf0:	ed ea       	ldi	r30, 0xAD	; 173
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	9d 91       	ld	r25, X+
     bf6:	98 83       	st	Y, r25
     bf8:	90 81       	ld	r25, Z
     bfa:	99 23       	and	r25, r25
     bfc:	ec f7       	brge	.-6      	; 0xbf8 <SPI1_sendBytes+0x1c>
     bfe:	a2 17       	cp	r26, r18
     c00:	b3 07       	cpc	r27, r19
     c02:	c1 f7       	brne	.-16     	; 0xbf4 <SPI1_sendBytes+0x18>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <SPI1_exchangeBytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void SPI1_exchangeBytes(char *mosi, char *miso, char bytes)
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
     c12:	44 23       	and	r20, r20
     c14:	c9 f0       	breq	.+50     	; 0xc48 <SPI1_exchangeBytes+0x3e>
     c16:	dc 01       	movw	r26, r24
     c18:	06 2f       	mov	r16, r22
     c1a:	17 2f       	mov	r17, r23
     c1c:	9c 01       	movw	r18, r24
     c1e:	24 0f       	add	r18, r20
     c20:	31 1d       	adc	r19, r1
     c22:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
     c24:	2e ea       	ldi	r18, 0xAE	; 174
     c26:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
     c28:	ed ea       	ldi	r30, 0xAD	; 173
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
     c2c:	9d 91       	ld	r25, X+
     c2e:	e9 01       	movw	r28, r18
     c30:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
     c32:	90 81       	ld	r25, Z
     c34:	99 23       	and	r25, r25
     c36:	ec f7       	brge	.-6      	; 0xc32 <SPI1_exchangeBytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
     c38:	e9 01       	movw	r28, r18
     c3a:	98 81       	ld	r25, Y
     c3c:	e8 01       	movw	r28, r16
     c3e:	99 93       	st	Y+, r25
     c40:	8e 01       	movw	r16, r28
}
void SPI1_exchangeBytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
     c42:	a4 17       	cp	r26, r20
     c44:	b5 07       	cpc	r27, r21
     c46:	91 f7       	brne	.-28     	; 0xc2c <SPI1_exchangeBytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <USART0_sendChar>:
unsigned char USART0_receiveChar()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
     c52:	e0 ec       	ldi	r30, 0xC0	; 192
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	90 81       	ld	r25, Z
     c58:	95 ff       	sbrs	r25, 5
     c5a:	fd cf       	rjmp	.-6      	; 0xc56 <USART0_sendChar+0x4>
     c5c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c60:	08 95       	ret

00000c62 <USART0_setup>:


void USART0_setup(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN); //
     c62:	98 e1       	ldi	r25, 0x18	; 24
     c64:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
     c68:	96 e0       	ldi	r25, 0x06	; 6
     c6a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
     c6e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c72:	08 95       	ret

00000c74 <__subsf3>:
     c74:	50 58       	subi	r21, 0x80	; 128

00000c76 <__addsf3>:
     c76:	bb 27       	eor	r27, r27
     c78:	aa 27       	eor	r26, r26
     c7a:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
     c7e:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_round>
     c82:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscA>
     c86:	38 f0       	brcs	.+14     	; 0xc96 <__addsf3+0x20>
     c88:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_pscB>
     c8c:	20 f0       	brcs	.+8      	; 0xc96 <__addsf3+0x20>
     c8e:	39 f4       	brne	.+14     	; 0xc9e <__addsf3+0x28>
     c90:	9f 3f       	cpi	r25, 0xFF	; 255
     c92:	19 f4       	brne	.+6      	; 0xc9a <__addsf3+0x24>
     c94:	26 f4       	brtc	.+8      	; 0xc9e <__addsf3+0x28>
     c96:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_nan>
     c9a:	0e f4       	brtc	.+2      	; 0xc9e <__addsf3+0x28>
     c9c:	e0 95       	com	r30
     c9e:	e7 fb       	bst	r30, 7
     ca0:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>

00000ca4 <__addsf3x>:
     ca4:	e9 2f       	mov	r30, r25
     ca6:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_split3>
     caa:	58 f3       	brcs	.-42     	; 0xc82 <__addsf3+0xc>
     cac:	ba 17       	cp	r27, r26
     cae:	62 07       	cpc	r22, r18
     cb0:	73 07       	cpc	r23, r19
     cb2:	84 07       	cpc	r24, r20
     cb4:	95 07       	cpc	r25, r21
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3x+0x1c>
     cb8:	79 f4       	brne	.+30     	; 0xcd8 <__addsf3x+0x34>
     cba:	a6 f5       	brtc	.+104    	; 0xd24 <__addsf3x+0x80>
     cbc:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__fp_zero>
     cc0:	0e f4       	brtc	.+2      	; 0xcc4 <__addsf3x+0x20>
     cc2:	e0 95       	com	r30
     cc4:	0b 2e       	mov	r0, r27
     cc6:	ba 2f       	mov	r27, r26
     cc8:	a0 2d       	mov	r26, r0
     cca:	0b 01       	movw	r0, r22
     ccc:	b9 01       	movw	r22, r18
     cce:	90 01       	movw	r18, r0
     cd0:	0c 01       	movw	r0, r24
     cd2:	ca 01       	movw	r24, r20
     cd4:	a0 01       	movw	r20, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	ff 27       	eor	r31, r31
     cda:	59 1b       	sub	r21, r25
     cdc:	99 f0       	breq	.+38     	; 0xd04 <__addsf3x+0x60>
     cde:	59 3f       	cpi	r21, 0xF9	; 249
     ce0:	50 f4       	brcc	.+20     	; 0xcf6 <__addsf3x+0x52>
     ce2:	50 3e       	cpi	r21, 0xE0	; 224
     ce4:	68 f1       	brcs	.+90     	; 0xd40 <__addsf3x+0x9c>
     ce6:	1a 16       	cp	r1, r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	a2 2f       	mov	r26, r18
     cec:	23 2f       	mov	r18, r19
     cee:	34 2f       	mov	r19, r20
     cf0:	44 27       	eor	r20, r20
     cf2:	58 5f       	subi	r21, 0xF8	; 248
     cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <__addsf3x+0x38>
     cf6:	46 95       	lsr	r20
     cf8:	37 95       	ror	r19
     cfa:	27 95       	ror	r18
     cfc:	a7 95       	ror	r26
     cfe:	f0 40       	sbci	r31, 0x00	; 0
     d00:	53 95       	inc	r21
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__addsf3x+0x52>
     d04:	7e f4       	brtc	.+30     	; 0xd24 <__addsf3x+0x80>
     d06:	1f 16       	cp	r1, r31
     d08:	ba 0b       	sbc	r27, r26
     d0a:	62 0b       	sbc	r22, r18
     d0c:	73 0b       	sbc	r23, r19
     d0e:	84 0b       	sbc	r24, r20
     d10:	ba f0       	brmi	.+46     	; 0xd40 <__addsf3x+0x9c>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	a1 f0       	breq	.+40     	; 0xd3e <__addsf3x+0x9a>
     d16:	ff 0f       	add	r31, r31
     d18:	bb 1f       	adc	r27, r27
     d1a:	66 1f       	adc	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	c2 f7       	brpl	.-16     	; 0xd12 <__addsf3x+0x6e>
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <__addsf3x+0x9c>
     d24:	ba 0f       	add	r27, r26
     d26:	62 1f       	adc	r22, r18
     d28:	73 1f       	adc	r23, r19
     d2a:	84 1f       	adc	r24, r20
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <__addsf3x+0x9c>
     d2e:	87 95       	ror	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9e 3f       	cpi	r25, 0xFE	; 254
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x9a>
     d3c:	b0 cf       	rjmp	.-160    	; 0xc9e <__addsf3+0x28>
     d3e:	93 95       	inc	r25
     d40:	88 0f       	add	r24, r24
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0xa2>
     d44:	99 27       	eor	r25, r25
     d46:	ee 0f       	add	r30, r30
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	08 95       	ret

00000d4e <__cmpsf2>:
     d4e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_cmp>
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__cmpsf2+0x8>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	08 95       	ret

00000d58 <__divsf3>:
     d58:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divsf3x>
     d5c:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_round>
     d60:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_pscB>
     d64:	58 f0       	brcs	.+22     	; 0xd7c <__divsf3+0x24>
     d66:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscA>
     d6a:	40 f0       	brcs	.+16     	; 0xd7c <__divsf3+0x24>
     d6c:	29 f4       	brne	.+10     	; 0xd78 <__divsf3+0x20>
     d6e:	5f 3f       	cpi	r21, 0xFF	; 255
     d70:	29 f0       	breq	.+10     	; 0xd7c <__divsf3+0x24>
     d72:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
     d76:	51 11       	cpse	r21, r1
     d78:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     d7c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_nan>

00000d80 <__divsf3x>:
     d80:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_split3>
     d84:	68 f3       	brcs	.-38     	; 0xd60 <__divsf3+0x8>

00000d86 <__divsf3_pse>:
     d86:	99 23       	and	r25, r25
     d88:	b1 f3       	breq	.-20     	; 0xd76 <__divsf3+0x1e>
     d8a:	55 23       	and	r21, r21
     d8c:	91 f3       	breq	.-28     	; 0xd72 <__divsf3+0x1a>
     d8e:	95 1b       	sub	r25, r21
     d90:	55 0b       	sbc	r21, r21
     d92:	bb 27       	eor	r27, r27
     d94:	aa 27       	eor	r26, r26
     d96:	62 17       	cp	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	84 07       	cpc	r24, r20
     d9c:	38 f0       	brcs	.+14     	; 0xdac <__divsf3_pse+0x26>
     d9e:	9f 5f       	subi	r25, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	44 1f       	adc	r20, r20
     da8:	aa 1f       	adc	r26, r26
     daa:	a9 f3       	breq	.-22     	; 0xd96 <__divsf3_pse+0x10>
     dac:	35 d0       	rcall	.+106    	; 0xe18 <__divsf3_pse+0x92>
     dae:	0e 2e       	mov	r0, r30
     db0:	3a f0       	brmi	.+14     	; 0xdc0 <__divsf3_pse+0x3a>
     db2:	e0 e8       	ldi	r30, 0x80	; 128
     db4:	32 d0       	rcall	.+100    	; 0xe1a <__divsf3_pse+0x94>
     db6:	91 50       	subi	r25, 0x01	; 1
     db8:	50 40       	sbci	r21, 0x00	; 0
     dba:	e6 95       	lsr	r30
     dbc:	00 1c       	adc	r0, r0
     dbe:	ca f7       	brpl	.-14     	; 0xdb2 <__divsf3_pse+0x2c>
     dc0:	2b d0       	rcall	.+86     	; 0xe18 <__divsf3_pse+0x92>
     dc2:	fe 2f       	mov	r31, r30
     dc4:	29 d0       	rcall	.+82     	; 0xe18 <__divsf3_pse+0x92>
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	26 17       	cp	r18, r22
     dd0:	37 07       	cpc	r19, r23
     dd2:	48 07       	cpc	r20, r24
     dd4:	ab 07       	cpc	r26, r27
     dd6:	b0 e8       	ldi	r27, 0x80	; 128
     dd8:	09 f0       	breq	.+2      	; 0xddc <__divsf3_pse+0x56>
     dda:	bb 0b       	sbc	r27, r27
     ddc:	80 2d       	mov	r24, r0
     dde:	bf 01       	movw	r22, r30
     de0:	ff 27       	eor	r31, r31
     de2:	93 58       	subi	r25, 0x83	; 131
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	3a f0       	brmi	.+14     	; 0xdf6 <__divsf3_pse+0x70>
     de8:	9e 3f       	cpi	r25, 0xFE	; 254
     dea:	51 05       	cpc	r21, r1
     dec:	78 f0       	brcs	.+30     	; 0xe0c <__divsf3_pse+0x86>
     dee:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
     df2:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     df6:	5f 3f       	cpi	r21, 0xFF	; 255
     df8:	e4 f3       	brlt	.-8      	; 0xdf2 <__divsf3_pse+0x6c>
     dfa:	98 3e       	cpi	r25, 0xE8	; 232
     dfc:	d4 f3       	brlt	.-12     	; 0xdf2 <__divsf3_pse+0x6c>
     dfe:	86 95       	lsr	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b7 95       	ror	r27
     e06:	f7 95       	ror	r31
     e08:	9f 5f       	subi	r25, 0xFF	; 255
     e0a:	c9 f7       	brne	.-14     	; 0xdfe <__divsf3_pse+0x78>
     e0c:	88 0f       	add	r24, r24
     e0e:	91 1d       	adc	r25, r1
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	97 f9       	bld	r25, 7
     e16:	08 95       	ret
     e18:	e1 e0       	ldi	r30, 0x01	; 1
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	bb 1f       	adc	r27, r27
     e22:	62 17       	cp	r22, r18
     e24:	73 07       	cpc	r23, r19
     e26:	84 07       	cpc	r24, r20
     e28:	ba 07       	cpc	r27, r26
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <__divsf3_pse+0xae>
     e2c:	62 1b       	sub	r22, r18
     e2e:	73 0b       	sbc	r23, r19
     e30:	84 0b       	sbc	r24, r20
     e32:	ba 0b       	sbc	r27, r26
     e34:	ee 1f       	adc	r30, r30
     e36:	88 f7       	brcc	.-30     	; 0xe1a <__divsf3_pse+0x94>
     e38:	e0 95       	com	r30
     e3a:	08 95       	ret

00000e3c <__fixsfsi>:
     e3c:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fixunssfsi>
     e40:	68 94       	set
     e42:	b1 11       	cpse	r27, r1
     e44:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     e48:	08 95       	ret

00000e4a <__fixunssfsi>:
     e4a:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_splitA>
     e4e:	88 f0       	brcs	.+34     	; 0xe72 <__fixunssfsi+0x28>
     e50:	9f 57       	subi	r25, 0x7F	; 127
     e52:	98 f0       	brcs	.+38     	; 0xe7a <__fixunssfsi+0x30>
     e54:	b9 2f       	mov	r27, r25
     e56:	99 27       	eor	r25, r25
     e58:	b7 51       	subi	r27, 0x17	; 23
     e5a:	b0 f0       	brcs	.+44     	; 0xe88 <__fixunssfsi+0x3e>
     e5c:	e1 f0       	breq	.+56     	; 0xe96 <__fixunssfsi+0x4c>
     e5e:	66 0f       	add	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	88 1f       	adc	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	1a f0       	brmi	.+6      	; 0xe6e <__fixunssfsi+0x24>
     e68:	ba 95       	dec	r27
     e6a:	c9 f7       	brne	.-14     	; 0xe5e <__fixunssfsi+0x14>
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <__fixunssfsi+0x4c>
     e6e:	b1 30       	cpi	r27, 0x01	; 1
     e70:	91 f0       	breq	.+36     	; 0xe96 <__fixunssfsi+0x4c>
     e72:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_zero>
     e76:	b1 e0       	ldi	r27, 0x01	; 1
     e78:	08 95       	ret
     e7a:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__fp_zero>
     e7e:	67 2f       	mov	r22, r23
     e80:	78 2f       	mov	r23, r24
     e82:	88 27       	eor	r24, r24
     e84:	b8 5f       	subi	r27, 0xF8	; 248
     e86:	39 f0       	breq	.+14     	; 0xe96 <__fixunssfsi+0x4c>
     e88:	b9 3f       	cpi	r27, 0xF9	; 249
     e8a:	cc f3       	brlt	.-14     	; 0xe7e <__fixunssfsi+0x34>
     e8c:	86 95       	lsr	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b3 95       	inc	r27
     e94:	d9 f7       	brne	.-10     	; 0xe8c <__fixunssfsi+0x42>
     e96:	3e f4       	brtc	.+14     	; 0xea6 <__fixunssfsi+0x5c>
     e98:	90 95       	com	r25
     e9a:	80 95       	com	r24
     e9c:	70 95       	com	r23
     e9e:	61 95       	neg	r22
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	08 95       	ret

00000ea8 <__floatunsisf>:
     ea8:	e8 94       	clt
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <__floatsisf+0x12>

00000eac <__floatsisf>:
     eac:	97 fb       	bst	r25, 7
     eae:	3e f4       	brtc	.+14     	; 0xebe <__floatsisf+0x12>
     eb0:	90 95       	com	r25
     eb2:	80 95       	com	r24
     eb4:	70 95       	com	r23
     eb6:	61 95       	neg	r22
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8f 4f       	sbci	r24, 0xFF	; 255
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	99 23       	and	r25, r25
     ec0:	a9 f0       	breq	.+42     	; 0xeec <__floatsisf+0x40>
     ec2:	f9 2f       	mov	r31, r25
     ec4:	96 e9       	ldi	r25, 0x96	; 150
     ec6:	bb 27       	eor	r27, r27
     ec8:	93 95       	inc	r25
     eca:	f6 95       	lsr	r31
     ecc:	87 95       	ror	r24
     ece:	77 95       	ror	r23
     ed0:	67 95       	ror	r22
     ed2:	b7 95       	ror	r27
     ed4:	f1 11       	cpse	r31, r1
     ed6:	f8 cf       	rjmp	.-16     	; 0xec8 <__floatsisf+0x1c>
     ed8:	fa f4       	brpl	.+62     	; 0xf18 <__floatsisf+0x6c>
     eda:	bb 0f       	add	r27, r27
     edc:	11 f4       	brne	.+4      	; 0xee2 <__floatsisf+0x36>
     ede:	60 ff       	sbrs	r22, 0
     ee0:	1b c0       	rjmp	.+54     	; 0xf18 <__floatsisf+0x6c>
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <__floatsisf+0x6c>
     eec:	88 23       	and	r24, r24
     eee:	11 f0       	breq	.+4      	; 0xef4 <__floatsisf+0x48>
     ef0:	96 e9       	ldi	r25, 0x96	; 150
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <__floatsisf+0x6a>
     ef4:	77 23       	and	r23, r23
     ef6:	21 f0       	breq	.+8      	; 0xf00 <__floatsisf+0x54>
     ef8:	9e e8       	ldi	r25, 0x8E	; 142
     efa:	87 2f       	mov	r24, r23
     efc:	76 2f       	mov	r23, r22
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <__floatsisf+0x5e>
     f00:	66 23       	and	r22, r22
     f02:	71 f0       	breq	.+28     	; 0xf20 <__floatsisf+0x74>
     f04:	96 e8       	ldi	r25, 0x86	; 134
     f06:	86 2f       	mov	r24, r22
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	2a f0       	brmi	.+10     	; 0xf18 <__floatsisf+0x6c>
     f0e:	9a 95       	dec	r25
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	da f7       	brpl	.-10     	; 0xf0e <__floatsisf+0x62>
     f18:	88 0f       	add	r24, r24
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	97 f9       	bld	r25, 7
     f20:	08 95       	ret

00000f22 <__fp_cmp>:
     f22:	99 0f       	add	r25, r25
     f24:	00 08       	sbc	r0, r0
     f26:	55 0f       	add	r21, r21
     f28:	aa 0b       	sbc	r26, r26
     f2a:	e0 e8       	ldi	r30, 0x80	; 128
     f2c:	fe ef       	ldi	r31, 0xFE	; 254
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	e8 07       	cpc	r30, r24
     f34:	f9 07       	cpc	r31, r25
     f36:	c0 f0       	brcs	.+48     	; 0xf68 <__fp_cmp+0x46>
     f38:	12 16       	cp	r1, r18
     f3a:	13 06       	cpc	r1, r19
     f3c:	e4 07       	cpc	r30, r20
     f3e:	f5 07       	cpc	r31, r21
     f40:	98 f0       	brcs	.+38     	; 0xf68 <__fp_cmp+0x46>
     f42:	62 1b       	sub	r22, r18
     f44:	73 0b       	sbc	r23, r19
     f46:	84 0b       	sbc	r24, r20
     f48:	95 0b       	sbc	r25, r21
     f4a:	39 f4       	brne	.+14     	; 0xf5a <__fp_cmp+0x38>
     f4c:	0a 26       	eor	r0, r26
     f4e:	61 f0       	breq	.+24     	; 0xf68 <__fp_cmp+0x46>
     f50:	23 2b       	or	r18, r19
     f52:	24 2b       	or	r18, r20
     f54:	25 2b       	or	r18, r21
     f56:	21 f4       	brne	.+8      	; 0xf60 <__fp_cmp+0x3e>
     f58:	08 95       	ret
     f5a:	0a 26       	eor	r0, r26
     f5c:	09 f4       	brne	.+2      	; 0xf60 <__fp_cmp+0x3e>
     f5e:	a1 40       	sbci	r26, 0x01	; 1
     f60:	a6 95       	lsr	r26
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	81 1d       	adc	r24, r1
     f66:	81 1d       	adc	r24, r1
     f68:	08 95       	ret

00000f6a <__fp_inf>:
     f6a:	97 f9       	bld	r25, 7
     f6c:	9f 67       	ori	r25, 0x7F	; 127
     f6e:	80 e8       	ldi	r24, 0x80	; 128
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	08 95       	ret

00000f76 <__fp_nan>:
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	08 95       	ret

00000f7c <__fp_pscA>:
     f7c:	00 24       	eor	r0, r0
     f7e:	0a 94       	dec	r0
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	18 06       	cpc	r1, r24
     f86:	09 06       	cpc	r0, r25
     f88:	08 95       	ret

00000f8a <__fp_pscB>:
     f8a:	00 24       	eor	r0, r0
     f8c:	0a 94       	dec	r0
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	05 06       	cpc	r0, r21
     f96:	08 95       	ret

00000f98 <__fp_round>:
     f98:	09 2e       	mov	r0, r25
     f9a:	03 94       	inc	r0
     f9c:	00 0c       	add	r0, r0
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0xc>
     fa0:	88 23       	and	r24, r24
     fa2:	52 f0       	brmi	.+20     	; 0xfb8 <__fp_round+0x20>
     fa4:	bb 0f       	add	r27, r27
     fa6:	40 f4       	brcc	.+16     	; 0xfb8 <__fp_round+0x20>
     fa8:	bf 2b       	or	r27, r31
     faa:	11 f4       	brne	.+4      	; 0xfb0 <__fp_round+0x18>
     fac:	60 ff       	sbrs	r22, 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__fp_round+0x20>
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__fp_split3>:
     fba:	57 fd       	sbrc	r21, 7
     fbc:	90 58       	subi	r25, 0x80	; 128
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	59 f0       	breq	.+22     	; 0xfda <__fp_splitA+0x10>
     fc4:	5f 3f       	cpi	r21, 0xFF	; 255
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <__fp_splitA+0x1a>
     fc8:	47 95       	ror	r20

00000fca <__fp_splitA>:
     fca:	88 0f       	add	r24, r24
     fcc:	97 fb       	bst	r25, 7
     fce:	99 1f       	adc	r25, r25
     fd0:	61 f0       	breq	.+24     	; 0xfea <__fp_splitA+0x20>
     fd2:	9f 3f       	cpi	r25, 0xFF	; 255
     fd4:	79 f0       	breq	.+30     	; 0xff4 <__fp_splitA+0x2a>
     fd6:	87 95       	ror	r24
     fd8:	08 95       	ret
     fda:	12 16       	cp	r1, r18
     fdc:	13 06       	cpc	r1, r19
     fde:	14 06       	cpc	r1, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	f2 cf       	rjmp	.-28     	; 0xfc8 <__fp_split3+0xe>
     fe4:	46 95       	lsr	r20
     fe6:	f1 df       	rcall	.-30     	; 0xfca <__fp_splitA>
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <__fp_splitA+0x30>
     fea:	16 16       	cp	r1, r22
     fec:	17 06       	cpc	r1, r23
     fee:	18 06       	cpc	r1, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	f1 cf       	rjmp	.-30     	; 0xfd6 <__fp_splitA+0xc>
     ff4:	86 95       	lsr	r24
     ff6:	71 05       	cpc	r23, r1
     ff8:	61 05       	cpc	r22, r1
     ffa:	08 94       	sec
     ffc:	08 95       	ret

00000ffe <__fp_zero>:
     ffe:	e8 94       	clt

00001000 <__fp_szero>:
    1000:	bb 27       	eor	r27, r27
    1002:	66 27       	eor	r22, r22
    1004:	77 27       	eor	r23, r23
    1006:	cb 01       	movw	r24, r22
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__gesf2>:
    100c:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_cmp>
    1010:	08 f4       	brcc	.+2      	; 0x1014 <__gesf2+0x8>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	08 95       	ret
    1016:	16 f0       	brts	.+4      	; 0x101c <__gesf2+0x10>
    1018:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_mpack>
    101c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_nan>
    1020:	68 94       	set
    1022:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>

00001026 <log>:
    1026:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_splitA>
    102a:	a8 f3       	brcs	.-22     	; 0x1016 <__gesf2+0xa>
    102c:	99 23       	and	r25, r25
    102e:	c1 f3       	breq	.-16     	; 0x1020 <__gesf2+0x14>
    1030:	ae f3       	brts	.-22     	; 0x101c <__gesf2+0x10>
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	1f 93       	push	r17
    1038:	0f 93       	push	r16
    103a:	ff 92       	push	r15
    103c:	c9 2f       	mov	r28, r25
    103e:	dd 27       	eor	r29, r29
    1040:	88 23       	and	r24, r24
    1042:	2a f0       	brmi	.+10     	; 0x104e <log+0x28>
    1044:	21 97       	sbiw	r28, 0x01	; 1
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	da f7       	brpl	.-10     	; 0x1044 <log+0x1e>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f eb       	ldi	r21, 0xBF	; 191
    1056:	9f e3       	ldi	r25, 0x3F	; 63
    1058:	88 39       	cpi	r24, 0x98	; 152
    105a:	20 f0       	brcs	.+8      	; 0x1064 <log+0x3e>
    105c:	80 3e       	cpi	r24, 0xE0	; 224
    105e:	38 f0       	brcs	.+14     	; 0x106e <log+0x48>
    1060:	21 96       	adiw	r28, 0x01	; 1
    1062:	8f 77       	andi	r24, 0x7F	; 127
    1064:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
    1068:	ec ec       	ldi	r30, 0xCC	; 204
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <log+0x50>
    106e:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
    1072:	e9 ef       	ldi	r30, 0xF9	; 249
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_powser>
    107a:	8b 01       	movw	r16, r22
    107c:	be 01       	movw	r22, r28
    107e:	ec 01       	movw	r28, r24
    1080:	fb 2e       	mov	r15, r27
    1082:	6f 57       	subi	r22, 0x7F	; 127
    1084:	71 09       	sbc	r23, r1
    1086:	75 95       	asr	r23
    1088:	77 1f       	adc	r23, r23
    108a:	88 0b       	sbc	r24, r24
    108c:	99 0b       	sbc	r25, r25
    108e:	0e 94 56 07 	call	0xeac	; 0xeac <__floatsisf>
    1092:	28 e1       	ldi	r18, 0x18	; 24
    1094:	32 e7       	ldi	r19, 0x72	; 114
    1096:	41 e3       	ldi	r20, 0x31	; 49
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3x>
    109e:	af 2d       	mov	r26, r15
    10a0:	98 01       	movw	r18, r16
    10a2:	ae 01       	movw	r20, r28
    10a4:	ff 90       	pop	r15
    10a6:	0f 91       	pop	r16
    10a8:	1f 91       	pop	r17
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
    10b2:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_round>

000010b6 <__mulsf3>:
    10b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3x>
    10ba:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_round>
    10be:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscA>
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <__mulsf3+0x1c>
    10c4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_pscB>
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__mulsf3+0x1c>
    10ca:	95 23       	and	r25, r21
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <__mulsf3+0x1c>
    10ce:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
    10d2:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_nan>
    10d6:	11 24       	eor	r1, r1
    10d8:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>

000010dc <__mulsf3x>:
    10dc:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_split3>
    10e0:	70 f3       	brcs	.-36     	; 0x10be <__mulsf3+0x8>

000010e2 <__mulsf3_pse>:
    10e2:	95 9f       	mul	r25, r21
    10e4:	c1 f3       	breq	.-16     	; 0x10d6 <__mulsf3+0x20>
    10e6:	95 0f       	add	r25, r21
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	55 1f       	adc	r21, r21
    10ec:	62 9f       	mul	r22, r18
    10ee:	f0 01       	movw	r30, r0
    10f0:	72 9f       	mul	r23, r18
    10f2:	bb 27       	eor	r27, r27
    10f4:	f0 0d       	add	r31, r0
    10f6:	b1 1d       	adc	r27, r1
    10f8:	63 9f       	mul	r22, r19
    10fa:	aa 27       	eor	r26, r26
    10fc:	f0 0d       	add	r31, r0
    10fe:	b1 1d       	adc	r27, r1
    1100:	aa 1f       	adc	r26, r26
    1102:	64 9f       	mul	r22, r20
    1104:	66 27       	eor	r22, r22
    1106:	b0 0d       	add	r27, r0
    1108:	a1 1d       	adc	r26, r1
    110a:	66 1f       	adc	r22, r22
    110c:	82 9f       	mul	r24, r18
    110e:	22 27       	eor	r18, r18
    1110:	b0 0d       	add	r27, r0
    1112:	a1 1d       	adc	r26, r1
    1114:	62 1f       	adc	r22, r18
    1116:	73 9f       	mul	r23, r19
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	62 1f       	adc	r22, r18
    111e:	83 9f       	mul	r24, r19
    1120:	a0 0d       	add	r26, r0
    1122:	61 1d       	adc	r22, r1
    1124:	22 1f       	adc	r18, r18
    1126:	74 9f       	mul	r23, r20
    1128:	33 27       	eor	r19, r19
    112a:	a0 0d       	add	r26, r0
    112c:	61 1d       	adc	r22, r1
    112e:	23 1f       	adc	r18, r19
    1130:	84 9f       	mul	r24, r20
    1132:	60 0d       	add	r22, r0
    1134:	21 1d       	adc	r18, r1
    1136:	82 2f       	mov	r24, r18
    1138:	76 2f       	mov	r23, r22
    113a:	6a 2f       	mov	r22, r26
    113c:	11 24       	eor	r1, r1
    113e:	9f 57       	subi	r25, 0x7F	; 127
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	9a f0       	brmi	.+38     	; 0x116a <__mulsf3_pse+0x88>
    1144:	f1 f0       	breq	.+60     	; 0x1182 <__mulsf3_pse+0xa0>
    1146:	88 23       	and	r24, r24
    1148:	4a f0       	brmi	.+18     	; 0x115c <__mulsf3_pse+0x7a>
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	bb 1f       	adc	r27, r27
    1150:	66 1f       	adc	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	91 50       	subi	r25, 0x01	; 1
    1158:	50 40       	sbci	r21, 0x00	; 0
    115a:	a9 f7       	brne	.-22     	; 0x1146 <__mulsf3_pse+0x64>
    115c:	9e 3f       	cpi	r25, 0xFE	; 254
    115e:	51 05       	cpc	r21, r1
    1160:	80 f0       	brcs	.+32     	; 0x1182 <__mulsf3_pse+0xa0>
    1162:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
    1166:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	e4 f3       	brlt	.-8      	; 0x1166 <__mulsf3_pse+0x84>
    116e:	98 3e       	cpi	r25, 0xE8	; 232
    1170:	d4 f3       	brlt	.-12     	; 0x1166 <__mulsf3_pse+0x84>
    1172:	86 95       	lsr	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b7 95       	ror	r27
    117a:	f7 95       	ror	r31
    117c:	e7 95       	ror	r30
    117e:	9f 5f       	subi	r25, 0xFF	; 255
    1180:	c1 f7       	brne	.-16     	; 0x1172 <__mulsf3_pse+0x90>
    1182:	fe 2b       	or	r31, r30
    1184:	88 0f       	add	r24, r24
    1186:	91 1d       	adc	r25, r1
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__fp_mpack>:
    1190:	9f 3f       	cpi	r25, 0xFF	; 255
    1192:	31 f0       	breq	.+12     	; 0x11a0 <__fp_mpack_finite+0xc>

00001194 <__fp_mpack_finite>:
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	20 f4       	brcc	.+8      	; 0x11a0 <__fp_mpack_finite+0xc>
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	b7 95       	ror	r27
    11a0:	88 0f       	add	r24, r24
    11a2:	91 1d       	adc	r25, r1
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__fp_powser>:
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	1f 93       	push	r17
    11b2:	0f 93       	push	r16
    11b4:	ff 92       	push	r15
    11b6:	ef 92       	push	r14
    11b8:	df 92       	push	r13
    11ba:	7b 01       	movw	r14, r22
    11bc:	8c 01       	movw	r16, r24
    11be:	68 94       	set
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <__fp_powser+0x22>
    11c2:	da 2e       	mov	r13, r26
    11c4:	ef 01       	movw	r28, r30
    11c6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3x>
    11ca:	fe 01       	movw	r30, r28
    11cc:	e8 94       	clt
    11ce:	a5 91       	lpm	r26, Z+
    11d0:	25 91       	lpm	r18, Z+
    11d2:	35 91       	lpm	r19, Z+
    11d4:	45 91       	lpm	r20, Z+
    11d6:	55 91       	lpm	r21, Z+
    11d8:	a6 f3       	brts	.-24     	; 0x11c2 <__fp_powser+0x16>
    11da:	ef 01       	movw	r28, r30
    11dc:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
    11e0:	fe 01       	movw	r30, r28
    11e2:	97 01       	movw	r18, r14
    11e4:	a8 01       	movw	r20, r16
    11e6:	da 94       	dec	r13
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <__fp_powser+0x18>
    11ea:	df 90       	pop	r13
    11ec:	ef 90       	pop	r14
    11ee:	ff 90       	pop	r15
    11f0:	0f 91       	pop	r16
    11f2:	1f 91       	pop	r17
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <__divmodhi4>:
    11fa:	97 fb       	bst	r25, 7
    11fc:	07 2e       	mov	r0, r23
    11fe:	16 f4       	brtc	.+4      	; 0x1204 <__divmodhi4+0xa>
    1200:	00 94       	com	r0
    1202:	07 d0       	rcall	.+14     	; 0x1212 <__divmodhi4_neg1>
    1204:	77 fd       	sbrc	r23, 7
    1206:	09 d0       	rcall	.+18     	; 0x121a <__divmodhi4_neg2>
    1208:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodhi4>
    120c:	07 fc       	sbrc	r0, 7
    120e:	05 d0       	rcall	.+10     	; 0x121a <__divmodhi4_neg2>
    1210:	3e f4       	brtc	.+14     	; 0x1220 <__divmodhi4_exit>

00001212 <__divmodhi4_neg1>:
    1212:	90 95       	com	r25
    1214:	81 95       	neg	r24
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	08 95       	ret

0000121a <__divmodhi4_neg2>:
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255

00001220 <__divmodhi4_exit>:
    1220:	08 95       	ret

00001222 <__udivmodhi4>:
    1222:	aa 1b       	sub	r26, r26
    1224:	bb 1b       	sub	r27, r27
    1226:	51 e1       	ldi	r21, 0x11	; 17
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <__udivmodhi4_ep>

0000122a <__udivmodhi4_loop>:
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	a6 17       	cp	r26, r22
    1230:	b7 07       	cpc	r27, r23
    1232:	10 f0       	brcs	.+4      	; 0x1238 <__udivmodhi4_ep>
    1234:	a6 1b       	sub	r26, r22
    1236:	b7 0b       	sbc	r27, r23

00001238 <__udivmodhi4_ep>:
    1238:	88 1f       	adc	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	5a 95       	dec	r21
    123e:	a9 f7       	brne	.-22     	; 0x122a <__udivmodhi4_loop>
    1240:	80 95       	com	r24
    1242:	90 95       	com	r25
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	08 95       	ret

0000124a <_exit>:
    124a:	f8 94       	cli

0000124c <__stop_program>:
    124c:	ff cf       	rjmp	.-2      	; 0x124c <__stop_program>
