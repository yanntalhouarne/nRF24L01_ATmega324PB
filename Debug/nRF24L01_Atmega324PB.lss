
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000008b2  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800128  00800128  0000096e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ccc  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126a  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000184d  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  00006484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b89  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002041  00000000  00000000  000077b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  000097f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_32>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e2 eb       	ldi	r30, 0xB2	; 178
  e0:	f8 e0       	ldi	r31, 0x08	; 8
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 32       	cpi	r26, 0x28	; 40
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e2       	ldi	r26, 0x28	; 40
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 34       	cpi	r26, 0x42	; 66
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 08 02 	call	0x410	; 0x410 <main>
 102:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <setup_gpios>:
	_temperature += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
	_temperature = 1.0 / _temperature;                 // Invert
	_temperature -= 273.15;                         // convert to C
	
	return _temperature;
}
 120:	6c 9a       	sbi	0x0d, 4	; 13
 122:	25 9a       	sbi	0x04, 5	; 4
 124:	3c 9a       	sbi	0x07, 4	; 7
 126:	55 9a       	sbi	0x0a, 5	; 10
 128:	54 9a       	sbi	0x0a, 4	; 10
 12a:	21 9a       	sbi	0x04, 1	; 4
 12c:	22 9a       	sbi	0x04, 2	; 4
 12e:	08 95       	ret

00000130 <delay_ms>:
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	69 f0       	breq	.+26     	; 0x14e <delay_ms+0x1e>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	ef e9       	ldi	r30, 0x9F	; 159
 13a:	ff e0       	ldi	r31, 0x0F	; 15
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <delay_ms+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <delay_ms+0x12>
 142:	00 00       	nop
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	82 17       	cp	r24, r18
 14a:	93 07       	cpc	r25, r19
 14c:	a9 f7       	brne	.-22     	; 0x138 <delay_ms+0x8>
 14e:	08 95       	ret

00000150 <flash_LED>:
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	88 23       	and	r24, r24
 15c:	79 f0       	breq	.+30     	; 0x17c <flash_LED+0x2c>
 15e:	8b 01       	movw	r16, r22
 160:	d8 2f       	mov	r29, r24
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	68 94       	set
 166:	ff 24       	eor	r15, r15
 168:	f5 f8       	bld	r15, 5
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	9f 25       	eor	r25, r15
 16e:	95 b9       	out	0x05, r25	; 5
 170:	c8 01       	movw	r24, r16
 172:	0e 94 98 00 	call	0x130	; 0x130 <delay_ms>
 176:	cf 5f       	subi	r28, 0xFF	; 255
 178:	dc 13       	cpse	r29, r28
 17a:	f7 cf       	rjmp	.-18     	; 0x16a <flash_LED+0x1a>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	08 95       	ret

00000188 <setup_TMR1_pwm>:
 188:	e0 e8       	ldi	r30, 0x80	; 128
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
 192:	e1 e8       	ldi	r30, 0x81	; 129
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8a 60       	ori	r24, 0x0A	; 10
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <set_TMR1A_duty_cycle>:
 19e:	80 3b       	cpi	r24, 0xB0	; 176
 1a0:	91 05       	cpc	r25, r1
 1a2:	14 f0       	brlt	.+4      	; 0x1a8 <set_TMR1A_duty_cycle+0xa>
 1a4:	8f ea       	ldi	r24, 0xAF	; 175
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	99 27       	eor	r25, r25
 1aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1b2:	08 95       	ret

000001b4 <set_TMR1B_duty_cycle>:
 1b4:	80 3b       	cpi	r24, 0xB0	; 176
 1b6:	91 05       	cpc	r25, r1
 1b8:	14 f0       	brlt	.+4      	; 0x1be <set_TMR1B_duty_cycle+0xa>
 1ba:	8f ea       	ldi	r24, 0xAF	; 175
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	99 27       	eor	r25, r25
 1c0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1c4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1c8:	08 95       	ret

000001ca <stop_TMR1A_pwm>:
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 77       	andi	r24, 0x7F	; 127
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <stop_TMR1B_pwm>:
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <start_TMR1A_pwm>:
 1e2:	e0 e8       	ldi	r30, 0x80	; 128
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <start_TMR1B_pwm>:
 1ee:	e0 e8       	ldi	r30, 0x80	; 128
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <motor_off>:
 1fa:	29 98       	cbi	0x05, 1	; 5
 1fc:	2a 98       	cbi	0x05, 2	; 5
 1fe:	08 95       	ret

00000200 <motor_on>:
 200:	29 9a       	sbi	0x05, 1	; 5
 202:	2a 9a       	sbi	0x05, 2	; 5
 204:	08 95       	ret

00000206 <process_mtr_cmd>:
 206:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 20a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 20e:	89 2b       	or	r24, r25
 210:	39 f4       	brne	.+14     	; 0x220 <process_mtr_cmd+0x1a>
 212:	0e 94 e5 00 	call	0x1ca	; 0x1ca <stop_TMR1A_pwm>
 216:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <stop_TMR1B_pwm>
 21a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <motor_off>
 21e:	08 95       	ret
 220:	0e 94 00 01 	call	0x200	; 0x200 <motor_on>
 224:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 228:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 22c:	18 16       	cp	r1, r24
 22e:	19 06       	cpc	r1, r25
 230:	0c f0       	brlt	.+2      	; 0x234 <process_mtr_cmd+0x2e>
 232:	51 c0       	rjmp	.+162    	; 0x2d6 <process_mtr_cmd+0xd0>
 234:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 238:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 23c:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <old_mtr_cmd>
 240:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 244:	82 1b       	sub	r24, r18
 246:	93 0b       	sbc	r25, r19
 248:	9c 01       	movw	r18, r24
 24a:	22 f4       	brpl	.+8      	; 0x254 <process_mtr_cmd+0x4e>
 24c:	22 27       	eor	r18, r18
 24e:	33 27       	eor	r19, r19
 250:	28 1b       	sub	r18, r24
 252:	39 0b       	sbc	r19, r25
 254:	2a 31       	cpi	r18, 0x1A	; 26
 256:	31 05       	cpc	r19, r1
 258:	f4 f0       	brlt	.+60     	; 0x296 <process_mtr_cmd+0x90>
 25a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <mtr_cmd>
 25e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <mtr_cmd+0x1>
 262:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 266:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 26a:	82 17       	cp	r24, r18
 26c:	93 07       	cpc	r25, r19
 26e:	54 f4       	brge	.+20     	; 0x284 <process_mtr_cmd+0x7e>
 270:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 274:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 278:	0a 96       	adiw	r24, 0x0a	; 10
 27a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 27e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 282:	09 c0       	rjmp	.+18     	; 0x296 <process_mtr_cmd+0x90>
 284:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 288:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 28c:	0a 97       	sbiw	r24, 0x0a	; 10
 28e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 292:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 296:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 29a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 29e:	8c 34       	cpi	r24, 0x4C	; 76
 2a0:	91 05       	cpc	r25, r1
 2a2:	34 f0       	brlt	.+12     	; 0x2b0 <process_mtr_cmd+0xaa>
 2a4:	8b e4       	ldi	r24, 0x4B	; 75
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 2ac:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 2b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 2b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 2b8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <old_mtr_cmd+0x1>
 2bc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <old_mtr_cmd>
 2c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <stop_TMR1B_pwm>
 2c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <start_TMR1A_pwm>
 2c8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 2cc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 2d0:	0e 94 cf 00 	call	0x19e	; 0x19e <set_TMR1A_duty_cycle>
 2d4:	08 95       	ret
 2d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 2da:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 2de:	99 23       	and	r25, r25
 2e0:	0c f0       	brlt	.+2      	; 0x2e4 <process_mtr_cmd+0xde>
 2e2:	6d c0       	rjmp	.+218    	; 0x3be <process_mtr_cmd+0x1b8>
 2e4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 2e8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 2ec:	85 3b       	cpi	r24, 0xB5	; 181
 2ee:	9f 4f       	sbci	r25, 0xFF	; 255
 2f0:	34 f4       	brge	.+12     	; 0x2fe <process_mtr_cmd+0xf8>
 2f2:	85 eb       	ldi	r24, 0xB5	; 181
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 2fa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 2fe:	0e 94 e5 00 	call	0x1ca	; 0x1ca <stop_TMR1A_pwm>
 302:	0e 94 f7 00 	call	0x1ee	; 0x1ee <start_TMR1B_pwm>
 306:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 30a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 30e:	91 95       	neg	r25
 310:	81 95       	neg	r24
 312:	91 09       	sbc	r25, r1
 314:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 318:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 31c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 320:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 324:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <old_mtr_cmd>
 328:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	9c 01       	movw	r18, r24
 332:	22 f4       	brpl	.+8      	; 0x33c <process_mtr_cmd+0x136>
 334:	22 27       	eor	r18, r18
 336:	33 27       	eor	r19, r19
 338:	28 1b       	sub	r18, r24
 33a:	39 0b       	sbc	r19, r25
 33c:	2a 31       	cpi	r18, 0x1A	; 26
 33e:	31 05       	cpc	r19, r1
 340:	f4 f0       	brlt	.+60     	; 0x37e <process_mtr_cmd+0x178>
 342:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <mtr_cmd>
 346:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <mtr_cmd+0x1>
 34a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 34e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 352:	82 17       	cp	r24, r18
 354:	93 07       	cpc	r25, r19
 356:	54 f4       	brge	.+20     	; 0x36c <process_mtr_cmd+0x166>
 358:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 35c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 360:	0a 96       	adiw	r24, 0x0a	; 10
 362:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 366:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 36a:	09 c0       	rjmp	.+18     	; 0x37e <process_mtr_cmd+0x178>
 36c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_mtr_cmd>
 370:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_mtr_cmd+0x1>
 374:	0a 97       	sbiw	r24, 0x0a	; 10
 376:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 37a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 37e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 382:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 386:	8c 34       	cpi	r24, 0x4C	; 76
 388:	91 05       	cpc	r25, r1
 38a:	34 f0       	brlt	.+12     	; 0x398 <process_mtr_cmd+0x192>
 38c:	8b e4       	ldi	r24, 0x4B	; 75
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 394:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 398:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 39c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 3a0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <old_mtr_cmd+0x1>
 3a4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <old_mtr_cmd>
 3a8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 3ac:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 3b0:	99 23       	and	r25, r25
 3b2:	1c f4       	brge	.+6      	; 0x3ba <process_mtr_cmd+0x1b4>
 3b4:	91 95       	neg	r25
 3b6:	81 95       	neg	r24
 3b8:	91 09       	sbc	r25, r1
 3ba:	0e 94 da 00 	call	0x1b4	; 0x1b4 <set_TMR1B_duty_cycle>
 3be:	08 95       	ret

000003c0 <start_TMR3>:
 3c0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 3c4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 3c8:	e1 e7       	ldi	r30, 0x71	; 113
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
 3d2:	08 95       	ret

000003d4 <stop_TMR3>:
 3d4:	e1 e7       	ldi	r30, 0x71	; 113
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	8d 7f       	andi	r24, 0xFD	; 253
 3dc:	80 83       	st	Z, r24
 3de:	08 95       	ret

000003e0 <setup_TMR3>:
 3e0:	e0 e9       	ldi	r30, 0x90	; 144
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 6c       	ori	r24, 0xC0	; 192
 3e8:	80 83       	st	Z, r24
 3ea:	e1 e9       	ldi	r30, 0x91	; 145
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	8d 60       	ori	r24, 0x0D	; 13
 3f2:	80 83       	st	Z, r24
 3f4:	84 e8       	ldi	r24, 0x84	; 132
 3f6:	9e e1       	ldi	r25, 0x1E	; 30
 3f8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3fc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 400:	e1 e7       	ldi	r30, 0x71	; 113
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	82 60       	ori	r24, 0x02	; 2
 408:	80 83       	st	Z, r24
 40a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <stop_TMR3>
 40e:	08 95       	ret

00000410 <main>:
 410:	0e 94 90 00 	call	0x120	; 0x120 <setup_gpios>
 414:	89 e1       	ldi	r24, 0x19	; 25
 416:	0e 94 4e 04 	call	0x89c	; 0x89c <setup_usart0>
 41a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <spi1_master_initialize>
 41e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <mirf_init>
 422:	0e 94 34 03 	call	0x668	; 0x668 <mirf_config>
 426:	8b e0       	ldi	r24, 0x0B	; 11
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 90 03 	call	0x720	; 0x720 <mirf_set_RADDR>
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 98 03 	call	0x730	; 0x730 <mirf_set_TADDR>
 436:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <setup_TMR3>
 43a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <stop_TMR3>
 43e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
 442:	0e 94 c4 00 	call	0x188	; 0x188 <setup_TMR1_pwm>
 446:	78 94       	sei
 448:	62 e3       	ldi	r22, 0x32	; 50
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 a8 00 	call	0x150	; 0x150 <flash_LED>
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 cc 03 	call	0x798	; 0x798 <println_0>
 45a:	8f e3       	ldi	r24, 0x3F	; 63
 45c:	9c e9       	ldi	r25, 0x9C	; 156
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x4e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <main+0x54>
 464:	00 00       	nop
 466:	74 98       	cbi	0x0e, 4	; 14
 468:	2d 98       	cbi	0x05, 5	; 5
 46a:	0e 94 2a 03 	call	0x654	; 0x654 <set_RX_MODE>
 46e:	aa 24       	eor	r10, r10
 470:	a3 94       	inc	r10
 472:	c2 e4       	ldi	r28, 0x42	; 66
 474:	d1 e0       	ldi	r29, 0x01	; 1
 476:	68 94       	set
 478:	bb 24       	eor	r11, r11
 47a:	b5 f8       	bld	r11, 5
 47c:	0f 2e       	mov	r0, r31
 47e:	f0 e3       	ldi	r31, 0x30	; 48
 480:	ef 2e       	mov	r14, r31
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	ff 2e       	mov	r15, r31
 486:	f0 2d       	mov	r31, r0
 488:	06 e3       	ldi	r16, 0x36	; 54
 48a:	11 e0       	ldi	r17, 0x01	; 1
 48c:	cc 24       	eor	r12, r12
 48e:	c3 94       	inc	r12
 490:	d1 2c       	mov	r13, r1
 492:	74 98       	cbi	0x0e, 4	; 14
 494:	0e 94 2a 03 	call	0x654	; 0x654 <set_RX_MODE>
 498:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <timeout>
 49c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <start_TMR3>
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <main+0xa4>
 4a2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <timeout>
 4a6:	88 23       	and	r24, r24
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <main+0xa4>
 4aa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <timeout>
 4ae:	a0 92 28 01 	sts	0x0128, r10	; 0x800128 <__data_end>
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <main+0xac>
 4b4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <mirf_data_ready>
 4b8:	88 23       	and	r24, r24
 4ba:	99 f3       	breq	.-26     	; 0x4a2 <main+0x92>
 4bc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <stop_TMR3>
 4c0:	47 98       	cbi	0x08, 7	; 8
 4c2:	8c e3       	ldi	r24, 0x3C	; 60
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 65 03 	call	0x6ca	; 0x6ca <mirf_get_data>
 4ca:	ec e3       	ldi	r30, 0x3C	; 60
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	a0 e3       	ldi	r26, 0x30	; 48
 4d0:	b1 e0       	ldi	r27, 0x01	; 1
 4d2:	81 91       	ld	r24, Z+
 4d4:	8d 93       	st	X+, r24
 4d6:	ec 17       	cp	r30, r28
 4d8:	fd 07       	cpc	r31, r29
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <main+0xc2>
 4dc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 4e0:	81 11       	cpse	r24, r1
 4e2:	5b c0       	rjmp	.+182    	; 0x59a <main+0x18a>
 4e4:	85 b1       	in	r24, 0x05	; 5
 4e6:	8b 25       	eor	r24, r11
 4e8:	85 b9       	out	0x05, r24	; 5
 4ea:	f7 01       	movw	r30, r14
 4ec:	80 81       	ld	r24, Z
 4ee:	88 23       	and	r24, r24
 4f0:	19 f0       	breq	.+6      	; 0x4f8 <main+0xe8>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	b1 f0       	breq	.+44     	; 0x522 <main+0x112>
 4f6:	cd cf       	rjmp	.-102    	; 0x492 <main+0x82>
 4f8:	ec e3       	ldi	r30, 0x3C	; 60
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	81 81       	ldd	r24, Z+1	; 0x01
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 504:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 508:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mtr_cmd>
 50c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mtr_cmd+0x1>
 510:	22 81       	ldd	r18, Z+2	; 0x02
 512:	92 2b       	or	r25, r18
 514:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mtr_cmd+0x1>
 518:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mtr_cmd>
 51c:	0e 94 03 01 	call	0x206	; 0x206 <process_mtr_cmd>
 520:	b8 cf       	rjmp	.-144    	; 0x492 <main+0x82>
 522:	8f e9       	ldi	r24, 0x9F	; 159
 524:	9f e0       	ldi	r25, 0x0F	; 15
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <main+0x116>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x11c>
 52c:	00 00       	nop
 52e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <current>
 532:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <current+0x1>
 536:	f8 01       	movw	r30, r16
 538:	90 83       	st	Z, r25
 53a:	81 83       	std	Z+1, r24	; 0x01
 53c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <voltage>
 540:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <voltage+0x1>
 544:	92 83       	std	Z+2, r25	; 0x02
 546:	83 83       	std	Z+3, r24	; 0x03
 548:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 54c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
 550:	94 83       	std	Z+4, r25	; 0x04
 552:	85 83       	std	Z+5, r24	; 0x05
 554:	66 e0       	ldi	r22, 0x06	; 6
 556:	c8 01       	movw	r24, r16
 558:	0e 94 a8 03 	call	0x750	; 0x750 <mirf_send>
 55c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <max_rt_count+0x1>
 560:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <max_rt_count>
 564:	09 c0       	rjmp	.+18     	; 0x578 <main+0x168>
 566:	0e 94 07 03 	call	0x60e	; 0x60e <mirf_read_MAX_RT>
 56a:	88 23       	and	r24, r24
 56c:	29 f0       	breq	.+10     	; 0x578 <main+0x168>
 56e:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <max_rt_count+0x1>
 572:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <max_rt_count>
 576:	04 c0       	rjmp	.+8      	; 0x580 <main+0x170>
 578:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mirf_data_sent>
 57c:	88 23       	and	r24, r24
 57e:	99 f3       	breq	.-26     	; 0x566 <main+0x156>
 580:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <max_rt_count>
 584:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <max_rt_count+0x1>
 588:	89 2b       	or	r24, r25
 58a:	09 f4       	brne	.+2      	; 0x58e <main+0x17e>
 58c:	82 cf       	rjmp	.-252    	; 0x492 <main+0x82>
 58e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <max_rt_count+0x1>
 592:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <max_rt_count>
 596:	74 9a       	sbi	0x0e, 4	; 14
 598:	7c cf       	rjmp	.-264    	; 0x492 <main+0x82>
 59a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <mtr_cmd+0x1>
 59e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <mtr_cmd>
 5a2:	0e 94 03 01 	call	0x206	; 0x206 <process_mtr_cmd>
 5a6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
 5aa:	74 9a       	sbi	0x0e, 4	; 14
 5ac:	8f e3       	ldi	r24, 0x3F	; 63
 5ae:	9c e9       	ldi	r25, 0x9C	; 156
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <main+0x1a0>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x1a6>
 5b6:	00 00       	nop
 5b8:	6c cf       	rjmp	.-296    	; 0x492 <main+0x82>

000005ba <__vector_32>:

//&&&&&&&&&&&&&&&&&&&&&& TMR3 ISR &&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ISR(TIMER3_COMPA_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	8f 93       	push	r24
	timeout = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <timeout>
//  	voltage = (int16_t)(100*get_voltage()); // in V
//  
//  	current = (int16_t)(1000*get_current()); // in A
//  
//  	temperature = (int16_t)(10*get_temperature());
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 5d8:	3f 9a       	sbi	0x07, 7	; 7
 5da:	56 9a       	sbi	0x0a, 6	; 10
 5dc:	47 98       	cbi	0x08, 7	; 8
 5de:	5e 9a       	sbi	0x0b, 6	; 11
 5e0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <spi1_master_initialize>
 5e4:	08 95       	ret

000005e6 <mirf_data_ready>:
 5e6:	5e 98       	cbi	0x0b, 6	; 11
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	0e 94 01 04 	call	0x802	; 0x802 <spi1_exchange_char>
 5ee:	5e 9a       	sbi	0x0b, 6	; 11
 5f0:	80 74       	andi	r24, 0x40	; 64
 5f2:	08 95       	ret

000005f4 <mirf_data_sent>:
 5f4:	5e 98       	cbi	0x0b, 6	; 11
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	0e 94 01 04 	call	0x802	; 0x802 <spi1_exchange_char>
 5fc:	5e 9a       	sbi	0x0b, 6	; 11
 5fe:	ef e9       	ldi	r30, 0x9F	; 159
 600:	ff e0       	ldi	r31, 0x0F	; 15
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <mirf_data_sent+0xe>
 606:	00 c0       	rjmp	.+0      	; 0x608 <mirf_data_sent+0x14>
 608:	00 00       	nop
 60a:	80 72       	andi	r24, 0x20	; 32
 60c:	08 95       	ret

0000060e <mirf_read_MAX_RT>:
 60e:	5e 98       	cbi	0x0b, 6	; 11
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	0e 94 01 04 	call	0x802	; 0x802 <spi1_exchange_char>
 616:	5e 9a       	sbi	0x0b, 6	; 11
 618:	ef e9       	ldi	r30, 0x9F	; 159
 61a:	ff e0       	ldi	r31, 0x0F	; 15
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <mirf_read_MAX_RT+0xe>
 620:	00 c0       	rjmp	.+0      	; 0x622 <mirf_read_MAX_RT+0x14>
 622:	00 00       	nop
 624:	82 95       	swap	r24
 626:	81 70       	andi	r24, 0x01	; 1
 628:	08 95       	ret

0000062a <mirf_config_register>:
 62a:	cf 93       	push	r28
 62c:	c6 2f       	mov	r28, r22
 62e:	5e 98       	cbi	0x0b, 6	; 11
 630:	8f 71       	andi	r24, 0x1F	; 31
 632:	80 62       	ori	r24, 0x20	; 32
 634:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <spi1_send_char>
 638:	85 e8       	ldi	r24, 0x85	; 133
 63a:	8a 95       	dec	r24
 63c:	f1 f7       	brne	.-4      	; 0x63a <mirf_config_register+0x10>
 63e:	00 00       	nop
 640:	8c 2f       	mov	r24, r28
 642:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <spi1_send_char>
 646:	5e 9a       	sbi	0x0b, 6	; 11
 648:	85 e8       	ldi	r24, 0x85	; 133
 64a:	8a 95       	dec	r24
 64c:	f1 f7       	brne	.-4      	; 0x64a <mirf_config_register+0x20>
 64e:	00 00       	nop
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <set_RX_MODE>:
 654:	60 e7       	ldi	r22, 0x70	; 112
 656:	87 e0       	ldi	r24, 0x07	; 7
 658:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 65c:	6b e5       	ldi	r22, 0x5B	; 91
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 664:	47 9a       	sbi	0x08, 7	; 8
 666:	08 95       	ret

00000668 <mirf_config>:
 668:	6c e6       	ldi	r22, 0x6C	; 108
 66a:	85 e0       	ldi	r24, 0x05	; 5
 66c:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	81 e1       	ldi	r24, 0x11	; 17
 674:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 678:	66 e0       	ldi	r22, 0x06	; 6
 67a:	82 e1       	ldi	r24, 0x12	; 18
 67c:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	83 e1       	ldi	r24, 0x13	; 19
 684:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	84 e1       	ldi	r24, 0x14	; 20
 68c:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	85 e1       	ldi	r24, 0x15	; 21
 694:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	86 e1       	ldi	r24, 0x16	; 22
 69c:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6a0:	66 e0       	ldi	r22, 0x06	; 6
 6a2:	86 e0       	ldi	r24, 0x06	; 6
 6a4:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6a8:	63 e0       	ldi	r22, 0x03	; 3
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6b0:	63 e0       	ldi	r22, 0x03	; 3
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	84 e0       	ldi	r24, 0x04	; 4
 6bc:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6c0:	60 e7       	ldi	r22, 0x70	; 112
 6c2:	87 e0       	ldi	r24, 0x07	; 7
 6c4:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6c8:	08 95       	ret

000006ca <mirf_get_data>:
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	ec 01       	movw	r28, r24
 6d0:	5e 98       	cbi	0x0b, 6	; 11
 6d2:	81 e6       	ldi	r24, 0x61	; 97
 6d4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <spi1_send_char>
 6d8:	46 e0       	ldi	r20, 0x06	; 6
 6da:	be 01       	movw	r22, r28
 6dc:	ce 01       	movw	r24, r28
 6de:	0e 94 22 04 	call	0x844	; 0x844 <spi1_exchange_bytes>
 6e2:	5e 9a       	sbi	0x0b, 6	; 11
 6e4:	60 e4       	ldi	r22, 0x40	; 64
 6e6:	87 e0       	ldi	r24, 0x07	; 7
 6e8:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	eb 01       	movw	r28, r22
 6fa:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 6fc:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 6fe:	8f 71       	andi	r24, 0x1F	; 31
 700:	80 62       	ori	r24, 0x20	; 32
 702:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <spi1_send_char>
	spi1_send_bytes(value, len);
 706:	61 2f       	mov	r22, r17
 708:	ce 01       	movw	r24, r28
 70a:	0e 94 0b 04 	call	0x816	; 0x816 <spi1_send_bytes>
	mirf_CSN_hi;
 70e:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 710:	85 e8       	ldi	r24, 0x85	; 133
 712:	8a 95       	dec	r24
 714:	f1 f7       	brne	.-4      	; 0x712 <mirf_write_register+0x20>
 716:	00 00       	nop
	_delay_us(25);
	
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	08 95       	ret

00000720 <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 720:	47 98       	cbi	0x08, 7	; 8
	mirf_write_register(RX_ADDR_P1, adr, 5);
 722:	45 e0       	ldi	r20, 0x05	; 5
 724:	bc 01       	movw	r22, r24
 726:	8b e0       	ldi	r24, 0x0B	; 11
 728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mirf_write_register>
	mirf_CE_hi;
 72c:	47 9a       	sbi	0x08, 7	; 8
 72e:	08 95       	ret

00000730 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 736:	45 e0       	ldi	r20, 0x05	; 5
 738:	bc 01       	movw	r22, r24
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 740:	45 e0       	ldi	r20, 0x05	; 5
 742:	be 01       	movw	r22, r28
 744:	80 e1       	ldi	r24, 0x10	; 16
 746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mirf_write_register>
}
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
 758:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 75a:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 75c:	6a e5       	ldi	r22, 0x5A	; 90
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
 764:	85 e8       	ldi	r24, 0x85	; 133
 766:	8a 95       	dec	r24
 768:	f1 f7       	brne	.-4      	; 0x766 <mirf_send+0x16>
 76a:	00 00       	nop
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 76c:	60 e7       	ldi	r22, 0x70	; 112
 76e:	87 e0       	ldi	r24, 0x07	; 7
 770:	0e 94 15 03 	call	0x62a	; 0x62a <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 774:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 776:	80 ea       	ldi	r24, 0xA0	; 160
 778:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 77c:	61 2f       	mov	r22, r17
 77e:	ce 01       	movw	r24, r28
 780:	0e 94 0b 04 	call	0x816	; 0x816 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 784:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 786:	47 9a       	sbi	0x08, 7	; 8
 788:	80 e5       	ldi	r24, 0x50	; 80
 78a:	8a 95       	dec	r24
 78c:	f1 f7       	brne	.-4      	; 0x78a <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 78e:	47 98       	cbi	0x08, 7	; 8
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	08 95       	ret

00000798 <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 7a2:	fc 01       	movw	r30, r24
 7a4:	80 81       	ld	r24, Z
 7a6:	8a 30       	cpi	r24, 0x0A	; 10
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <println_0+0x2c>
 7aa:	8b 33       	cpi	r24, 0x3B	; 59
 7ac:	79 f4       	brne	.+30     	; 0x7cc <println_0+0x34>
 7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <println_0+0x2c>
 7b0:	89 91       	ld	r24, Y+
 7b2:	8a 30       	cpi	r24, 0x0A	; 10
 7b4:	39 f0       	breq	.+14     	; 0x7c4 <println_0+0x2c>
 7b6:	8b 33       	cpi	r24, 0x3B	; 59
 7b8:	29 f0       	breq	.+10     	; 0x7c4 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 7ba:	0e 94 46 04 	call	0x88c	; 0x88c <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 7be:	0c 17       	cp	r16, r28
 7c0:	1d 07       	cpc	r17, r29
 7c2:	b1 f7       	brne	.-20     	; 0x7b0 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 7c4:	8a e0       	ldi	r24, 0x0A	; 10
 7c6:	0e 94 46 04 	call	0x88c	; 0x88c <usart0_send_char>
}
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 7cc:	0e 94 46 04 	call	0x88c	; 0x88c <usart0_send_char>
 7d0:	e8 01       	movw	r28, r16
 7d2:	21 96       	adiw	r28, 0x01	; 1
 7d4:	08 53       	subi	r16, 0x38	; 56
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
 7d8:	eb cf       	rjmp	.-42     	; 0x7b0 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	08 95       	ret

000007e4 <spi1_master_initialize>:
 7e4:	6b 9a       	sbi	0x0d, 3	; 13
 7e6:	57 9a       	sbi	0x0a, 7	; 10
 7e8:	56 9a       	sbi	0x0a, 6	; 10
 7ea:	82 e5       	ldi	r24, 0x52	; 82
 7ec:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 7f0:	08 95       	ret

000007f2 <spi1_send_char>:
 7f2:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 7f6:	ed ea       	ldi	r30, 0xAD	; 173
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	88 23       	and	r24, r24
 7fe:	ec f7       	brge	.-6      	; 0x7fa <spi1_send_char+0x8>
 800:	08 95       	ret

00000802 <spi1_exchange_char>:
 802:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 806:	ed ea       	ldi	r30, 0xAD	; 173
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	88 23       	and	r24, r24
 80e:	ec f7       	brge	.-6      	; 0x80a <spi1_exchange_char+0x8>
 810:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 814:	08 95       	ret

00000816 <spi1_send_bytes>:
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	66 23       	and	r22, r22
 81c:	81 f0       	breq	.+32     	; 0x83e <spi1_send_bytes+0x28>
 81e:	dc 01       	movw	r26, r24
 820:	9c 01       	movw	r18, r24
 822:	26 0f       	add	r18, r22
 824:	31 1d       	adc	r19, r1
 826:	ce ea       	ldi	r28, 0xAE	; 174
 828:	d0 e0       	ldi	r29, 0x00	; 0
 82a:	ed ea       	ldi	r30, 0xAD	; 173
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	9d 91       	ld	r25, X+
 830:	98 83       	st	Y, r25
 832:	90 81       	ld	r25, Z
 834:	99 23       	and	r25, r25
 836:	ec f7       	brge	.-6      	; 0x832 <spi1_send_bytes+0x1c>
 838:	a2 17       	cp	r26, r18
 83a:	b3 07       	cpc	r27, r19
 83c:	c1 f7       	brne	.-16     	; 0x82e <spi1_send_bytes+0x18>
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <spi1_exchange_bytes>:
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	44 23       	and	r20, r20
 84e:	c9 f0       	breq	.+50     	; 0x882 <spi1_exchange_bytes+0x3e>
 850:	dc 01       	movw	r26, r24
 852:	06 2f       	mov	r16, r22
 854:	17 2f       	mov	r17, r23
 856:	9c 01       	movw	r18, r24
 858:	24 0f       	add	r18, r20
 85a:	31 1d       	adc	r19, r1
 85c:	a9 01       	movw	r20, r18
 85e:	2e ea       	ldi	r18, 0xAE	; 174
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	ed ea       	ldi	r30, 0xAD	; 173
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	9d 91       	ld	r25, X+
 868:	e9 01       	movw	r28, r18
 86a:	98 83       	st	Y, r25
 86c:	90 81       	ld	r25, Z
 86e:	99 23       	and	r25, r25
 870:	ec f7       	brge	.-6      	; 0x86c <spi1_exchange_bytes+0x28>
 872:	e9 01       	movw	r28, r18
 874:	98 81       	ld	r25, Y
 876:	e8 01       	movw	r28, r16
 878:	99 93       	st	Y+, r25
 87a:	8e 01       	movw	r16, r28
 87c:	a4 17       	cp	r26, r20
 87e:	b5 07       	cpc	r27, r21
 880:	91 f7       	brne	.-28     	; 0x866 <spi1_exchange_bytes+0x22>
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	08 95       	ret

0000088c <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 88c:	e0 ec       	ldi	r30, 0xC0	; 192
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	90 81       	ld	r25, Z
 892:	95 ff       	sbrs	r25, 5
 894:	fd cf       	rjmp	.-6      	; 0x890 <usart0_send_char+0x4>
 896:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 89a:	08 95       	ret

0000089c <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 89c:	98 e9       	ldi	r25, 0x98	; 152
 89e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 8a2:	96 e0       	ldi	r25, 0x06	; 6
 8a4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 8a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 8ac:	08 95       	ret

000008ae <_exit>:
 8ae:	f8 94       	cli

000008b0 <__stop_program>:
 8b0:	ff cf       	rjmp	.-2      	; 0x8b0 <__stop_program>
