
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800122  00800122  00000588  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026c2  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cf  00000000  00000000  00002f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001358  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f1  00000000  00000000  000059cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b64  00000000  00000000  000063bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00007f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e2 ed       	ldi	r30, 0xD2	; 210
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 32       	cpi	r26, 0x22	; 34
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a2 e2       	ldi	r26, 0x22	; 34
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a7 32       	cpi	r26, 0x27	; 39
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 cb 00 	call	0x196	; 0x196 <main>
 102:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
	print_char_0(NL);
	
	transmission_count = 0;
	signal_strength = 0;
	max_rt_count = 0;
}
 10a:	6c 9a       	sbi	0x0d, 4	; 13
 10c:	25 9a       	sbi	0x04, 5	; 4
 10e:	3c 9a       	sbi	0x07, 4	; 7
 110:	08 95       	ret

00000112 <delay_ms>:
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	69 f0       	breq	.+26     	; 0x130 <delay_ms+0x1e>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	ef e9       	ldi	r30, 0x9F	; 159
 11c:	ff e0       	ldi	r31, 0x0F	; 15
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <delay_ms+0xc>
 122:	00 c0       	rjmp	.+0      	; 0x124 <delay_ms+0x12>
 124:	00 00       	nop
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	82 17       	cp	r24, r18
 12c:	93 07       	cpc	r25, r19
 12e:	a9 f7       	brne	.-22     	; 0x11a <delay_ms+0x8>
 130:	08 95       	ret

00000132 <flash_LED>:
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	88 23       	and	r24, r24
 13e:	79 f0       	breq	.+30     	; 0x15e <flash_LED+0x2c>
 140:	8b 01       	movw	r16, r22
 142:	d8 2f       	mov	r29, r24
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	68 94       	set
 148:	ff 24       	eor	r15, r15
 14a:	f5 f8       	bld	r15, 5
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	9f 25       	eor	r25, r15
 150:	95 b9       	out	0x05, r25	; 5
 152:	c8 01       	movw	r24, r16
 154:	0e 94 89 00 	call	0x112	; 0x112 <delay_ms>
 158:	cf 5f       	subi	r28, 0xFF	; 255
 15a:	dc 13       	cpse	r29, r28
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <flash_LED+0x1a>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	08 95       	ret

0000016a <setup_timer_1>:
 16a:	e0 e8       	ldi	r30, 0x80	; 128
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 6c       	ori	r24, 0xC0	; 192
 172:	80 83       	st	Z, r24
 174:	e1 e8       	ldi	r30, 0x81	; 129
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8d 60       	ori	r24, 0x0D	; 13
 17c:	80 83       	st	Z, r24
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	9e e1       	ldi	r25, 0x1E	; 30
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	ef e6       	ldi	r30, 0x6F	; 111
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <main>:
 196:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
 19a:	89 e1       	ldi	r24, 0x19	; 25
 19c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setup_usart0>
 1a0:	0e 94 26 02 	call	0x44c	; 0x44c <spi1_master_initialize>
 1a4:	0e 94 4f 01 	call	0x29e	; 0x29e <mirf_init>
 1a8:	0e 94 84 01 	call	0x308	; 0x308 <mirf_config>
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 cc 01 	call	0x398	; 0x398 <mirf_set_TADDR>
 1b4:	0e 94 b5 00 	call	0x16a	; 0x16a <setup_timer_1>
 1b8:	78 94       	sei
 1ba:	62 e3       	ldi	r22, 0x32	; 50
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	0e 94 99 00 	call	0x132	; 0x132 <flash_LED>
 1c4:	8b e0       	ldi	r24, 0x0B	; 11
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 00 02 	call	0x400	; 0x400 <println_0>
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9c e9       	ldi	r25, 0x9C	; 156
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x3a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x40>
 1d6:	00 00       	nop
 1d8:	68 94       	set
 1da:	ff 24       	eor	r15, r15
 1dc:	f5 f8       	bld	r15, 5
 1de:	c8 e0       	ldi	r28, 0x08	; 8
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	0c 2f       	mov	r16, r28
 1e4:	1d 2f       	mov	r17, r29
 1e6:	68 94       	set
 1e8:	ee 24       	eor	r14, r14
 1ea:	e4 f8       	bld	r14, 4
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	8f 25       	eor	r24, r15
 1f0:	85 b9       	out	0x05, r24	; 5
 1f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mtr_cmd>
 1f6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <mtr_cmd+0x1>
 1fa:	9c 01       	movw	r18, r24
 1fc:	29 51       	subi	r18, 0x19	; 25
 1fe:	3c 4f       	sbci	r19, 0xFC	; 252
 200:	2f 3c       	cpi	r18, 0xCF	; 207
 202:	37 40       	sbci	r19, 0x07	; 7
 204:	28 f0       	brcs	.+10     	; 0x210 <main+0x7a>
 206:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 20a:	21 95       	neg	r18
 20c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 210:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 214:	82 0f       	add	r24, r18
 216:	91 1d       	adc	r25, r1
 218:	27 fd       	sbrc	r18, 7
 21a:	9a 95       	dec	r25
 21c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <mtr_cmd+0x1>
 220:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mtr_cmd>
 224:	88 83       	st	Y, r24
 226:	99 83       	std	Y+1, r25	; 0x01
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	80 2f       	mov	r24, r16
 22c:	91 2f       	mov	r25, r17
 22e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mirf_send>
 232:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <transmission_count>
 236:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <transmission_count+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <transmission_count+0x1>
 240:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <transmission_count>
 244:	0e c0       	rjmp	.+28     	; 0x262 <main+0xcc>
 246:	0e 94 63 01 	call	0x2c6	; 0x2c6 <mirf_read_MAX_RT>
 24a:	88 23       	and	r24, r24
 24c:	51 f0       	breq	.+20     	; 0x262 <main+0xcc>
 24e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <max_rt_count>
 252:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <max_rt_count+0x1>
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <max_rt_count+0x1>
 25c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <max_rt_count>
 260:	04 c0       	rjmp	.+8      	; 0x26a <main+0xd4>
 262:	0e 94 56 01 	call	0x2ac	; 0x2ac <mirf_data_sent>
 266:	88 23       	and	r24, r24
 268:	71 f3       	breq	.-36     	; 0x246 <main+0xb0>
 26a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 26e:	88 23       	and	r24, r24
 270:	09 f4       	brne	.+2      	; 0x274 <main+0xde>
 272:	bc cf       	rjmp	.-136    	; 0x1ec <main+0x56>
 274:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 278:	8e b1       	in	r24, 0x0e	; 14
 27a:	8e 25       	eor	r24, r14
 27c:	8e b9       	out	0x0e, r24	; 14
 27e:	b6 cf       	rjmp	.-148    	; 0x1ec <main+0x56>

00000280 <__vector_13>:


//&&&&&&&&&&&&&&&&&&&&&& ISRs &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
ISR(TIMER1_COMPA_vect)
 {
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
	 TMR1_flag = 1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
}
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <mirf_init>:
void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
	mirf_write_register(RX_ADDR_P1, adr, 5);
	mirf_CE_hi;
 29e:	3f 9a       	sbi	0x07, 7	; 7
 2a0:	56 9a       	sbi	0x0a, 6	; 10
 2a2:	47 98       	cbi	0x08, 7	; 8
 2a4:	5e 9a       	sbi	0x0b, 6	; 11
 2a6:	0e 94 26 02 	call	0x44c	; 0x44c <spi1_master_initialize>
 2aa:	08 95       	ret

000002ac <mirf_data_sent>:
 2ac:	5e 98       	cbi	0x0b, 6	; 11
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	0e 94 35 02 	call	0x46a	; 0x46a <spi1_exchange_char>
 2b4:	5e 9a       	sbi	0x0b, 6	; 11
 2b6:	ef e9       	ldi	r30, 0x9F	; 159
 2b8:	ff e0       	ldi	r31, 0x0F	; 15
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <mirf_data_sent+0xe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <mirf_data_sent+0x14>
 2c0:	00 00       	nop
 2c2:	80 72       	andi	r24, 0x20	; 32
 2c4:	08 95       	ret

000002c6 <mirf_read_MAX_RT>:
 2c6:	5e 98       	cbi	0x0b, 6	; 11
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	0e 94 35 02 	call	0x46a	; 0x46a <spi1_exchange_char>
 2ce:	5e 9a       	sbi	0x0b, 6	; 11
 2d0:	ef e9       	ldi	r30, 0x9F	; 159
 2d2:	ff e0       	ldi	r31, 0x0F	; 15
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <mirf_read_MAX_RT+0xe>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <mirf_read_MAX_RT+0x14>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <mirf_config_register>:
 2de:	cf 93       	push	r28
 2e0:	c6 2f       	mov	r28, r22
 2e2:	5e 98       	cbi	0x0b, 6	; 11
 2e4:	8f 71       	andi	r24, 0x1F	; 31
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	0e 94 2d 02 	call	0x45a	; 0x45a <spi1_send_char>
 2ec:	85 e8       	ldi	r24, 0x85	; 133
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <mirf_config_register+0x10>
 2f2:	00 00       	nop
 2f4:	8c 2f       	mov	r24, r28
 2f6:	0e 94 2d 02 	call	0x45a	; 0x45a <spi1_send_char>
 2fa:	5e 9a       	sbi	0x0b, 6	; 11
 2fc:	85 e8       	ldi	r24, 0x85	; 133
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <mirf_config_register+0x20>
 302:	00 00       	nop
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <mirf_config>:
 308:	6c e6       	ldi	r22, 0x6C	; 108
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	82 e1       	ldi	r24, 0x12	; 18
 31c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	83 e1       	ldi	r24, 0x13	; 19
 324:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	84 e1       	ldi	r24, 0x14	; 20
 32c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	85 e1       	ldi	r24, 0x15	; 21
 334:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	86 e1       	ldi	r24, 0x16	; 22
 33c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 340:	66 e0       	ldi	r22, 0x06	; 6
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 358:	6f ef       	ldi	r22, 0xFF	; 255
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 360:	60 e7       	ldi	r22, 0x70	; 112
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
 368:	08 95       	ret

0000036a <mirf_write_register>:
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	eb 01       	movw	r28, r22
 372:	14 2f       	mov	r17, r20
 374:	5e 98       	cbi	0x0b, 6	; 11
 376:	8f 71       	andi	r24, 0x1F	; 31
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	0e 94 2d 02 	call	0x45a	; 0x45a <spi1_send_char>
 37e:	61 2f       	mov	r22, r17
 380:	ce 01       	movw	r24, r28
 382:	0e 94 3f 02 	call	0x47e	; 0x47e <spi1_send_bytes>
 386:	5e 9a       	sbi	0x0b, 6	; 11
 388:	85 e8       	ldi	r24, 0x85	; 133
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <mirf_write_register+0x20>
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	08 95       	ret

00000398 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 39e:	45 e0       	ldi	r20, 0x05	; 5
 3a0:	bc 01       	movw	r22, r24
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	0e 94 b5 01 	call	0x36a	; 0x36a <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 3a8:	45 e0       	ldi	r20, 0x05	; 5
 3aa:	be 01       	movw	r22, r28
 3ac:	80 e1       	ldi	r24, 0x10	; 16
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <mirf_write_register>
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ec 01       	movw	r28, r24
 3c0:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 3c2:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 3c4:	6a e5       	ldi	r22, 0x5A	; 90
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	85 e8       	ldi	r24, 0x85	; 133
 3ce:	8a 95       	dec	r24
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <mirf_send+0x16>
 3d2:	00 00       	nop
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 3d4:	60 e7       	ldi	r22, 0x70	; 112
 3d6:	87 e0       	ldi	r24, 0x07	; 7
 3d8:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 3dc:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 3de:	80 ea       	ldi	r24, 0xA0	; 160
 3e0:	0e 94 2d 02 	call	0x45a	; 0x45a <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 3e4:	61 2f       	mov	r22, r17
 3e6:	ce 01       	movw	r24, r28
 3e8:	0e 94 3f 02 	call	0x47e	; 0x47e <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 3ec:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 3ee:	47 9a       	sbi	0x08, 7	; 8
 3f0:	80 e5       	ldi	r24, 0x50	; 80
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 3f6:	47 98       	cbi	0x08, 7	; 8
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	08 95       	ret

00000400 <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 40a:	fc 01       	movw	r30, r24
 40c:	80 81       	ld	r24, Z
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	69 f0       	breq	.+26     	; 0x42c <println_0+0x2c>
 412:	8b 33       	cpi	r24, 0x3B	; 59
 414:	79 f4       	brne	.+30     	; 0x434 <println_0+0x34>
 416:	0a c0       	rjmp	.+20     	; 0x42c <println_0+0x2c>
 418:	89 91       	ld	r24, Y+
 41a:	8a 30       	cpi	r24, 0x0A	; 10
 41c:	39 f0       	breq	.+14     	; 0x42c <println_0+0x2c>
 41e:	8b 33       	cpi	r24, 0x3B	; 59
 420:	29 f0       	breq	.+10     	; 0x42c <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 422:	0e 94 56 02 	call	0x4ac	; 0x4ac <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 426:	0c 17       	cp	r16, r28
 428:	1d 07       	cpc	r17, r29
 42a:	b1 f7       	brne	.-20     	; 0x418 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	0e 94 56 02 	call	0x4ac	; 0x4ac <usart0_send_char>
}
 432:	07 c0       	rjmp	.+14     	; 0x442 <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 434:	0e 94 56 02 	call	0x4ac	; 0x4ac <usart0_send_char>
 438:	e8 01       	movw	r28, r16
 43a:	21 96       	adiw	r28, 0x01	; 1
 43c:	08 53       	subi	r16, 0x38	; 56
 43e:	1f 4f       	sbci	r17, 0xFF	; 255
 440:	eb cf       	rjmp	.-42     	; 0x418 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	08 95       	ret

0000044c <spi1_master_initialize>:
 44c:	6b 9a       	sbi	0x0d, 3	; 13
 44e:	57 9a       	sbi	0x0a, 7	; 10
 450:	56 9a       	sbi	0x0a, 6	; 10
 452:	82 e5       	ldi	r24, 0x52	; 82
 454:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 458:	08 95       	ret

0000045a <spi1_send_char>:
 45a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 45e:	ed ea       	ldi	r30, 0xAD	; 173
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	ec f7       	brge	.-6      	; 0x462 <spi1_send_char+0x8>
 468:	08 95       	ret

0000046a <spi1_exchange_char>:
 46a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 46e:	ed ea       	ldi	r30, 0xAD	; 173
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	88 23       	and	r24, r24
 476:	ec f7       	brge	.-6      	; 0x472 <spi1_exchange_char+0x8>
 478:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 47c:	08 95       	ret

0000047e <spi1_send_bytes>:
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	66 23       	and	r22, r22
 484:	81 f0       	breq	.+32     	; 0x4a6 <spi1_send_bytes+0x28>
 486:	dc 01       	movw	r26, r24
 488:	9c 01       	movw	r18, r24
 48a:	26 0f       	add	r18, r22
 48c:	31 1d       	adc	r19, r1
 48e:	ce ea       	ldi	r28, 0xAE	; 174
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	ed ea       	ldi	r30, 0xAD	; 173
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	9d 91       	ld	r25, X+
 498:	98 83       	st	Y, r25
 49a:	90 81       	ld	r25, Z
 49c:	99 23       	and	r25, r25
 49e:	ec f7       	brge	.-6      	; 0x49a <spi1_send_bytes+0x1c>
 4a0:	a2 17       	cp	r26, r18
 4a2:	b3 07       	cpc	r27, r19
 4a4:	c1 f7       	brne	.-16     	; 0x496 <spi1_send_bytes+0x18>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 4ac:	e0 ec       	ldi	r30, 0xC0	; 192
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	90 81       	ld	r25, Z
 4b2:	95 ff       	sbrs	r25, 5
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <usart0_send_char+0x4>
 4b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4ba:	08 95       	ret

000004bc <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 4bc:	98 e9       	ldi	r25, 0x98	; 152
 4be:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 4c2:	96 e0       	ldi	r25, 0x06	; 6
 4c4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 4c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
