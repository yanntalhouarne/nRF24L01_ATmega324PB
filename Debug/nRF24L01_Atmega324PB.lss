
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a80  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e62  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dae  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00003c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fd  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000137b  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00005c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e2 e4       	ldi	r30, 0x42	; 66
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 31       	cpi	r26, 0x14	; 20
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e1       	ldi	r26, 0x14	; 20
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a4 31       	cpi	r26, 0x14	; 20
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 85 00 	call	0x10a	; 0x10a <main>
 102:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <main>:



int main(void)
{
	println_0("System initialized;");
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 a5 00 	call	0x14a	; 0x14a <println_0>
	
	unsigned int miso1 = 0; // MISO 2-byte variable for SPI1 (AS5048a)
	
    while (1) 
    {
		PORTB &= ~(1<<SS1);
 112:	28 98       	cbi	0x05, 0	; 5
			miso1 = spi1_exchange_int(READ_ANGLE);
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f e3       	ldi	r25, 0x3F	; 63
 118:	0e 94 21 01 	call	0x242	; 0x242 <spi1_exchange_int>
		PORTB |= (1<<SS1);
 11c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	2a 95       	dec	r18
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x16>
 124:	00 00       	nop
		
		_delay_us(10);
		
		PORTB &= ~(1<<SS1);
 126:	28 98       	cbi	0x05, 0	; 5
			miso1 = spi1_exchange_int(READ_ANGLE);
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	9f e3       	ldi	r25, 0x3F	; 63
 12c:	0e 94 21 01 	call	0x242	; 0x242 <spi1_exchange_int>
		PORTB |= (1<<SS1);
 130:	28 9a       	sbi	0x05, 0	; 5
		
		println_int(miso1);
 132:	0e 94 cb 00 	call	0x196	; 0x196 <println_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9d e0       	ldi	r25, 0x0D	; 13
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x32>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x3c>
 146:	00 00       	nop
 148:	e4 cf       	rjmp	.-56     	; 0x112 <main+0x8>

0000014a <println_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	8c 01       	movw	r16, r24
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	8a 30       	cpi	r24, 0x0A	; 10
 15a:	69 f0       	breq	.+26     	; 0x176 <println_0+0x2c>
 15c:	8b 33       	cpi	r24, 0x3B	; 59
 15e:	79 f4       	brne	.+30     	; 0x17e <println_0+0x34>
 160:	0a c0       	rjmp	.+20     	; 0x176 <println_0+0x2c>
 162:	89 91       	ld	r24, Y+
 164:	8a 30       	cpi	r24, 0x0A	; 10
 166:	39 f0       	breq	.+14     	; 0x176 <println_0+0x2c>
 168:	8b 33       	cpi	r24, 0x3B	; 59
 16a:	29 f0       	breq	.+10     	; 0x176 <println_0+0x2c>
 16c:	0e 94 3a 01 	call	0x274	; 0x274 <usart0_send_char>
 170:	0c 17       	cp	r16, r28
 172:	1d 07       	cpc	r17, r29
 174:	b1 f7       	brne	.-20     	; 0x162 <println_0+0x18>
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	0e 94 3a 01 	call	0x274	; 0x274 <usart0_send_char>
 17c:	07 c0       	rjmp	.+14     	; 0x18c <println_0+0x42>
 17e:	0e 94 3a 01 	call	0x274	; 0x274 <usart0_send_char>
 182:	e8 01       	movw	r28, r16
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	08 53       	subi	r16, 0x38	; 56
 188:	1f 4f       	sbci	r17, 0xFF	; 255
 18a:	eb cf       	rjmp	.-42     	; 0x162 <println_0+0x18>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <println_int>:

void println_int(int number)
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	e2 97       	sbiw	r28, 0x32	; 50
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	8c 01       	movw	r16, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	89 f1       	breq	.+98     	; 0x21a <println_int+0x84>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
	{
		temp = temp /10;
 1bc:	ea e0       	ldi	r30, 0x0A	; 10
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <println_int+0x2e>
		num_digit++;
 1c2:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 1c4:	bf 01       	movw	r22, r30
 1c6:	0e 94 42 01 	call	0x284	; 0x284 <__divmodhi4>
 1ca:	cb 01       	movw	r24, r22
		num_digit++;
 1cc:	79 01       	movw	r14, r18
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	e4 1a       	sub	r14, r20
 1d2:	f4 0a       	sbc	r15, r20
void println_int(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <println_int+0x2c>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 1d8:	11 23       	and	r17, r17
 1da:	24 f4       	brge	.+8      	; 0x1e4 <println_int+0x4e>
 1dc:	79 01       	movw	r14, r18
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	e8 0e       	add	r14, r24
 1e2:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1e4:	4a e0       	ldi	r20, 0x0A	; 10
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 1f2:	1e 14       	cp	r1, r14
 1f4:	1f 04       	cpc	r1, r15
 1f6:	6c f4       	brge	.+26     	; 0x212 <println_int+0x7c>
 1f8:	8e 01       	movw	r16, r28
 1fa:	0f 5f       	subi	r16, 0xFF	; 255
 1fc:	1f 4f       	sbci	r17, 0xFF	; 255
 1fe:	e0 0e       	add	r14, r16
 200:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 202:	f8 01       	movw	r30, r16
 204:	81 91       	ld	r24, Z+
 206:	8f 01       	movw	r16, r30
 208:	0e 94 3a 01 	call	0x274	; 0x274 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 20c:	0e 15       	cp	r16, r14
 20e:	1f 05       	cpc	r17, r15
 210:	c1 f7       	brne	.-16     	; 0x202 <println_int+0x6c>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	0e 94 3a 01 	call	0x274	; 0x274 <usart0_send_char>
}
 218:	07 c0       	rjmp	.+14     	; 0x228 <println_int+0x92>
 21a:	4a e0       	ldi	r20, 0x0A	; 10
 21c:	be 01       	movw	r22, r28
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__itoa_ncheck>
 226:	f5 cf       	rjmp	.-22     	; 0x212 <println_int+0x7c>
 228:	e2 96       	adiw	r28, 0x32	; 50
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <spi1_exchange_int>:
{
	unsigned int miso = 0;
	
	// first send MSB
	//while (!(SPSR1 & (1 << SPIF)));
	SPDR1 = (char)(mosi >> 8); // start transmission by sending MSB of MOSI
 242:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

	while (!(SPSR1 & (1 << SPIF))); // wait for transmission complete
 246:	ed ea       	ldi	r30, 0xAD	; 173
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	99 23       	and	r25, r25
 24e:	ec f7       	brge	.-6      	; 0x24a <spi1_exchange_int+0x8>
	miso = (0xFF00) & (SPDR1 << 8); // store MSB of MISO
 250:	ee ea       	ldi	r30, 0xAE	; 174
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	20 81       	ld	r18, Z
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	32 2f       	mov	r19, r18
 25a:	22 27       	eor	r18, r18

	//while (!(SPSR1 & (1 << SPIF)));
	SPDR1 = (char)mosi; // send LSB of MOSI
 25c:	80 83       	st	Z, r24

	while (!(SPSR1 & (1 << SPIF)));// wait for transmission complete
 25e:	ed ea       	ldi	r30, 0xAD	; 173
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	90 81       	ld	r25, Z
 264:	99 23       	and	r25, r25
 266:	ec f7       	brge	.-6      	; 0x262 <spi1_exchange_int+0x20>
	miso |= (0x00FF)&(SPDR1); // store LSB of MISO
 268:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

	return miso;
}
 26c:	a9 01       	movw	r20, r18
 26e:	48 2b       	or	r20, r24
 270:	ca 01       	movw	r24, r20
 272:	08 95       	ret

00000274 <usart0_send_char>:
#include "usart.h"
#include "print.h"

void usart0_send_char(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE)))
 274:	e0 ec       	ldi	r30, 0xC0	; 192
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	90 81       	ld	r25, Z
 27a:	95 ff       	sbrs	r25, 5
 27c:	fd cf       	rjmp	.-6      	; 0x278 <usart0_send_char+0x4>
	; // wait for data buffer to be empty
	UDR0 = data;
 27e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 282:	08 95       	ret

00000284 <__divmodhi4>:
 284:	97 fb       	bst	r25, 7
 286:	07 2e       	mov	r0, r23
 288:	16 f4       	brtc	.+4      	; 0x28e <__divmodhi4+0xa>
 28a:	00 94       	com	r0
 28c:	07 d0       	rcall	.+14     	; 0x29c <__divmodhi4_neg1>
 28e:	77 fd       	sbrc	r23, 7
 290:	09 d0       	rcall	.+18     	; 0x2a4 <__divmodhi4_neg2>
 292:	0e 94 56 01 	call	0x2ac	; 0x2ac <__udivmodhi4>
 296:	07 fc       	sbrc	r0, 7
 298:	05 d0       	rcall	.+10     	; 0x2a4 <__divmodhi4_neg2>
 29a:	3e f4       	brtc	.+14     	; 0x2aa <__divmodhi4_exit>

0000029c <__divmodhi4_neg1>:
 29c:	90 95       	com	r25
 29e:	81 95       	neg	r24
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	08 95       	ret

000002a4 <__divmodhi4_neg2>:
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255

000002aa <__divmodhi4_exit>:
 2aa:	08 95       	ret

000002ac <__udivmodhi4>:
 2ac:	aa 1b       	sub	r26, r26
 2ae:	bb 1b       	sub	r27, r27
 2b0:	51 e1       	ldi	r21, 0x11	; 17
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <__udivmodhi4_ep>

000002b4 <__udivmodhi4_loop>:
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	a6 17       	cp	r26, r22
 2ba:	b7 07       	cpc	r27, r23
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <__udivmodhi4_ep>
 2be:	a6 1b       	sub	r26, r22
 2c0:	b7 0b       	sbc	r27, r23

000002c2 <__udivmodhi4_ep>:
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	5a 95       	dec	r21
 2c8:	a9 f7       	brne	.-22     	; 0x2b4 <__udivmodhi4_loop>
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	08 95       	ret

000002d4 <__itoa_ncheck>:
 2d4:	bb 27       	eor	r27, r27
 2d6:	4a 30       	cpi	r20, 0x0A	; 10
 2d8:	31 f4       	brne	.+12     	; 0x2e6 <__itoa_ncheck+0x12>
 2da:	99 23       	and	r25, r25
 2dc:	22 f4       	brpl	.+8      	; 0x2e6 <__itoa_ncheck+0x12>
 2de:	bd e2       	ldi	r27, 0x2D	; 45
 2e0:	90 95       	com	r25
 2e2:	81 95       	neg	r24
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__utoa_common>

000002ea <__utoa_ncheck>:
 2ea:	bb 27       	eor	r27, r27

000002ec <__utoa_common>:
 2ec:	fb 01       	movw	r30, r22
 2ee:	55 27       	eor	r21, r21
 2f0:	aa 27       	eor	r26, r26
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	aa 1f       	adc	r26, r26
 2f8:	a4 17       	cp	r26, r20
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__utoa_common+0x14>
 2fc:	a4 1b       	sub	r26, r20
 2fe:	83 95       	inc	r24
 300:	50 51       	subi	r21, 0x10	; 16
 302:	b9 f7       	brne	.-18     	; 0x2f2 <__utoa_common+0x6>
 304:	a0 5d       	subi	r26, 0xD0	; 208
 306:	aa 33       	cpi	r26, 0x3A	; 58
 308:	08 f0       	brcs	.+2      	; 0x30c <__utoa_common+0x20>
 30a:	a9 5d       	subi	r26, 0xD9	; 217
 30c:	a1 93       	st	Z+, r26
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	79 f7       	brne	.-34     	; 0x2f0 <__utoa_common+0x4>
 312:	b1 11       	cpse	r27, r1
 314:	b1 93       	st	Z+, r27
 316:	11 92       	st	Z+, r1
 318:	cb 01       	movw	r24, r22
 31a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <strrev>

0000031e <strrev>:
 31e:	dc 01       	movw	r26, r24
 320:	fc 01       	movw	r30, r24
 322:	67 2f       	mov	r22, r23
 324:	71 91       	ld	r23, Z+
 326:	77 23       	and	r23, r23
 328:	e1 f7       	brne	.-8      	; 0x322 <strrev+0x4>
 32a:	32 97       	sbiw	r30, 0x02	; 2
 32c:	04 c0       	rjmp	.+8      	; 0x336 <strrev+0x18>
 32e:	7c 91       	ld	r23, X
 330:	6d 93       	st	X+, r22
 332:	70 83       	st	Z, r23
 334:	62 91       	ld	r22, -Z
 336:	ae 17       	cp	r26, r30
 338:	bf 07       	cpc	r27, r31
 33a:	c8 f3       	brcs	.-14     	; 0x32e <strrev+0x10>
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
