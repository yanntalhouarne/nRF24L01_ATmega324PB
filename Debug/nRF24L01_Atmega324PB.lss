
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000588  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  00000622  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002523  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108b  00000000  00000000  00002e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000126c  00000000  00000000  00003ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00005110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098e  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a1f  00000000  00000000  00006072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00007a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e8       	ldi	r30, 0x88	; 136
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 30       	cpi	r26, 0x0B	; 11
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 b4 00 	call	0x168	; 0x168 <main>
 102:	0c 94 c2 02 	jmp	0x584	; 0x584 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& MISC &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 10a:	6c 9a       	sbi	0x0d, 4	; 13
	DDRC |= (1<<4);
 10c:	3c 9a       	sbi	0x07, 4	; 7
 10e:	08 95       	ret

00000110 <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	69 f0       	breq	.+26     	; 0x12e <delay_ms+0x1e>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_ms+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <delay_ms+0x12>
 122:	00 00       	nop
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	a9 f7       	brne	.-22     	; 0x118 <delay_ms+0x8>
 12e:	08 95       	ret

00000130 <flash_LED>:
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <flash_LED+0x2c>
 13e:	8b 01       	movw	r16, r22
 140:	d8 2f       	mov	r29, r24
 142:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 144:	68 94       	set
 146:	ff 24       	eor	r15, r15
 148:	f4 f8       	bld	r15, 4
 14a:	9e b1       	in	r25, 0x0e	; 14
 14c:	9f 25       	eor	r25, r15
 14e:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 150:	c8 01       	movw	r24, r16
 152:	0e 94 88 00 	call	0x110	; 0x110 <delay_ms>
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	dc 13       	cpse	r29, r28
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	08 95       	ret

00000168 <main>:
uint8_t transmission_count = 0;


int main(void)
{
	setup_gpios(); 
 168:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	
	/* USART setup */
	setup_usart0(BR_38400); // for NEO6 GPS
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <setup_usart0>
	
	/* nRF24L01 setup */
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 172:	0e 94 24 02 	call	0x448	; 0x448 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 176:	0e 94 1b 01 	call	0x236	; 0x236 <mirf_init>
	mirf_config(); // configure nRF24L01
 17a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mirf_config>
	mirf_set_TADDR(tx_address);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 9a 01 	call	0x334	; 0x334 <mirf_set_TADDR>
	
	buffer[0] = 10;
 186:	e8 e0       	ldi	r30, 0x08	; 8
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	80 83       	st	Z, r24
	buffer[1] = 20;
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = 30;
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	82 83       	std	Z+2, r24	; 0x02
			
	sei(); // enable global interrupts
 196:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 198:	62 e3       	ldi	r22, 0x32	; 50
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	0e 94 98 00 	call	0x130	; 0x130 <flash_LED>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	39 e6       	ldi	r19, 0x69	; 105
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	30 40       	sbci	r19, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x40>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x4a>
 1b2:	00 00       	nop
	_delay_ms(1000);
	
    while (1) 
    {
		TOGGLE_LED;
 1b4:	68 94       	set
 1b6:	dd 24       	eor	r13, r13
 1b8:	d4 f8       	bld	r13, 4
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1ba:	c8 e0       	ldi	r28, 0x08	; 8
 1bc:	d1 e0       	ldi	r29, 0x01	; 1
 1be:	ec 2e       	mov	r14, r28
 1c0:	fd 2e       	mov	r15, r29
			}
		}
		
		if (transmission_count == 100)
		{
			print_int_0(100-max_rt_count);
 1c2:	04 e6       	ldi	r16, 0x64	; 100
 1c4:	10 e0       	ldi	r17, 0x00	; 0
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
	_delay_ms(1000);
	
    while (1) 
    {
		TOGGLE_LED;
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	8d 25       	eor	r24, r13
 1ca:	8e b9       	out	0x0e, r24	; 14
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1cc:	88 81       	ld	r24, Y
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	88 83       	st	Y, r24
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	8a 83       	std	Y+2, r24	; 0x02
		  
		mirf_send(buffer, mirf_PAYLOAD);
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	8e 2d       	mov	r24, r14
 1e2:	9f 2d       	mov	r25, r15
 1e4:	0e 94 aa 01 	call	0x354	; 0x354 <mirf_send>
		transmission_count++;
 1e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		
		while (!mirf_data_sent())
 1f2:	0a c0       	rjmp	.+20     	; 0x208 <main+0xa0>
		{
			if (mirf_read_MAX_RT())
 1f4:	0e 94 2f 01 	call	0x25e	; 0x25e <mirf_read_MAX_RT>
 1f8:	88 23       	and	r24, r24
 1fa:	31 f0       	breq	.+12     	; 0x208 <main+0xa0>
			{
				max_rt_count++;	
 1fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <max_rt_count>
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <max_rt_count>
				break;
 206:	04 c0       	rjmp	.+8      	; 0x210 <main+0xa8>
			buffer[i]++;
		  
		mirf_send(buffer, mirf_PAYLOAD);
		transmission_count++;
		
		while (!mirf_data_sent())
 208:	0e 94 22 01 	call	0x244	; 0x244 <mirf_data_sent>
 20c:	88 23       	and	r24, r24
 20e:	91 f3       	breq	.-28     	; 0x1f4 <main+0x8c>
				max_rt_count++;	
				break;
			}
		}
		
		if (transmission_count == 100)
 210:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	b9 f6       	brne	.-82     	; 0x1c6 <main+0x5e>
		{
			print_int_0(100-max_rt_count);
 218:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <max_rt_count>
 21c:	98 01       	movw	r18, r16
 21e:	28 1b       	sub	r18, r24
 220:	31 09       	sbc	r19, r1
 222:	c9 01       	movw	r24, r18
 224:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <print_int_0>
			print_char_0('%');
 228:	85 e2       	ldi	r24, 0x25	; 37
 22a:	0e 94 ce 01 	call	0x39c	; 0x39c <print_char_0>
			print_char_0(NL);
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 ce 01 	call	0x39c	; 0x39c <print_char_0>
 234:	c8 cf       	rjmp	.-112    	; 0x1c6 <main+0x5e>

00000236 <mirf_init>:
void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
	mirf_write_register(RX_ADDR_P1, adr, 5);
	mirf_CE_hi;
 236:	3f 9a       	sbi	0x07, 7	; 7
 238:	56 9a       	sbi	0x0a, 6	; 10
 23a:	47 98       	cbi	0x08, 7	; 8
 23c:	5e 9a       	sbi	0x0b, 6	; 11
 23e:	0e 94 24 02 	call	0x448	; 0x448 <spi1_master_initialize>
 242:	08 95       	ret

00000244 <mirf_data_sent>:
 244:	5e 98       	cbi	0x0b, 6	; 11
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	0e 94 33 02 	call	0x466	; 0x466 <spi1_exchange_char>
 24c:	5e 9a       	sbi	0x0b, 6	; 11
 24e:	ef ec       	ldi	r30, 0xCF	; 207
 250:	f7 e0       	ldi	r31, 0x07	; 7
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <mirf_data_sent+0xe>
 256:	00 c0       	rjmp	.+0      	; 0x258 <mirf_data_sent+0x14>
 258:	00 00       	nop
 25a:	80 72       	andi	r24, 0x20	; 32
 25c:	08 95       	ret

0000025e <mirf_read_MAX_RT>:
 25e:	5e 98       	cbi	0x0b, 6	; 11
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	0e 94 33 02 	call	0x466	; 0x466 <spi1_exchange_char>
 266:	5e 9a       	sbi	0x0b, 6	; 11
 268:	ef ec       	ldi	r30, 0xCF	; 207
 26a:	f7 e0       	ldi	r31, 0x07	; 7
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <mirf_read_MAX_RT+0xe>
 270:	00 c0       	rjmp	.+0      	; 0x272 <mirf_read_MAX_RT+0x14>
 272:	00 00       	nop
 274:	82 95       	swap	r24
 276:	81 70       	andi	r24, 0x01	; 1
 278:	08 95       	ret

0000027a <mirf_config_register>:
 27a:	cf 93       	push	r28
 27c:	c6 2f       	mov	r28, r22
 27e:	5e 98       	cbi	0x0b, 6	; 11
 280:	8f 71       	andi	r24, 0x1F	; 31
 282:	80 62       	ori	r24, 0x20	; 32
 284:	0e 94 2b 02 	call	0x456	; 0x456 <spi1_send_char>
 288:	82 e4       	ldi	r24, 0x42	; 66
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <mirf_config_register+0x10>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <mirf_config_register+0x16>
 290:	8c 2f       	mov	r24, r28
 292:	0e 94 2b 02 	call	0x456	; 0x456 <spi1_send_char>
 296:	5e 9a       	sbi	0x0b, 6	; 11
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <mirf_config_register+0x20>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <mirf_config_register+0x26>
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <mirf_config>:
 2a4:	6c e6       	ldi	r22, 0x6C	; 108
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	81 e1       	ldi	r24, 0x11	; 17
 2b0:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	82 e1       	ldi	r24, 0x12	; 18
 2b8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	83 e1       	ldi	r24, 0x13	; 19
 2c0:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	84 e1       	ldi	r24, 0x14	; 20
 2c8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	85 e1       	ldi	r24, 0x15	; 21
 2d0:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	86 e1       	ldi	r24, 0x16	; 22
 2d8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2dc:	66 e0       	ldi	r22, 0x06	; 6
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2f4:	6f ef       	ldi	r22, 0xFF	; 255
 2f6:	84 e0       	ldi	r24, 0x04	; 4
 2f8:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 2fc:	60 e7       	ldi	r22, 0x70	; 112
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
 304:	08 95       	ret

00000306 <mirf_write_register>:
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	eb 01       	movw	r28, r22
 30e:	14 2f       	mov	r17, r20
 310:	5e 98       	cbi	0x0b, 6	; 11
 312:	8f 71       	andi	r24, 0x1F	; 31
 314:	80 62       	ori	r24, 0x20	; 32
 316:	0e 94 2b 02 	call	0x456	; 0x456 <spi1_send_char>
 31a:	61 2f       	mov	r22, r17
 31c:	ce 01       	movw	r24, r28
 31e:	0e 94 3d 02 	call	0x47a	; 0x47a <spi1_send_bytes>
 322:	5e 9a       	sbi	0x0b, 6	; 11
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <mirf_write_register+0x20>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <mirf_write_register+0x26>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	08 95       	ret

00000334 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 33a:	45 e0       	ldi	r20, 0x05	; 5
 33c:	bc 01       	movw	r22, r24
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	0e 94 83 01 	call	0x306	; 0x306 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 344:	45 e0       	ldi	r20, 0x05	; 5
 346:	be 01       	movw	r22, r28
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	0e 94 83 01 	call	0x306	; 0x306 <mirf_write_register>
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
 35c:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 35e:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 360:	6a e5       	ldi	r22, 0x5A	; 90
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <mirf_send+0x16>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <mirf_send+0x1c>
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 370:	60 e7       	ldi	r22, 0x70	; 112
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	0e 94 3d 01 	call	0x27a	; 0x27a <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 378:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 37a:	80 ea       	ldi	r24, 0xA0	; 160
 37c:	0e 94 2b 02 	call	0x456	; 0x456 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 380:	61 2f       	mov	r22, r17
 382:	ce 01       	movw	r24, r28
 384:	0e 94 3d 02 	call	0x47a	; 0x47a <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 388:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 38a:	47 9a       	sbi	0x08, 7	; 8
 38c:	88 e2       	ldi	r24, 0x28	; 40
 38e:	8a 95       	dec	r24
 390:	f1 f7       	brne	.-4      	; 0x38e <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 392:	47 98       	cbi	0x08, 7	; 8
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	08 95       	ret

0000039c <print_char_0>:
		usart1_send_char(char_array[i]);
		
	}
	usart1_send_char(0x0D); // CR
	usart1_send_char(0x0A); // NL
}
 39c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <usart0_send_char>
 3a0:	08 95       	ret

000003a2 <print_int_0>:

void print_int_0(int number)
{
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	c0 54       	subi	r28, 0x40	; 64
 3b4:	d1 09       	sbc	r29, r1
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	8c 01       	movw	r16, r24
	if (number == 0)
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	31 f4       	brne	.+12     	; 0x3d2 <print_int_0+0x30>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 3c6:	80 e3       	ldi	r24, 0x30	; 48
 3c8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <usart0_send_char>
{
	if (number == 0)
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
 3cc:	e1 2c       	mov	r14, r1
 3ce:	f1 2c       	mov	r15, r1
 3d0:	16 c0       	rjmp	.+44     	; 0x3fe <print_int_0+0x5c>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 3d6:	ea e0       	ldi	r30, 0x0A	; 10
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	01 c0       	rjmp	.+2      	; 0x3de <print_int_0+0x3c>
		num_digit++;
 3dc:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 3de:	bf 01       	movw	r22, r30
 3e0:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>
 3e4:	cb 01       	movw	r24, r22
		num_digit++;
 3e6:	79 01       	movw	r14, r18
 3e8:	4f ef       	ldi	r20, 0xFF	; 255
 3ea:	e4 1a       	sub	r14, r20
 3ec:	f4 0a       	sbc	r15, r20
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <print_int_0+0x3a>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 3f2:	11 23       	and	r17, r17
 3f4:	24 f4       	brge	.+8      	; 0x3fe <print_int_0+0x5c>
 3f6:	79 01       	movw	r14, r18
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	e8 0e       	add	r14, r24
 3fc:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3fe:	4a e0       	ldi	r20, 0x0A	; 10
 400:	be 01       	movw	r22, r28
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	c8 01       	movw	r24, r16
 408:	0e 94 8d 02 	call	0x51a	; 0x51a <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 40c:	1e 14       	cp	r1, r14
 40e:	1f 04       	cpc	r1, r15
 410:	6c f4       	brge	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 412:	8e 01       	movw	r16, r28
 414:	0f 5f       	subi	r16, 0xFF	; 255
 416:	1f 4f       	sbci	r17, 0xFF	; 255
 418:	e0 0e       	add	r14, r16
 41a:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 41c:	f8 01       	movw	r30, r16
 41e:	81 91       	ld	r24, Z+
 420:	8f 01       	movw	r16, r30
 422:	0e 94 54 02 	call	0x4a8	; 0x4a8 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 426:	0e 15       	cp	r16, r14
 428:	1f 05       	cpc	r17, r15
 42a:	c1 f7       	brne	.-16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		usart0_send_char(char_array[i]);
	}
}
 42c:	c0 5c       	subi	r28, 0xC0	; 192
 42e:	df 4f       	sbci	r29, 0xFF	; 255
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	08 95       	ret

00000448 <spi1_master_initialize>:
 448:	6b 9a       	sbi	0x0d, 3	; 13
 44a:	57 9a       	sbi	0x0a, 7	; 10
 44c:	56 9a       	sbi	0x0a, 6	; 10
 44e:	82 e5       	ldi	r24, 0x52	; 82
 450:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 454:	08 95       	ret

00000456 <spi1_send_char>:
 456:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 45a:	ed ea       	ldi	r30, 0xAD	; 173
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	88 23       	and	r24, r24
 462:	ec f7       	brge	.-6      	; 0x45e <spi1_send_char+0x8>
 464:	08 95       	ret

00000466 <spi1_exchange_char>:
 466:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 46a:	ed ea       	ldi	r30, 0xAD	; 173
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	88 23       	and	r24, r24
 472:	ec f7       	brge	.-6      	; 0x46e <spi1_exchange_char+0x8>
 474:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 478:	08 95       	ret

0000047a <spi1_send_bytes>:
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	66 23       	and	r22, r22
 480:	81 f0       	breq	.+32     	; 0x4a2 <spi1_send_bytes+0x28>
 482:	dc 01       	movw	r26, r24
 484:	9c 01       	movw	r18, r24
 486:	26 0f       	add	r18, r22
 488:	31 1d       	adc	r19, r1
 48a:	ce ea       	ldi	r28, 0xAE	; 174
 48c:	d0 e0       	ldi	r29, 0x00	; 0
 48e:	ed ea       	ldi	r30, 0xAD	; 173
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	9d 91       	ld	r25, X+
 494:	98 83       	st	Y, r25
 496:	90 81       	ld	r25, Z
 498:	99 23       	and	r25, r25
 49a:	ec f7       	brge	.-6      	; 0x496 <spi1_send_bytes+0x1c>
 49c:	a2 17       	cp	r26, r18
 49e:	b3 07       	cpc	r27, r19
 4a0:	c1 f7       	brne	.-16     	; 0x492 <spi1_send_bytes+0x18>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 4a8:	e0 ec       	ldi	r30, 0xC0	; 192
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	90 81       	ld	r25, Z
 4ae:	95 ff       	sbrs	r25, 5
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <usart0_send_char+0x4>
 4b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4b6:	08 95       	ret

000004b8 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 4b8:	98 e9       	ldi	r25, 0x98	; 152
 4ba:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 4be:	96 e0       	ldi	r25, 0x06	; 6
 4c0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 4c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4c8:	08 95       	ret

000004ca <__divmodhi4>:
 4ca:	97 fb       	bst	r25, 7
 4cc:	07 2e       	mov	r0, r23
 4ce:	16 f4       	brtc	.+4      	; 0x4d4 <__divmodhi4+0xa>
 4d0:	00 94       	com	r0
 4d2:	07 d0       	rcall	.+14     	; 0x4e2 <__divmodhi4_neg1>
 4d4:	77 fd       	sbrc	r23, 7
 4d6:	09 d0       	rcall	.+18     	; 0x4ea <__divmodhi4_neg2>
 4d8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__udivmodhi4>
 4dc:	07 fc       	sbrc	r0, 7
 4de:	05 d0       	rcall	.+10     	; 0x4ea <__divmodhi4_neg2>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__divmodhi4_exit>

000004e2 <__divmodhi4_neg1>:
 4e2:	90 95       	com	r25
 4e4:	81 95       	neg	r24
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__divmodhi4_neg2>:
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255

000004f0 <__divmodhi4_exit>:
 4f0:	08 95       	ret

000004f2 <__udivmodhi4>:
 4f2:	aa 1b       	sub	r26, r26
 4f4:	bb 1b       	sub	r27, r27
 4f6:	51 e1       	ldi	r21, 0x11	; 17
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <__udivmodhi4_ep>

000004fa <__udivmodhi4_loop>:
 4fa:	aa 1f       	adc	r26, r26
 4fc:	bb 1f       	adc	r27, r27
 4fe:	a6 17       	cp	r26, r22
 500:	b7 07       	cpc	r27, r23
 502:	10 f0       	brcs	.+4      	; 0x508 <__udivmodhi4_ep>
 504:	a6 1b       	sub	r26, r22
 506:	b7 0b       	sbc	r27, r23

00000508 <__udivmodhi4_ep>:
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	5a 95       	dec	r21
 50e:	a9 f7       	brne	.-22     	; 0x4fa <__udivmodhi4_loop>
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	bc 01       	movw	r22, r24
 516:	cd 01       	movw	r24, r26
 518:	08 95       	ret

0000051a <__itoa_ncheck>:
 51a:	bb 27       	eor	r27, r27
 51c:	4a 30       	cpi	r20, 0x0A	; 10
 51e:	31 f4       	brne	.+12     	; 0x52c <__itoa_ncheck+0x12>
 520:	99 23       	and	r25, r25
 522:	22 f4       	brpl	.+8      	; 0x52c <__itoa_ncheck+0x12>
 524:	bd e2       	ldi	r27, 0x2D	; 45
 526:	90 95       	com	r25
 528:	81 95       	neg	r24
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	0c 94 99 02 	jmp	0x532	; 0x532 <__utoa_common>

00000530 <__utoa_ncheck>:
 530:	bb 27       	eor	r27, r27

00000532 <__utoa_common>:
 532:	fb 01       	movw	r30, r22
 534:	55 27       	eor	r21, r21
 536:	aa 27       	eor	r26, r26
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	aa 1f       	adc	r26, r26
 53e:	a4 17       	cp	r26, r20
 540:	10 f0       	brcs	.+4      	; 0x546 <__utoa_common+0x14>
 542:	a4 1b       	sub	r26, r20
 544:	83 95       	inc	r24
 546:	50 51       	subi	r21, 0x10	; 16
 548:	b9 f7       	brne	.-18     	; 0x538 <__utoa_common+0x6>
 54a:	a0 5d       	subi	r26, 0xD0	; 208
 54c:	aa 33       	cpi	r26, 0x3A	; 58
 54e:	08 f0       	brcs	.+2      	; 0x552 <__utoa_common+0x20>
 550:	a9 5d       	subi	r26, 0xD9	; 217
 552:	a1 93       	st	Z+, r26
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	79 f7       	brne	.-34     	; 0x536 <__utoa_common+0x4>
 558:	b1 11       	cpse	r27, r1
 55a:	b1 93       	st	Z+, r27
 55c:	11 92       	st	Z+, r1
 55e:	cb 01       	movw	r24, r22
 560:	0c 94 b2 02 	jmp	0x564	; 0x564 <strrev>

00000564 <strrev>:
 564:	dc 01       	movw	r26, r24
 566:	fc 01       	movw	r30, r24
 568:	67 2f       	mov	r22, r23
 56a:	71 91       	ld	r23, Z+
 56c:	77 23       	and	r23, r23
 56e:	e1 f7       	brne	.-8      	; 0x568 <strrev+0x4>
 570:	32 97       	sbiw	r30, 0x02	; 2
 572:	04 c0       	rjmp	.+8      	; 0x57c <strrev+0x18>
 574:	7c 91       	ld	r23, X
 576:	6d 93       	st	X+, r22
 578:	70 83       	st	Z, r23
 57a:	62 91       	ld	r22, -Z
 57c:	ae 17       	cp	r26, r30
 57e:	bf 07       	cpc	r27, r31
 580:	c8 f3       	brcs	.-14     	; 0x574 <strrev+0x10>
 582:	08 95       	ret

00000584 <_exit>:
 584:	f8 94       	cli

00000586 <__stop_program>:
 586:	ff cf       	rjmp	.-2      	; 0x586 <__stop_program>
