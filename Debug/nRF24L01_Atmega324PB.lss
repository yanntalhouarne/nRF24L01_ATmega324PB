
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000006d6  0000076a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080012e  0080012e  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002558  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100e  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001243  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  000051ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c9  00000000  00000000  00005734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c0d  00000000  00000000  00005ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 ed       	ldi	r30, 0xD6	; 214
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 32       	cpi	r26, 0x2E	; 46
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e2       	ldi	r26, 0x2E	; 46
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	af 34       	cpi	r26, 0x4F	; 79
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 102:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output 
 10a:	20 9a       	sbi	0x04, 0	; 4
 10c:	08 95       	ret

0000010e <main>:

uint8_t status = 0;

int main(void)
{
	setup_gpios();
 10e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 03 03 	call	0x606	; 0x606 <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 118:	0e 94 a7 02 	call	0x54e	; 0x54e <spi1_master_initialize>
	mirf_init();
 11c:	0e 94 33 01 	call	0x266	; 0x266 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	38 e3       	ldi	r19, 0x38	; 56
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x22>
 130:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 132:	95 b1       	in	r25, 0x05	; 5
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 27       	eor	r25, r24
 138:	95 b9       	out	0x05, r25	; 5
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	20 e7       	ldi	r18, 0x70	; 112
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	98 27       	eor	r25, r24
 150:	95 b9       	out	0x05, r25	; 5
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	20 e7       	ldi	r18, 0x70	; 112
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x54>
 162:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 164:	95 b1       	in	r25, 0x05	; 5
 166:	98 27       	eor	r25, r24
 168:	95 b9       	out	0x05, r25	; 5
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	20 e7       	ldi	r18, 0x70	; 112
 16e:	32 e0       	ldi	r19, 0x02	; 2
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x62>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x6c>
 17a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	98 27       	eor	r25, r24
 180:	95 b9       	out	0x05, r25	; 5
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	20 e7       	ldi	r18, 0x70	; 112
 186:	32 e0       	ldi	r19, 0x02	; 2
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 194:	95 b1       	in	r25, 0x05	; 5
 196:	98 27       	eor	r25, r24
 198:	95 b9       	out	0x05, r25	; 5
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x92>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x9c>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	98 27       	eor	r25, r24
 1b0:	95 b9       	out	0x05, r25	; 5
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	20 e7       	ldi	r18, 0x70	; 112
 1b6:	32 e0       	ldi	r19, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xaa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb4>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	98 27       	eor	r25, r24
 1c8:	95 b9       	out	0x05, r25	; 5
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xc2>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xcc>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	89 27       	eor	r24, r25
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	99 e6       	ldi	r25, 0x69	; 105
 1e6:	28 e1       	ldi	r18, 0x18	; 24
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xda>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xe4>
 1f2:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 1f4:	78 94       	sei
	
	mirf_config();
 1f6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <mirf_config>

	println_0("nRF24L01 initialized...;");
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 2b 02 	call	0x456	; 0x456 <println_0>
 202:	8f e1       	ldi	r24, 0x1F	; 31
 204:	9e e4       	ldi	r25, 0x4E	; 78
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xf8>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xfe>
 20c:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		buffer[0]++;
 20e:	ce e3       	ldi	r28, 0x3E	; 62
 210:	d1 e0       	ldi	r29, 0x01	; 1
		//buffer[1] = 2;
		TOGGLE_LED;
 212:	11 e0       	ldi	r17, 0x01	; 1
	println_0("nRF24L01 initialized...;");
	_delay_ms(10);

    while (1) 
    {
		buffer[0]++;
 214:	88 81       	ld	r24, Y
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	88 83       	st	Y, r24
		//buffer[1] = 2;
		TOGGLE_LED;
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	81 27       	eor	r24, r17
 21e:	85 b9       	out	0x05, r24	; 5
		//println_0("Sending data...;");
		//_delay_ms(1);
		mirf_send(buffer, mirf_PAYLOAD);
 220:	60 e1       	ldi	r22, 0x10	; 16
 222:	ce 01       	movw	r24, r28
 224:	0e 94 8e 01 	call	0x31c	; 0x31c <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	9a e1       	ldi	r25, 0x1A	; 26
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x11c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x122>
		_delay_us(10);
		while (!mirf_data_sent());
 230:	0e 94 4e 01 	call	0x29c	; 0x29c <mirf_data_sent>
 234:	88 23       	and	r24, r24
 236:	e1 f3       	breq	.-8      	; 0x230 <main+0x122>
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 238:	60 e3       	ldi	r22, 0x30	; 48
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
 240:	2a e1       	ldi	r18, 0x1A	; 26
 242:	2a 95       	dec	r18
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x134>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x13a>

		//println_0("Waiting for echo...;");
		_delay_us(10);
		while(!mirf_data_ready()); // wait for the receiver to echo the data sent
 248:	0e 94 41 01 	call	0x282	; 0x282 <mirf_data_ready>
 24c:	88 23       	and	r24, r24
 24e:	e1 f3       	breq	.-8      	; 0x248 <main+0x13a>

		//mirf_config_register(STATUS, (1 << RX_DR) | (1 << MAX_RT)); // Reset status register
		//LED_ON; // turn on LED if echo has been received
		mirf_get_data(rx_buffer); // read the data from the nRF24L01
 250:	8e e2       	ldi	r24, 0x2E	; 46
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_get_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	9e e4       	ldi	r25, 0x4E	; 78
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x14e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x154>
 262:	00 00       	nop
 264:	d7 cf       	rjmp	.-82     	; 0x214 <main+0x106>

00000266 <mirf_init>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr, 5);
 266:	54 9a       	sbi	0x0a, 4	; 10
 268:	56 9a       	sbi	0x0a, 6	; 10
 26a:	5c 98       	cbi	0x0b, 4	; 11
 26c:	5e 9a       	sbi	0x0b, 6	; 11
 26e:	e8 98       	cbi	0x1d, 0	; 29
 270:	e9 e6       	ldi	r30, 0x69	; 105
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
 27a:	e8 9a       	sbi	0x1d, 0	; 29
 27c:	0e 94 a7 02 	call	0x54e	; 0x54e <spi1_master_initialize>
 280:	08 95       	ret

00000282 <mirf_data_ready>:
 282:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PTX>
 286:	81 11       	cpse	r24, r1
 288:	07 c0       	rjmp	.+14     	; 0x298 <mirf_data_ready+0x16>
 28a:	5e 98       	cbi	0x0b, 6	; 11
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	0e 94 b6 02 	call	0x56c	; 0x56c <spi1_exchange_char>
 292:	5e 9a       	sbi	0x0b, 6	; 11
 294:	80 74       	andi	r24, 0x40	; 64
 296:	08 95       	ret
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret

0000029c <mirf_data_sent>:
 29c:	5e 98       	cbi	0x0b, 6	; 11
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	0e 94 b6 02 	call	0x56c	; 0x56c <spi1_exchange_char>
 2a4:	5e 9a       	sbi	0x0b, 6	; 11
 2a6:	80 72       	andi	r24, 0x20	; 32
 2a8:	08 95       	ret

000002aa <mirf_config_register>:
 2aa:	cf 93       	push	r28
 2ac:	c6 2f       	mov	r28, r22
 2ae:	5e 98       	cbi	0x0b, 6	; 11
 2b0:	8f 71       	andi	r24, 0x1F	; 31
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	0e 94 ae 02 	call	0x55c	; 0x55c <spi1_send_char>
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <mirf_config_register+0x10>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <mirf_config_register+0x16>
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 ae 02 	call	0x55c	; 0x55c <spi1_send_char>
 2c6:	5e 9a       	sbi	0x0b, 6	; 11
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <mirf_config_register+0x20>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <mirf_config_register+0x26>
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <mirf_config>:
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
 2dc:	60 e1       	ldi	r22, 0x10	; 16
 2de:	81 e1       	ldi	r24, 0x11	; 17
 2e0:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
 2e4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PTX>
 2e8:	6b e4       	ldi	r22, 0x4B	; 75
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
 2f0:	5c 9a       	sbi	0x0b, 4	; 11
 2f2:	08 95       	ret

000002f4 <mirf_get_data>:
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
 2fa:	5e 98       	cbi	0x0b, 6	; 11
 2fc:	81 e6       	ldi	r24, 0x61	; 97
 2fe:	0e 94 ae 02 	call	0x55c	; 0x55c <spi1_send_char>
 302:	40 e1       	ldi	r20, 0x10	; 16
 304:	be 01       	movw	r22, r28
 306:	ce 01       	movw	r24, r28
 308:	0e 94 d7 02 	call	0x5ae	; 0x5ae <spi1_exchange_bytes>
 30c:	5e 9a       	sbi	0x0b, 6	; 11
 30e:	60 e4       	ldi	r22, 0x40	; 64
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
 324:	16 2f       	mov	r17, r22
	while (PTX)
 326:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PTX>
 32a:	88 23       	and	r24, r24
 32c:	41 f0       	breq	.+16     	; 0x33e <mirf_send+0x22>
	{
		println_0("while(PTX)")	;
 32e:	89 e1       	ldi	r24, 0x19	; 25
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 2b 02 	call	0x456	; 0x456 <println_0>

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
	while (PTX)
 336:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PTX>
 33a:	81 11       	cpse	r24, r1
 33c:	f8 cf       	rjmp	.-16     	; 0x32e <mirf_send+0x12>
	{
		println_0("while(PTX)")	;
	} // Wait until last packet is send

	mirf_CE_lo;
 33e:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 346:	6a e4       	ldi	r22, 0x4A	; 74
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 34e:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 350:	81 ee       	ldi	r24, 0xE1	; 225
 352:	0e 94 ae 02 	call	0x55c	; 0x55c <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 356:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	82 e4       	ldi	r24, 0x42	; 66
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <mirf_send+0x3e>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <mirf_send+0x44>
	_delay_us(25);
	
	mirf_CSN_lo;                     // Pull down chip select
 360:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 362:	80 ea       	ldi	r24, 0xA0	; 160
 364:	0e 94 ae 02 	call	0x55c	; 0x55c <spi1_send_char>
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <mirf_send+0x4e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <mirf_send+0x54>
	_delay_us(25);
	spi1_send_bytes(value, len);      // Write payload
 370:	61 2f       	mov	r22, r17
 372:	ce 01       	movw	r24, r28
 374:	0e 94 c0 02 	call	0x580	; 0x580 <spi1_send_bytes>
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <mirf_send+0x5e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <mirf_send+0x64>
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select
 380:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 382:	5c 9a       	sbi	0x0b, 4	; 11
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	08 95       	ret

0000038c <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	cf 93       	push	r28
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 3b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PTX>
 3b4:	88 23       	and	r24, r24
 3b6:	d1 f0       	breq	.+52     	; 0x3ec <__vector_1+0x60>
	{
	// Read MiRF status
	mirf_CSN_lo;                     // Pull down chip select
 3b8:	5e 98       	cbi	0x0b, 6	; 11
	status = spi1_exchange_char(NOP); // Read status register
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	0e 94 b6 02 	call	0x56c	; 0x56c <spi1_exchange_char>
 3c0:	c8 2f       	mov	r28, r24
	print_0("STATUS: ;");
 3c2:	84 e2       	ldi	r24, 0x24	; 36
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 08 02 	call	0x410	; 0x410 <print_0>
	println_int_0(status);
 3ca:	8c 2f       	mov	r24, r28
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 51 02 	call	0x4a2	; 0x4a2 <println_int_0>
	mirf_CSN_hi;                     // Pull up chip select
 3d2:	5e 9a       	sbi	0x0b, 6	; 11
 3d4:	82 e4       	ldi	r24, 0x42	; 66
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <__vector_1+0x4a>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <__vector_1+0x50>
	_delay_us(25);
	mirf_CE_lo;                             // Deactivate transreceiver
 3dc:	5c 98       	cbi	0x0b, 4	; 11
	RX_POWERUP;                             // Power up in receiving mode
 3de:	6b e4       	ldi	r22, 0x4B	; 75
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 55 01 	call	0x2aa	; 0x2aa <mirf_config_register>
	mirf_CE_hi;                             // Listening for pakets
 3e6:	5c 9a       	sbi	0x0b, 4	; 11
	PTX = 0;                                // Set to receiving mode
 3e8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PTX>
	// Reset status register for further interaction
	//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	cf 91       	pop	r28
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <print_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	fc 01       	movw	r30, r24
 41a:	80 81       	ld	r24, Z
 41c:	8a 30       	cpi	r24, 0x0A	; 10
 41e:	b1 f0       	breq	.+44     	; 0x44c <print_0+0x3c>
 420:	8b 33       	cpi	r24, 0x3B	; 59
 422:	61 f4       	brne	.+24     	; 0x43c <print_0+0x2c>
 424:	13 c0       	rjmp	.+38     	; 0x44c <print_0+0x3c>
 426:	89 91       	ld	r24, Y+
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	81 f0       	breq	.+32     	; 0x44c <print_0+0x3c>
 42c:	8b 33       	cpi	r24, 0x3B	; 59
 42e:	71 f0       	breq	.+28     	; 0x44c <print_0+0x3c>
 430:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
 434:	0c 17       	cp	r16, r28
 436:	1d 07       	cpc	r17, r29
 438:	b1 f7       	brne	.-20     	; 0x426 <print_0+0x16>
 43a:	08 c0       	rjmp	.+16     	; 0x44c <print_0+0x3c>
 43c:	8f 01       	movw	r16, r30
 43e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
 442:	e8 01       	movw	r28, r16
 444:	21 96       	adiw	r28, 0x01	; 1
 446:	08 53       	subi	r16, 0x38	; 56
 448:	1f 4f       	sbci	r17, 0xFF	; 255
 44a:	ed cf       	rjmp	.-38     	; 0x426 <print_0+0x16>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <println_0>:
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	8c 01       	movw	r16, r24
 460:	fc 01       	movw	r30, r24
 462:	80 81       	ld	r24, Z
 464:	8a 30       	cpi	r24, 0x0A	; 10
 466:	69 f0       	breq	.+26     	; 0x482 <println_0+0x2c>
 468:	8b 33       	cpi	r24, 0x3B	; 59
 46a:	79 f4       	brne	.+30     	; 0x48a <println_0+0x34>
 46c:	0a c0       	rjmp	.+20     	; 0x482 <println_0+0x2c>
 46e:	89 91       	ld	r24, Y+
 470:	8a 30       	cpi	r24, 0x0A	; 10
 472:	39 f0       	breq	.+14     	; 0x482 <println_0+0x2c>
 474:	8b 33       	cpi	r24, 0x3B	; 59
 476:	29 f0       	breq	.+10     	; 0x482 <println_0+0x2c>
 478:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
 47c:	0c 17       	cp	r16, r28
 47e:	1d 07       	cpc	r17, r29
 480:	b1 f7       	brne	.-20     	; 0x46e <println_0+0x18>
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
 488:	07 c0       	rjmp	.+14     	; 0x498 <println_0+0x42>
 48a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
 48e:	e8 01       	movw	r28, r16
 490:	21 96       	adiw	r28, 0x01	; 1
 492:	08 53       	subi	r16, 0x38	; 56
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	eb cf       	rjmp	.-42     	; 0x46e <println_0+0x18>
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <println_int_0>:

void println_int_0(int number)
{
 4a2:	ef 92       	push	r14
 4a4:	ff 92       	push	r15
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	e2 97       	sbiw	r28, 0x32	; 50
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	8c 01       	movw	r16, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	89 f1       	breq	.+98     	; 0x526 <println_int_0+0x84>
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		temp = temp /10;
 4c8:	ea e0       	ldi	r30, 0x0A	; 10
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <println_int_0+0x2e>
		num_digit++;
 4ce:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 4d0:	bf 01       	movw	r22, r30
 4d2:	0e 94 0c 03 	call	0x618	; 0x618 <__divmodhi4>
 4d6:	cb 01       	movw	r24, r22
		num_digit++;
 4d8:	79 01       	movw	r14, r18
 4da:	4f ef       	ldi	r20, 0xFF	; 255
 4dc:	e4 1a       	sub	r14, r20
 4de:	f4 0a       	sbc	r15, r20
void println_int_0(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	a9 f7       	brne	.-22     	; 0x4ce <println_int_0+0x2c>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 4e4:	11 23       	and	r17, r17
 4e6:	24 f4       	brge	.+8      	; 0x4f0 <println_int_0+0x4e>
 4e8:	79 01       	movw	r14, r18
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	e8 0e       	add	r14, r24
 4ee:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4f0:	4a e0       	ldi	r20, 0x0A	; 10
 4f2:	be 01       	movw	r22, r28
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	c8 01       	movw	r24, r16
 4fa:	0e 94 34 03 	call	0x668	; 0x668 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 4fe:	1e 14       	cp	r1, r14
 500:	1f 04       	cpc	r1, r15
 502:	6c f4       	brge	.+26     	; 0x51e <println_int_0+0x7c>
 504:	8e 01       	movw	r16, r28
 506:	0f 5f       	subi	r16, 0xFF	; 255
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	e0 0e       	add	r14, r16
 50c:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 50e:	f8 01       	movw	r30, r16
 510:	81 91       	ld	r24, Z+
 512:	8f 01       	movw	r16, r30
 514:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 518:	0e 15       	cp	r16, r14
 51a:	1f 05       	cpc	r17, r15
 51c:	c1 f7       	brne	.-16     	; 0x50e <println_int_0+0x6c>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 51e:	8a e0       	ldi	r24, 0x0A	; 10
 520:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <usart0_send_char>
}
 524:	07 c0       	rjmp	.+14     	; 0x534 <println_int_0+0x92>
 526:	4a e0       	ldi	r20, 0x0A	; 10
 528:	be 01       	movw	r22, r28
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	0e 94 34 03 	call	0x668	; 0x668 <__itoa_ncheck>
 532:	f5 cf       	rjmp	.-22     	; 0x51e <println_int_0+0x7c>
 534:	e2 96       	adiw	r28, 0x32	; 50
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	08 95       	ret

0000054e <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 54e:	6b 9a       	sbi	0x0d, 3	; 13
 550:	57 9a       	sbi	0x0a, 7	; 10
 552:	56 9a       	sbi	0x0a, 6	; 10
 554:	82 e5       	ldi	r24, 0x52	; 82
 556:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 55a:	08 95       	ret

0000055c <spi1_send_char>:
 55c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 560:	ed ea       	ldi	r30, 0xAD	; 173
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	ec f7       	brge	.-6      	; 0x564 <spi1_send_char+0x8>
 56a:	08 95       	ret

0000056c <spi1_exchange_char>:
 56c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 570:	ed ea       	ldi	r30, 0xAD	; 173
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	ec f7       	brge	.-6      	; 0x574 <spi1_exchange_char+0x8>
 57a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 57e:	08 95       	ret

00000580 <spi1_send_bytes>:
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	66 23       	and	r22, r22
 586:	81 f0       	breq	.+32     	; 0x5a8 <spi1_send_bytes+0x28>
 588:	dc 01       	movw	r26, r24
 58a:	9c 01       	movw	r18, r24
 58c:	26 0f       	add	r18, r22
 58e:	31 1d       	adc	r19, r1
 590:	ce ea       	ldi	r28, 0xAE	; 174
 592:	d0 e0       	ldi	r29, 0x00	; 0
 594:	ed ea       	ldi	r30, 0xAD	; 173
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	9d 91       	ld	r25, X+
 59a:	98 83       	st	Y, r25
 59c:	90 81       	ld	r25, Z
 59e:	99 23       	and	r25, r25
 5a0:	ec f7       	brge	.-6      	; 0x59c <spi1_send_bytes+0x1c>
 5a2:	a2 17       	cp	r26, r18
 5a4:	b3 07       	cpc	r27, r19
 5a6:	c1 f7       	brne	.-16     	; 0x598 <spi1_send_bytes+0x18>
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 5b6:	44 23       	and	r20, r20
 5b8:	c9 f0       	breq	.+50     	; 0x5ec <spi1_exchange_bytes+0x3e>
 5ba:	dc 01       	movw	r26, r24
 5bc:	06 2f       	mov	r16, r22
 5be:	17 2f       	mov	r17, r23
 5c0:	9c 01       	movw	r18, r24
 5c2:	24 0f       	add	r18, r20
 5c4:	31 1d       	adc	r19, r1
 5c6:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 5c8:	2e ea       	ldi	r18, 0xAE	; 174
 5ca:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 5cc:	ed ea       	ldi	r30, 0xAD	; 173
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 5d0:	9d 91       	ld	r25, X+
 5d2:	e9 01       	movw	r28, r18
 5d4:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 5d6:	90 81       	ld	r25, Z
 5d8:	99 23       	and	r25, r25
 5da:	ec f7       	brge	.-6      	; 0x5d6 <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 5dc:	e9 01       	movw	r28, r18
 5de:	98 81       	ld	r25, Y
 5e0:	e8 01       	movw	r28, r16
 5e2:	99 93       	st	Y+, r25
 5e4:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 5e6:	a4 17       	cp	r26, r20
 5e8:	b5 07       	cpc	r27, r21
 5ea:	91 f7       	brne	.-28     	; 0x5d0 <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 5f6:	e0 ec       	ldi	r30, 0xC0	; 192
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	90 81       	ld	r25, Z
 5fc:	95 ff       	sbrs	r25, 5
 5fe:	fd cf       	rjmp	.-6      	; 0x5fa <usart0_send_char+0x4>
 600:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 604:	08 95       	ret

00000606 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 606:	98 e9       	ldi	r25, 0x98	; 152
 608:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 60c:	96 e0       	ldi	r25, 0x06	; 6
 60e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 612:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 616:	08 95       	ret

00000618 <__divmodhi4>:
 618:	97 fb       	bst	r25, 7
 61a:	07 2e       	mov	r0, r23
 61c:	16 f4       	brtc	.+4      	; 0x622 <__divmodhi4+0xa>
 61e:	00 94       	com	r0
 620:	07 d0       	rcall	.+14     	; 0x630 <__divmodhi4_neg1>
 622:	77 fd       	sbrc	r23, 7
 624:	09 d0       	rcall	.+18     	; 0x638 <__divmodhi4_neg2>
 626:	0e 94 20 03 	call	0x640	; 0x640 <__udivmodhi4>
 62a:	07 fc       	sbrc	r0, 7
 62c:	05 d0       	rcall	.+10     	; 0x638 <__divmodhi4_neg2>
 62e:	3e f4       	brtc	.+14     	; 0x63e <__divmodhi4_exit>

00000630 <__divmodhi4_neg1>:
 630:	90 95       	com	r25
 632:	81 95       	neg	r24
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	08 95       	ret

00000638 <__divmodhi4_neg2>:
 638:	70 95       	com	r23
 63a:	61 95       	neg	r22
 63c:	7f 4f       	sbci	r23, 0xFF	; 255

0000063e <__divmodhi4_exit>:
 63e:	08 95       	ret

00000640 <__udivmodhi4>:
 640:	aa 1b       	sub	r26, r26
 642:	bb 1b       	sub	r27, r27
 644:	51 e1       	ldi	r21, 0x11	; 17
 646:	07 c0       	rjmp	.+14     	; 0x656 <__udivmodhi4_ep>

00000648 <__udivmodhi4_loop>:
 648:	aa 1f       	adc	r26, r26
 64a:	bb 1f       	adc	r27, r27
 64c:	a6 17       	cp	r26, r22
 64e:	b7 07       	cpc	r27, r23
 650:	10 f0       	brcs	.+4      	; 0x656 <__udivmodhi4_ep>
 652:	a6 1b       	sub	r26, r22
 654:	b7 0b       	sbc	r27, r23

00000656 <__udivmodhi4_ep>:
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	5a 95       	dec	r21
 65c:	a9 f7       	brne	.-22     	; 0x648 <__udivmodhi4_loop>
 65e:	80 95       	com	r24
 660:	90 95       	com	r25
 662:	bc 01       	movw	r22, r24
 664:	cd 01       	movw	r24, r26
 666:	08 95       	ret

00000668 <__itoa_ncheck>:
 668:	bb 27       	eor	r27, r27
 66a:	4a 30       	cpi	r20, 0x0A	; 10
 66c:	31 f4       	brne	.+12     	; 0x67a <__itoa_ncheck+0x12>
 66e:	99 23       	and	r25, r25
 670:	22 f4       	brpl	.+8      	; 0x67a <__itoa_ncheck+0x12>
 672:	bd e2       	ldi	r27, 0x2D	; 45
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	0c 94 40 03 	jmp	0x680	; 0x680 <__utoa_common>

0000067e <__utoa_ncheck>:
 67e:	bb 27       	eor	r27, r27

00000680 <__utoa_common>:
 680:	fb 01       	movw	r30, r22
 682:	55 27       	eor	r21, r21
 684:	aa 27       	eor	r26, r26
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	aa 1f       	adc	r26, r26
 68c:	a4 17       	cp	r26, r20
 68e:	10 f0       	brcs	.+4      	; 0x694 <__utoa_common+0x14>
 690:	a4 1b       	sub	r26, r20
 692:	83 95       	inc	r24
 694:	50 51       	subi	r21, 0x10	; 16
 696:	b9 f7       	brne	.-18     	; 0x686 <__utoa_common+0x6>
 698:	a0 5d       	subi	r26, 0xD0	; 208
 69a:	aa 33       	cpi	r26, 0x3A	; 58
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__utoa_common+0x20>
 69e:	a9 5d       	subi	r26, 0xD9	; 217
 6a0:	a1 93       	st	Z+, r26
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	79 f7       	brne	.-34     	; 0x684 <__utoa_common+0x4>
 6a6:	b1 11       	cpse	r27, r1
 6a8:	b1 93       	st	Z+, r27
 6aa:	11 92       	st	Z+, r1
 6ac:	cb 01       	movw	r24, r22
 6ae:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <strrev>

000006b2 <strrev>:
 6b2:	dc 01       	movw	r26, r24
 6b4:	fc 01       	movw	r30, r24
 6b6:	67 2f       	mov	r22, r23
 6b8:	71 91       	ld	r23, Z+
 6ba:	77 23       	and	r23, r23
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <strrev+0x4>
 6be:	32 97       	sbiw	r30, 0x02	; 2
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <strrev+0x18>
 6c2:	7c 91       	ld	r23, X
 6c4:	6d 93       	st	X+, r22
 6c6:	70 83       	st	Z, r23
 6c8:	62 91       	ld	r22, -Z
 6ca:	ae 17       	cp	r26, r30
 6cc:	bf 07       	cpc	r27, r31
 6ce:	c8 f3       	brcs	.-14     	; 0x6c2 <strrev+0x10>
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
