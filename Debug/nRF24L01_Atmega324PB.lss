
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800124  00800124  00000e50  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e7f  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135b  00000000  00000000  0000408f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a80  00000000  00000000  000053ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000081c  00000000  00000000  00006e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be3  00000000  00000000  00007688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000215b  00000000  00000000  0000826b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e9       	ldi	r30, 0x98	; 152
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 32       	cpi	r26, 0x24	; 36
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e2       	ldi	r26, 0x24	; 36
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	aa 38       	cpi	r26, 0x8A	; 138
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
 102:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <setup_TMR1_pwm>:
	value = 1000;
	if (value < -1000)                        // do not send any value smaller than -1000
	value = -1000;

	return value;
} // end of joystick_scaling
 120:	e0 e8       	ldi	r30, 0x80	; 128
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	89 60       	ori	r24, 0x09	; 9
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <set_TMR1A_duty_cycle>:
 136:	bc 01       	movw	r22, r24
 138:	99 0f       	add	r25, r25
 13a:	88 0b       	sbc	r24, r24
 13c:	99 0b       	sbc	r25, r25
 13e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 142:	2f e6       	ldi	r18, 0x6F	; 111
 144:	32 e1       	ldi	r19, 0x12	; 18
 146:	43 e8       	ldi	r20, 0x83	; 131
 148:	5e e3       	ldi	r21, 0x3E	; 62
 14a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	0e 94 06 05 	call	0xa0c	; 0xa0c <__subsf3>
 15a:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
 15e:	69 3c       	cpi	r22, 0xC9	; 201
 160:	71 05       	cpc	r23, r1
 162:	14 f0       	brlt	.+4      	; 0x168 <set_TMR1A_duty_cycle+0x32>
 164:	68 ec       	ldi	r22, 0xC8	; 200
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	77 27       	eor	r23, r23
 16a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 172:	08 95       	ret

00000174 <set_TMR1B_duty_cycle>:
 174:	bc 01       	movw	r22, r24
 176:	99 0f       	add	r25, r25
 178:	88 0b       	sbc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 180:	2f e6       	ldi	r18, 0x6F	; 111
 182:	32 e1       	ldi	r19, 0x12	; 18
 184:	43 e8       	ldi	r20, 0x83	; 131
 186:	5e e3       	ldi	r21, 0x3E	; 62
 188:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 06 05 	call	0xa0c	; 0xa0c <__subsf3>
 198:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
 19c:	69 3c       	cpi	r22, 0xC9	; 201
 19e:	71 05       	cpc	r23, r1
 1a0:	14 f0       	brlt	.+4      	; 0x1a6 <set_TMR1B_duty_cycle+0x32>
 1a2:	68 ec       	ldi	r22, 0xC8	; 200
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	77 27       	eor	r23, r23
 1a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1b0:	08 95       	ret

000001b2 <stop_TMR1A_pwm>:
 1b2:	e0 e8       	ldi	r30, 0x80	; 128
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <stop_TMR1B_pwm>:
 1be:	e0 e8       	ldi	r30, 0x80	; 128
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <start_TMR1A_pwm>:
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <start_TMR1B_pwm>:
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <motor_off>:
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	2a 98       	cbi	0x05, 2	; 5
 1e6:	08 95       	ret

000001e8 <motor_on>:
 1e8:	29 9a       	sbi	0x05, 1	; 5
 1ea:	2a 9a       	sbi	0x05, 2	; 5
 1ec:	08 95       	ret

000001ee <setup_TMR0_pwm>:
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	83 68       	ori	r24, 0x83	; 131
 1f2:	84 bd       	out	0x24, r24	; 36
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	85 bd       	out	0x25, r24	; 37
 1fa:	8d e3       	ldi	r24, 0x3D	; 61
 1fc:	87 bd       	out	0x27, r24	; 39
 1fe:	08 95       	ret

00000200 <setup_TMR3>:
 200:	e1 e9       	ldi	r30, 0x91	; 145
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <setup_gpios>:
 20c:	6c 9a       	sbi	0x0d, 4	; 13
 20e:	55 9a       	sbi	0x0a, 5	; 10
 210:	54 9a       	sbi	0x0a, 4	; 10
 212:	21 9a       	sbi	0x04, 1	; 4
 214:	22 9a       	sbi	0x04, 2	; 4
 216:	23 9a       	sbi	0x04, 3	; 4
 218:	08 95       	ret

0000021a <delay_ms>:
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	69 f0       	breq	.+26     	; 0x238 <delay_ms+0x1e>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	ef ec       	ldi	r30, 0xCF	; 207
 224:	f7 e0       	ldi	r31, 0x07	; 7
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <delay_ms+0xc>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <delay_ms+0x12>
 22c:	00 00       	nop
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	82 17       	cp	r24, r18
 234:	93 07       	cpc	r25, r19
 236:	a9 f7       	brne	.-22     	; 0x222 <delay_ms+0x8>
 238:	08 95       	ret

0000023a <flash_LED>:
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	88 23       	and	r24, r24
 246:	79 f0       	breq	.+30     	; 0x266 <flash_LED+0x2c>
 248:	8b 01       	movw	r16, r22
 24a:	d8 2f       	mov	r29, r24
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	68 94       	set
 250:	ff 24       	eor	r15, r15
 252:	f4 f8       	bld	r15, 4
 254:	9e b1       	in	r25, 0x0e	; 14
 256:	9f 25       	eor	r25, r15
 258:	9e b9       	out	0x0e, r25	; 14
 25a:	c8 01       	movw	r24, r16
 25c:	0e 94 0d 01 	call	0x21a	; 0x21a <delay_ms>
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	dc 13       	cpse	r29, r28
 264:	f7 cf       	rjmp	.-18     	; 0x254 <flash_LED+0x1a>
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	08 95       	ret

00000272 <parse_GPMRC>:
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <parse_GPMRC+0xa>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	08 e7       	ldi	r16, 0x78	; 120
 282:	11 e0       	ldi	r17, 0x01	; 1
 284:	f8 01       	movw	r30, r16
 286:	80 81       	ld	r24, Z
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	8a 83       	std	Y+2, r24	; 0x02
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 296:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <lat_deg>
 29a:	f8 01       	movw	r30, r16
 29c:	82 81       	ldd	r24, Z+2	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	83 81       	ldd	r24, Z+3	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 2ac:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lat_min>
 2b0:	f8 01       	movw	r30, r16
 2b2:	85 81       	ldd	r24, Z+5	; 0x05
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	86 81       	ldd	r24, Z+6	; 0x06
 2b8:	8a 83       	std	Y+2, r24	; 0x02
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 2c2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lat_sec>
 2c6:	01 e8       	ldi	r16, 0x81	; 129
 2c8:	11 e0       	ldi	r17, 0x01	; 1
 2ca:	f8 01       	movw	r30, r16
 2cc:	80 81       	ld	r24, Z
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	8a 83       	std	Y+2, r24	; 0x02
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 2dc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lon_deg>
 2e0:	f8 01       	movw	r30, r16
 2e2:	82 81       	ldd	r24, Z+2	; 0x02
 2e4:	89 83       	std	Y+1, r24	; 0x01
 2e6:	83 81       	ldd	r24, Z+3	; 0x03
 2e8:	8a 83       	std	Y+2, r24	; 0x02
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 2f2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <lon_min>
 2f6:	f8 01       	movw	r30, r16
 2f8:	85 81       	ldd	r24, Z+5	; 0x05
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	8a 83       	std	Y+2, r24	; 0x02
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
 308:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <lon_sec>
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <main>:
 31a:	0e 94 06 01 	call	0x20c	; 0x20c <setup_gpios>
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	0e 94 fd 04 	call	0x9fa	; 0x9fa <setup_usart0>
 324:	0e 94 a1 04 	call	0x942	; 0x942 <spi1_master_initialize>
 328:	0e 94 92 03 	call	0x724	; 0x724 <mirf_init>
 32c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mirf_config>
 330:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
 334:	0e 94 90 00 	call	0x120	; 0x120 <setup_TMR1_pwm>
 338:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setup_TMR0_pwm>
 33c:	0e 94 00 01 	call	0x200	; 0x200 <setup_TMR3>
 340:	62 e3       	ldi	r22, 0x32	; 50
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 1d 01 	call	0x23a	; 0x23a <flash_LED>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	89 e6       	ldi	r24, 0x69	; 105
 34e:	98 e1       	ldi	r25, 0x18	; 24
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x36>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x40>
 35a:	00 00       	nop
 35c:	78 94       	sei
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 43 04 	call	0x886	; 0x886 <mirf_set_TADDR>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 3b 04 	call	0x876	; 0x876 <mirf_set_RADDR>
 36e:	8a e0       	ldi	r24, 0x0A	; 10
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <println_0>
 376:	8f e1       	ldi	r24, 0x1F	; 31
 378:	9e e4       	ldi	r25, 0x4E	; 78
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x60>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x66>
 380:	00 00       	nop
 382:	68 94       	set
 384:	bb 24       	eor	r11, r11
 386:	b4 f8       	bld	r11, 4
 388:	c4 e9       	ldi	r28, 0x94	; 148
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	0f 2e       	mov	r0, r31
 38e:	fc ee       	ldi	r31, 0xEC	; 236
 390:	ef 2e       	mov	r14, r31
 392:	ff 24       	eor	r15, r15
 394:	fa 94       	dec	r15
 396:	f0 2d       	mov	r31, r0
 398:	04 e1       	ldi	r16, 0x14	; 20
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	aa 24       	eor	r10, r10
 39e:	a3 94       	inc	r10
 3a0:	8e b1       	in	r24, 0x0e	; 14
 3a2:	8b 25       	eor	r24, r11
 3a4:	8e b9       	out	0x0e, r24	; 14
 3a6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <comm_lost_count>
 3aa:	83 33       	cpi	r24, 0x33	; 51
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <main+0x9c>
 3ae:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <comm_lost_count>
 3b2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mirf_config>
 3b6:	19 82       	std	Y+1, r1	; 0x01
 3b8:	18 82       	st	Y, r1
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <main+0xb8>
 3bc:	88 81       	ld	r24, Y
 3be:	99 81       	ldd	r25, Y+1	; 0x01
 3c0:	8d 3d       	cpi	r24, 0xDD	; 221
 3c2:	95 40       	sbci	r25, 0x05	; 5
 3c4:	30 f0       	brcs	.+12     	; 0x3d2 <main+0xb8>
 3c6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <comm_lost_count>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <comm_lost_count>
 3d0:	0c c1       	rjmp	.+536    	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 3d2:	0e 94 99 03 	call	0x732	; 0x732 <mirf_data_ready>
 3d6:	88 23       	and	r24, r24
 3d8:	89 f3       	breq	.-30     	; 0x3bc <main+0xa2>
 3da:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <comm_lost>
 3de:	81 11       	cpse	r24, r1
 3e0:	04 c1       	rjmp	.+520    	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 3e2:	85 e3       	ldi	r24, 0x35	; 53
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 10 04 	call	0x820	; 0x820 <mirf_get_data>
 3ea:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <buffer>
 3ee:	91 34       	cpi	r25, 0x41	; 65
 3f0:	31 f5       	brne	.+76     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f2:	e5 e3       	ldi	r30, 0x35	; 53
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <lat_deg>
 3fa:	80 83       	st	Z, r24
 3fc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <lat_min>
 400:	81 83       	std	Z+1, r24	; 0x01
 402:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <lat_sec>
 406:	82 83       	std	Z+2, r24	; 0x02
 408:	19 82       	std	Y+1, r1	; 0x01
 40a:	18 82       	st	Y, r1
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	cf 01       	movw	r24, r30
 410:	0e 94 53 04 	call	0x8a6	; 0x8a6 <mirf_send>
 414:	0d c0       	rjmp	.+26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 416:	88 81       	ld	r24, Y
 418:	99 81       	ldd	r25, Y+1	; 0x01
 41a:	8d 3d       	cpi	r24, 0xDD	; 221
 41c:	95 40       	sbci	r25, 0x05	; 5
 41e:	40 f0       	brcs	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 420:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <comm_lost_count>
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <comm_lost_count>
 42a:	a0 92 2f 01 	sts	0x012F, r10	; 0x80012f <comm_lost>
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 430:	0e 94 a6 03 	call	0x74c	; 0x74c <mirf_data_sent>
 434:	88 23       	and	r24, r24
 436:	79 f3       	breq	.-34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 438:	0e 94 c2 03 	call	0x784	; 0x784 <set_RX_MODE>
 43c:	d8 c0       	rjmp	.+432    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 43e:	9f 34       	cpi	r25, 0x4F	; 79
 440:	91 f5       	brne	.+100    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 442:	e5 e3       	ldi	r30, 0x35	; 53
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <lon_deg>
 44a:	80 83       	st	Z, r24
 44c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <lon_min>
 450:	81 83       	std	Z+1, r24	; 0x01
 452:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <lon_sec>
 456:	82 83       	std	Z+2, r24	; 0x02
 458:	19 82       	std	Y+1, r1	; 0x01
 45a:	18 82       	st	Y, r1
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	cf 01       	movw	r24, r30
 460:	0e 94 53 04 	call	0x8a6	; 0x8a6 <mirf_send>
 464:	0d c0       	rjmp	.+26     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 466:	88 81       	ld	r24, Y
 468:	99 81       	ldd	r25, Y+1	; 0x01
 46a:	8d 3d       	cpi	r24, 0xDD	; 221
 46c:	95 40       	sbci	r25, 0x05	; 5
 46e:	40 f0       	brcs	.+16     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 470:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <comm_lost_count>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <comm_lost_count>
 47a:	a0 92 2f 01 	sts	0x012F, r10	; 0x80012f <comm_lost>
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 480:	0e 94 a6 03 	call	0x74c	; 0x74c <mirf_data_sent>
 484:	88 23       	and	r24, r24
 486:	79 f3       	breq	.-34     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 488:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <lat_deg>
 48c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <lat_min>
 490:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <lat_sec>
 494:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <lon_deg>
 498:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <lon_min>
 49c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <lon_sec>
 4a0:	0e 94 c2 03 	call	0x784	; 0x784 <set_RX_MODE>
 4a4:	a4 c0       	rjmp	.+328    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 4a6:	e5 e3       	ldi	r30, 0x35	; 53
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	81 81       	ldd	r24, Z+1	; 0x01
 4ac:	c9 2e       	mov	r12, r25
 4ae:	99 0f       	add	r25, r25
 4b0:	dd 08       	sbc	r13, r13
 4b2:	dc 2c       	mov	r13, r12
 4b4:	cc 24       	eor	r12, r12
 4b6:	c8 2a       	or	r12, r24
 4b8:	d0 92 34 01 	sts	0x0134, r13	; 0x800134 <mtr_cmd+0x1>
 4bc:	c0 92 33 01 	sts	0x0133, r12	; 0x800133 <mtr_cmd>
 4c0:	82 81       	ldd	r24, Z+2	; 0x02
 4c2:	08 2e       	mov	r0, r24
 4c4:	00 0c       	add	r0, r0
 4c6:	99 0b       	sbc	r25, r25
 4c8:	85 31       	cpi	r24, 0x15	; 21
 4ca:	91 05       	cpc	r25, r1
 4cc:	2c f0       	brlt	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4ce:	10 93 32 01 	sts	0x0132, r17	; 0x800132 <srv_cmd+0x1>
 4d2:	00 93 31 01 	sts	0x0131, r16	; 0x800131 <srv_cmd>
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4d8:	8c 3e       	cpi	r24, 0xEC	; 236
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	92 07       	cpc	r25, r18
 4de:	2c f0       	brlt	.+10     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <srv_cmd+0x1>
 4e4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <srv_cmd>
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ea:	f0 92 32 01 	sts	0x0132, r15	; 0x800132 <srv_cmd+0x1>
 4ee:	e0 92 31 01 	sts	0x0131, r14	; 0x800131 <srv_cmd>
 4f2:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <srv_cmd>
 4f6:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <srv_cmd+0x1>
 4fa:	07 2e       	mov	r0, r23
 4fc:	00 0c       	add	r0, r0
 4fe:	88 0b       	sbc	r24, r24
 500:	99 0b       	sbc	r25, r25
 502:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e4       	ldi	r20, 0x40	; 64
 50c:	5f e3       	ldi	r21, 0x3F	; 63
 50e:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 512:	2b 01       	movw	r4, r22
 514:	3c 01       	movw	r6, r24
 516:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <old_srv_cmd>
 51a:	06 2e       	mov	r0, r22
 51c:	00 0c       	add	r0, r0
 51e:	77 0b       	sbc	r23, r23
 520:	88 0b       	sbc	r24, r24
 522:	99 0b       	sbc	r25, r25
 524:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e8       	ldi	r20, 0x80	; 128
 52e:	5e e3       	ldi	r21, 0x3E	; 62
 530:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	c3 01       	movw	r24, r6
 53a:	b2 01       	movw	r22, r4
 53c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__addsf3>
 540:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
 544:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <srv_cmd>
 548:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <srv_cmd+0x1>
 54c:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <old_srv_cmd>
 550:	83 e6       	ldi	r24, 0x63	; 99
 552:	c8 0e       	add	r12, r24
 554:	d1 1c       	adc	r13, r1
 556:	97 ec       	ldi	r25, 0xC7	; 199
 558:	c9 16       	cp	r12, r25
 55a:	d1 04       	cpc	r13, r1
 55c:	38 f4       	brcc	.+14     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 55e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
 562:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
 566:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <motor_off>
 56a:	25 c0       	rjmp	.+74     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 56c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <motor_on>
 570:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <mtr_cmd>
 574:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <mtr_cmd+0x1>
 578:	18 16       	cp	r1, r24
 57a:	19 06       	cpc	r1, r25
 57c:	5c f4       	brge	.+22     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 57e:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
 582:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_TMR1A_pwm>
 586:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <mtr_cmd>
 58a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <mtr_cmd+0x1>
 58e:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1A_duty_cycle>
 592:	11 c0       	rjmp	.+34     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 594:	99 23       	and	r25, r25
 596:	7c f4       	brge	.+30     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 598:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
 59c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <start_TMR1B_pwm>
 5a0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <mtr_cmd>
 5a4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <mtr_cmd+0x1>
 5a8:	99 23       	and	r25, r25
 5aa:	1c f4       	brge	.+6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ac:	91 95       	neg	r25
 5ae:	81 95       	neg	r24
 5b0:	91 09       	sbc	r25, r1
 5b2:	0e 94 ba 00 	call	0x174	; 0x174 <set_TMR1B_duty_cycle>
 5b6:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <srv_cmd>
 5ba:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <srv_cmd+0x1>
 5be:	07 2e       	mov	r0, r23
 5c0:	00 0c       	add	r0, r0
 5c2:	88 0b       	sbc	r24, r24
 5c4:	99 0b       	sbc	r25, r25
 5c6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 5ca:	2f e8       	ldi	r18, 0x8F	; 143
 5cc:	32 ec       	ldi	r19, 0xC2	; 194
 5ce:	45 eb       	ldi	r20, 0xB5	; 181
 5d0:	5e e3       	ldi	r21, 0x3E	; 62
 5d2:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	48 e3       	ldi	r20, 0x38	; 56
 5dc:	52 e4       	ldi	r21, 0x42	; 66
 5de:	0e 94 07 05 	call	0xa0e	; 0xa0e <__addsf3>
 5e2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 5e6:	67 bd       	out	0x27, r22	; 39
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5ea:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <comm_lost>
 5ee:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 5f2:	88 23       	and	r24, r24
 5f4:	31 f0       	breq	.+12     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5f6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 5fa:	f8 94       	cli
 5fc:	0e 94 39 01 	call	0x272	; 0x272 <parse_GPMRC>
 600:	78 94       	sei
 602:	8f e3       	ldi	r24, 0x3F	; 63
 604:	9c e9       	ldi	r25, 0x9C	; 156
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 60c:	00 00       	nop
 60e:	c8 ce       	rjmp	.-624    	; 0x3a0 <main+0x86>

00000610 <__vector_20>:

// $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh
ISR(USART0_RX_vect)
{
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	rcv_string[k_RX] = UDR0;
 628:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <k_RX>
 62c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	e8 5c       	subi	r30, 0xC8	; 200
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	80 83       	st	Z, r24
	
	if (rcv_string[k_RX] == '$')
 638:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <k_RX>
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	e8 5c       	subi	r30, 0xC8	; 200
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	80 81       	ld	r24, Z
 644:	84 32       	cpi	r24, 0x24	; 36
 646:	19 f4       	brne	.+6      	; 0x64e <__vector_20+0x3e>
	HEADER = 1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <HEADER>
	
	if (HEADER)
 64e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <HEADER>
 652:	88 23       	and	r24, r24
 654:	11 f1       	breq	.+68     	; 0x69a <__vector_20+0x8a>
	{
		if (rcv_string[k_RX] == ',')
 656:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <k_RX>
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	e8 5c       	subi	r30, 0xC8	; 200
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	80 81       	ld	r24, Z
 662:	8c 32       	cpi	r24, 0x2C	; 44
 664:	a9 f4       	brne	.+42     	; 0x690 <__vector_20+0x80>
		{
			if ( (rcv_string[3] == 'R') && (rcv_string[4] == 'M') && (rcv_string[5] == 'C'))
 666:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rcv_string+0x3>
 66a:	82 35       	cpi	r24, 0x52	; 82
 66c:	61 f4       	brne	.+24     	; 0x686 <__vector_20+0x76>
 66e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rcv_string+0x4>
 672:	8d 34       	cpi	r24, 0x4D	; 77
 674:	41 f4       	brne	.+16     	; 0x686 <__vector_20+0x76>
 676:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rcv_string+0x5>
 67a:	83 34       	cpi	r24, 0x43	; 67
 67c:	21 f4       	brne	.+8      	; 0x686 <__vector_20+0x76>
			{
				GPRMC_SENTENCE = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <GPRMC_SENTENCE>
 684:	02 c0       	rjmp	.+4      	; 0x68a <__vector_20+0x7a>
			}
			else
			k_RX = 0;
 686:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <k_RX>
			HEADER = 0;
 68a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <HEADER>
 68e:	05 c0       	rjmp	.+10     	; 0x69a <__vector_20+0x8a>
		}
		else
		k_RX++;
 690:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <k_RX>
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <k_RX>
	}
	
	if (GPRMC_SENTENCE)
 69a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <GPRMC_SENTENCE>
 69e:	88 23       	and	r24, r24
 6a0:	a9 f1       	breq	.+106    	; 0x70c <__vector_20+0xfc>
	{
		if (rcv_string[k_RX] == '*')
 6a2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <k_RX>
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	e8 5c       	subi	r30, 0xC8	; 200
 6aa:	fe 4f       	sbci	r31, 0xFE	; 254
 6ac:	80 81       	ld	r24, Z
 6ae:	8a 32       	cpi	r24, 0x2A	; 42
 6b0:	41 f5       	brne	.+80     	; 0x702 <__vector_20+0xf2>
 6b2:	eb e4       	ldi	r30, 0x4B	; 75
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
			{
				lat_buf[j] = rcv_string[i];
 6ba:	21 91       	ld	r18, Z+
 6bc:	dc 01       	movw	r26, r24
 6be:	a8 58       	subi	r26, 0x88	; 136
 6c0:	be 4f       	sbci	r27, 0xFE	; 254
 6c2:	2c 93       	st	X, r18
				j++;
 6c4:	01 96       	adiw	r24, 0x01	; 1
	if (GPRMC_SENTENCE)
	{
		if (rcv_string[k_RX] == '*')
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
 6c6:	87 30       	cpi	r24, 0x07	; 7
 6c8:	91 05       	cpc	r25, r1
 6ca:	b9 f7       	brne	.-18     	; 0x6ba <__vector_20+0xaa>
			{
				lat_buf[j] = rcv_string[i];
				j++;
			}
			lat_buf[j] = NL;
 6cc:	8a e0       	ldi	r24, 0x0A	; 10
 6ce:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <lat_buf+0x7>
 6d2:	e9 e5       	ldi	r30, 0x59	; 89
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
			
			
			j = 0;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
			for (int i = 33; i <40; i++)
			{
				lon_buf[j] = rcv_string[i];
 6da:	21 91       	ld	r18, Z+
 6dc:	dc 01       	movw	r26, r24
 6de:	af 57       	subi	r26, 0x7F	; 127
 6e0:	be 4f       	sbci	r27, 0xFE	; 254
 6e2:	2c 93       	st	X, r18
				j++;
 6e4:	01 96       	adiw	r24, 0x01	; 1
			}
			lat_buf[j] = NL;
			
			
			j = 0;
			for (int i = 33; i <40; i++)
 6e6:	87 30       	cpi	r24, 0x07	; 7
 6e8:	91 05       	cpc	r25, r1
 6ea:	b9 f7       	brne	.-18     	; 0x6da <__vector_20+0xca>
			{
				lon_buf[j] = rcv_string[i];
				j++;
			}
			lon_buf[j] = NL;
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <lon_buf+0x7>
			
			GPRMC_SENTENCE = 0;
 6f2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <GPRMC_SENTENCE>
			k_RX = 0;
 6f6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <k_RX>
			gps_string_ready = 1;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 700:	05 c0       	rjmp	.+10     	; 0x70c <__vector_20+0xfc>
		}
		else
		k_RX++;
 702:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <k_RX>
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <k_RX>
	}
}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 724:	3f 9a       	sbi	0x07, 7	; 7
 726:	56 9a       	sbi	0x0a, 6	; 10
 728:	47 98       	cbi	0x08, 7	; 8
 72a:	5e 9a       	sbi	0x0b, 6	; 11
 72c:	0e 94 a1 04 	call	0x942	; 0x942 <spi1_master_initialize>
 730:	08 95       	ret

00000732 <mirf_data_ready>:
 732:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <PTX>
 736:	81 11       	cpse	r24, r1
 738:	07 c0       	rjmp	.+14     	; 0x748 <mirf_data_ready+0x16>
 73a:	5e 98       	cbi	0x0b, 6	; 11
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	0e 94 b0 04 	call	0x960	; 0x960 <spi1_exchange_char>
 742:	5e 9a       	sbi	0x0b, 6	; 11
 744:	80 74       	andi	r24, 0x40	; 64
 746:	08 95       	ret
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	08 95       	ret

0000074c <mirf_data_sent>:
 74c:	5e 98       	cbi	0x0b, 6	; 11
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	0e 94 b0 04 	call	0x960	; 0x960 <spi1_exchange_char>
 754:	5e 9a       	sbi	0x0b, 6	; 11
 756:	80 72       	andi	r24, 0x20	; 32
 758:	08 95       	ret

0000075a <mirf_config_register>:
 75a:	cf 93       	push	r28
 75c:	c6 2f       	mov	r28, r22
 75e:	5e 98       	cbi	0x0b, 6	; 11
 760:	8f 71       	andi	r24, 0x1F	; 31
 762:	80 62       	ori	r24, 0x20	; 32
 764:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
 768:	82 e4       	ldi	r24, 0x42	; 66
 76a:	8a 95       	dec	r24
 76c:	f1 f7       	brne	.-4      	; 0x76a <mirf_config_register+0x10>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <mirf_config_register+0x16>
 770:	8c 2f       	mov	r24, r28
 772:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
 776:	5e 9a       	sbi	0x0b, 6	; 11
 778:	82 e4       	ldi	r24, 0x42	; 66
 77a:	8a 95       	dec	r24
 77c:	f1 f7       	brne	.-4      	; 0x77a <mirf_config_register+0x20>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <mirf_config_register+0x26>
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <set_RX_MODE>:
 784:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <PTX>
 788:	60 e7       	ldi	r22, 0x70	; 112
 78a:	87 e0       	ldi	r24, 0x07	; 7
 78c:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 790:	5e 98       	cbi	0x0b, 6	; 11
 792:	81 ee       	ldi	r24, 0xE1	; 225
 794:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
 798:	5e 9a       	sbi	0x0b, 6	; 11
 79a:	6b e5       	ldi	r22, 0x5B	; 91
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7a2:	47 9a       	sbi	0x08, 7	; 8
 7a4:	08 95       	ret

000007a6 <mirf_config>:
 7a6:	6c e6       	ldi	r22, 0x6C	; 108
 7a8:	85 e0       	ldi	r24, 0x05	; 5
 7aa:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	81 e1       	ldi	r24, 0x11	; 17
 7b2:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7b6:	63 e0       	ldi	r22, 0x03	; 3
 7b8:	82 e1       	ldi	r24, 0x12	; 18
 7ba:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	83 e1       	ldi	r24, 0x13	; 19
 7c2:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	84 e1       	ldi	r24, 0x14	; 20
 7ca:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	85 e1       	ldi	r24, 0x15	; 21
 7d2:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	86 e1       	ldi	r24, 0x16	; 22
 7da:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7de:	66 e2       	ldi	r22, 0x26	; 38
 7e0:	86 e0       	ldi	r24, 0x06	; 6
 7e2:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7e6:	63 e0       	ldi	r22, 0x03	; 3
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7ee:	63 e0       	ldi	r22, 0x03	; 3
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7f6:	6f e4       	ldi	r22, 0x4F	; 79
 7f8:	84 e0       	ldi	r24, 0x04	; 4
 7fa:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 7fe:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <PTX>
 802:	60 e7       	ldi	r22, 0x70	; 112
 804:	87 e0       	ldi	r24, 0x07	; 7
 806:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 80a:	5e 98       	cbi	0x0b, 6	; 11
 80c:	81 ee       	ldi	r24, 0xE1	; 225
 80e:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
 812:	5e 9a       	sbi	0x0b, 6	; 11
 814:	6b e5       	ldi	r22, 0x5B	; 91
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 81c:	47 9a       	sbi	0x08, 7	; 8
 81e:	08 95       	ret

00000820 <mirf_get_data>:
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	ec 01       	movw	r28, r24
 826:	5e 98       	cbi	0x0b, 6	; 11
 828:	81 e6       	ldi	r24, 0x61	; 97
 82a:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
 82e:	43 e0       	ldi	r20, 0x03	; 3
 830:	be 01       	movw	r22, r28
 832:	ce 01       	movw	r24, r28
 834:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <spi1_exchange_bytes>
 838:	5e 9a       	sbi	0x0b, 6	; 11
 83a:	60 e4       	ldi	r22, 0x40	; 64
 83c:	87 e0       	ldi	r24, 0x07	; 7
 83e:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 848:	1f 93       	push	r17
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	eb 01       	movw	r28, r22
 850:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 852:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 854:	8f 71       	andi	r24, 0x1F	; 31
 856:	80 62       	ori	r24, 0x20	; 32
 858:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
	spi1_send_bytes(value, len);
 85c:	61 2f       	mov	r22, r17
 85e:	ce 01       	movw	r24, r28
 860:	0e 94 ba 04 	call	0x974	; 0x974 <spi1_send_bytes>
	mirf_CSN_hi;
 864:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 866:	82 e4       	ldi	r24, 0x42	; 66
 868:	8a 95       	dec	r24
 86a:	f1 f7       	brne	.-4      	; 0x868 <mirf_write_register+0x20>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <mirf_write_register+0x26>
	_delay_us(25);
	
}
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	1f 91       	pop	r17
 874:	08 95       	ret

00000876 <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 876:	47 98       	cbi	0x08, 7	; 8
	mirf_write_register(RX_ADDR_P1, adr, 5);
 878:	45 e0       	ldi	r20, 0x05	; 5
 87a:	bc 01       	movw	r22, r24
 87c:	8b e0       	ldi	r24, 0x0B	; 11
 87e:	0e 94 24 04 	call	0x848	; 0x848 <mirf_write_register>
	mirf_CE_hi;
 882:	47 9a       	sbi	0x08, 7	; 8
 884:	08 95       	ret

00000886 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 88c:	45 e0       	ldi	r20, 0x05	; 5
 88e:	bc 01       	movw	r22, r24
 890:	8a e0       	ldi	r24, 0x0A	; 10
 892:	0e 94 24 04 	call	0x848	; 0x848 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 896:	45 e0       	ldi	r20, 0x05	; 5
 898:	be 01       	movw	r22, r28
 89a:	80 e1       	ldi	r24, 0x10	; 16
 89c:	0e 94 24 04 	call	0x848	; 0x848 <mirf_write_register>
}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	08 95       	ret

000008a6 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	ec 01       	movw	r28, r24
 8ae:	16 2f       	mov	r17, r22
// 	while (PTX)
// 	{
// 		println_0("while(PTX)")	;
// 	} // Wait until last packet is send

	mirf_CE_lo;
 8b0:	47 98       	cbi	0x08, 7	; 8

	PTX = 1;    // Set to transmitter mode
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 8b8:	6a e5       	ldi	r22, 0x5A	; 90
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 8c0:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 8c2:	81 ee       	ldi	r24, 0xE1	; 225
 8c4:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 8c8:	5e 9a       	sbi	0x0b, 6	; 11
 8ca:	82 e4       	ldi	r24, 0x42	; 66
 8cc:	8a 95       	dec	r24
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <mirf_send+0x26>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <mirf_send+0x2c>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8d2:	60 e7       	ldi	r22, 0x70	; 112
 8d4:	87 e0       	ldi	r24, 0x07	; 7
 8d6:	0e 94 ad 03 	call	0x75a	; 0x75a <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 8da:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 8dc:	80 ea       	ldi	r24, 0xA0	; 160
 8de:	0e 94 a8 04 	call	0x950	; 0x950 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 8e2:	61 2f       	mov	r22, r17
 8e4:	ce 01       	movw	r24, r28
 8e6:	0e 94 ba 04 	call	0x974	; 0x974 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 8ea:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 8ec:	47 9a       	sbi	0x08, 7	; 8
}
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	1f 91       	pop	r17
 8f4:	08 95       	ret

000008f6 <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 8f6:	0f 93       	push	r16
 8f8:	1f 93       	push	r17
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 900:	fc 01       	movw	r30, r24
 902:	80 81       	ld	r24, Z
 904:	8a 30       	cpi	r24, 0x0A	; 10
 906:	69 f0       	breq	.+26     	; 0x922 <__stack+0x23>
 908:	8b 33       	cpi	r24, 0x3B	; 59
 90a:	79 f4       	brne	.+30     	; 0x92a <__stack+0x2b>
 90c:	0a c0       	rjmp	.+20     	; 0x922 <__stack+0x23>
 90e:	89 91       	ld	r24, Y+
 910:	8a 30       	cpi	r24, 0x0A	; 10
 912:	39 f0       	breq	.+14     	; 0x922 <__stack+0x23>
 914:	8b 33       	cpi	r24, 0x3B	; 59
 916:	29 f0       	breq	.+10     	; 0x922 <__stack+0x23>
			break;
		usart0_send_char(char_array[i]);
 918:	0e 94 f5 04 	call	0x9ea	; 0x9ea <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 91c:	0c 17       	cp	r16, r28
 91e:	1d 07       	cpc	r17, r29
 920:	b1 f7       	brne	.-20     	; 0x90e <__stack+0xf>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 922:	8a e0       	ldi	r24, 0x0A	; 10
 924:	0e 94 f5 04 	call	0x9ea	; 0x9ea <usart0_send_char>
}
 928:	07 c0       	rjmp	.+14     	; 0x938 <__stack+0x39>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 92a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <usart0_send_char>
 92e:	e8 01       	movw	r28, r16
 930:	21 96       	adiw	r28, 0x01	; 1
 932:	08 53       	subi	r16, 0x38	; 56
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	eb cf       	rjmp	.-42     	; 0x90e <__stack+0xf>
		
	}
	usart0_send_char(0x0A); // NL
}
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <spi1_master_initialize>:
 942:	6b 9a       	sbi	0x0d, 3	; 13
 944:	57 9a       	sbi	0x0a, 7	; 10
 946:	56 9a       	sbi	0x0a, 6	; 10
 948:	82 e5       	ldi	r24, 0x52	; 82
 94a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 94e:	08 95       	ret

00000950 <spi1_send_char>:
 950:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 954:	ed ea       	ldi	r30, 0xAD	; 173
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	88 23       	and	r24, r24
 95c:	ec f7       	brge	.-6      	; 0x958 <spi1_send_char+0x8>
 95e:	08 95       	ret

00000960 <spi1_exchange_char>:
 960:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 964:	ed ea       	ldi	r30, 0xAD	; 173
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	88 23       	and	r24, r24
 96c:	ec f7       	brge	.-6      	; 0x968 <spi1_exchange_char+0x8>
 96e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 972:	08 95       	ret

00000974 <spi1_send_bytes>:
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	66 23       	and	r22, r22
 97a:	81 f0       	breq	.+32     	; 0x99c <spi1_send_bytes+0x28>
 97c:	dc 01       	movw	r26, r24
 97e:	9c 01       	movw	r18, r24
 980:	26 0f       	add	r18, r22
 982:	31 1d       	adc	r19, r1
 984:	ce ea       	ldi	r28, 0xAE	; 174
 986:	d0 e0       	ldi	r29, 0x00	; 0
 988:	ed ea       	ldi	r30, 0xAD	; 173
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	9d 91       	ld	r25, X+
 98e:	98 83       	st	Y, r25
 990:	90 81       	ld	r25, Z
 992:	99 23       	and	r25, r25
 994:	ec f7       	brge	.-6      	; 0x990 <spi1_send_bytes+0x1c>
 996:	a2 17       	cp	r26, r18
 998:	b3 07       	cpc	r27, r19
 99a:	c1 f7       	brne	.-16     	; 0x98c <spi1_send_bytes+0x18>
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	08 95       	ret

000009a2 <spi1_exchange_bytes>:
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	44 23       	and	r20, r20
 9ac:	c9 f0       	breq	.+50     	; 0x9e0 <spi1_exchange_bytes+0x3e>
 9ae:	dc 01       	movw	r26, r24
 9b0:	06 2f       	mov	r16, r22
 9b2:	17 2f       	mov	r17, r23
 9b4:	9c 01       	movw	r18, r24
 9b6:	24 0f       	add	r18, r20
 9b8:	31 1d       	adc	r19, r1
 9ba:	a9 01       	movw	r20, r18
 9bc:	2e ea       	ldi	r18, 0xAE	; 174
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	ed ea       	ldi	r30, 0xAD	; 173
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	9d 91       	ld	r25, X+
 9c6:	e9 01       	movw	r28, r18
 9c8:	98 83       	st	Y, r25
 9ca:	90 81       	ld	r25, Z
 9cc:	99 23       	and	r25, r25
 9ce:	ec f7       	brge	.-6      	; 0x9ca <spi1_exchange_bytes+0x28>
 9d0:	e9 01       	movw	r28, r18
 9d2:	98 81       	ld	r25, Y
 9d4:	e8 01       	movw	r28, r16
 9d6:	99 93       	st	Y+, r25
 9d8:	8e 01       	movw	r16, r28
 9da:	a4 17       	cp	r26, r20
 9dc:	b5 07       	cpc	r27, r21
 9de:	91 f7       	brne	.-28     	; 0x9c4 <spi1_exchange_bytes+0x22>
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 9ea:	e0 ec       	ldi	r30, 0xC0	; 192
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	90 81       	ld	r25, Z
 9f0:	95 ff       	sbrs	r25, 5
 9f2:	fd cf       	rjmp	.-6      	; 0x9ee <usart0_send_char+0x4>
 9f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 9f8:	08 95       	ret

000009fa <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 9fa:	98 e9       	ldi	r25, 0x98	; 152
 9fc:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 a00:	96 e0       	ldi	r25, 0x06	; 6
 a02:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 a06:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a0a:	08 95       	ret

00000a0c <__subsf3>:
 a0c:	50 58       	subi	r21, 0x80	; 128

00000a0e <__addsf3>:
 a0e:	bb 27       	eor	r27, r27
 a10:	aa 27       	eor	r26, r26
 a12:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3x>
 a16:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_round>
 a1a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscA>
 a1e:	38 f0       	brcs	.+14     	; 0xa2e <__addsf3+0x20>
 a20:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscB>
 a24:	20 f0       	brcs	.+8      	; 0xa2e <__addsf3+0x20>
 a26:	39 f4       	brne	.+14     	; 0xa36 <__addsf3+0x28>
 a28:	9f 3f       	cpi	r25, 0xFF	; 255
 a2a:	19 f4       	brne	.+6      	; 0xa32 <__addsf3+0x24>
 a2c:	26 f4       	brtc	.+8      	; 0xa36 <__addsf3+0x28>
 a2e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 a32:	0e f4       	brtc	.+2      	; 0xa36 <__addsf3+0x28>
 a34:	e0 95       	com	r30
 a36:	e7 fb       	bst	r30, 7
 a38:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>

00000a3c <__addsf3x>:
 a3c:	e9 2f       	mov	r30, r25
 a3e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_split3>
 a42:	58 f3       	brcs	.-42     	; 0xa1a <__addsf3+0xc>
 a44:	ba 17       	cp	r27, r26
 a46:	62 07       	cpc	r22, r18
 a48:	73 07       	cpc	r23, r19
 a4a:	84 07       	cpc	r24, r20
 a4c:	95 07       	cpc	r25, r21
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__addsf3x+0x1c>
 a50:	79 f4       	brne	.+30     	; 0xa70 <__addsf3x+0x34>
 a52:	a6 f5       	brtc	.+104    	; 0xabc <__addsf3x+0x80>
 a54:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_zero>
 a58:	0e f4       	brtc	.+2      	; 0xa5c <__addsf3x+0x20>
 a5a:	e0 95       	com	r30
 a5c:	0b 2e       	mov	r0, r27
 a5e:	ba 2f       	mov	r27, r26
 a60:	a0 2d       	mov	r26, r0
 a62:	0b 01       	movw	r0, r22
 a64:	b9 01       	movw	r22, r18
 a66:	90 01       	movw	r18, r0
 a68:	0c 01       	movw	r0, r24
 a6a:	ca 01       	movw	r24, r20
 a6c:	a0 01       	movw	r20, r0
 a6e:	11 24       	eor	r1, r1
 a70:	ff 27       	eor	r31, r31
 a72:	59 1b       	sub	r21, r25
 a74:	99 f0       	breq	.+38     	; 0xa9c <__addsf3x+0x60>
 a76:	59 3f       	cpi	r21, 0xF9	; 249
 a78:	50 f4       	brcc	.+20     	; 0xa8e <__addsf3x+0x52>
 a7a:	50 3e       	cpi	r21, 0xE0	; 224
 a7c:	68 f1       	brcs	.+90     	; 0xad8 <__addsf3x+0x9c>
 a7e:	1a 16       	cp	r1, r26
 a80:	f0 40       	sbci	r31, 0x00	; 0
 a82:	a2 2f       	mov	r26, r18
 a84:	23 2f       	mov	r18, r19
 a86:	34 2f       	mov	r19, r20
 a88:	44 27       	eor	r20, r20
 a8a:	58 5f       	subi	r21, 0xF8	; 248
 a8c:	f3 cf       	rjmp	.-26     	; 0xa74 <__addsf3x+0x38>
 a8e:	46 95       	lsr	r20
 a90:	37 95       	ror	r19
 a92:	27 95       	ror	r18
 a94:	a7 95       	ror	r26
 a96:	f0 40       	sbci	r31, 0x00	; 0
 a98:	53 95       	inc	r21
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__addsf3x+0x52>
 a9c:	7e f4       	brtc	.+30     	; 0xabc <__addsf3x+0x80>
 a9e:	1f 16       	cp	r1, r31
 aa0:	ba 0b       	sbc	r27, r26
 aa2:	62 0b       	sbc	r22, r18
 aa4:	73 0b       	sbc	r23, r19
 aa6:	84 0b       	sbc	r24, r20
 aa8:	ba f0       	brmi	.+46     	; 0xad8 <__addsf3x+0x9c>
 aaa:	91 50       	subi	r25, 0x01	; 1
 aac:	a1 f0       	breq	.+40     	; 0xad6 <__addsf3x+0x9a>
 aae:	ff 0f       	add	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	c2 f7       	brpl	.-16     	; 0xaaa <__addsf3x+0x6e>
 aba:	0e c0       	rjmp	.+28     	; 0xad8 <__addsf3x+0x9c>
 abc:	ba 0f       	add	r27, r26
 abe:	62 1f       	adc	r22, r18
 ac0:	73 1f       	adc	r23, r19
 ac2:	84 1f       	adc	r24, r20
 ac4:	48 f4       	brcc	.+18     	; 0xad8 <__addsf3x+0x9c>
 ac6:	87 95       	ror	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f7 95       	ror	r31
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <__addsf3x+0x9a>
 ad4:	b0 cf       	rjmp	.-160    	; 0xa36 <__addsf3+0x28>
 ad6:	93 95       	inc	r25
 ad8:	88 0f       	add	r24, r24
 ada:	08 f0       	brcs	.+2      	; 0xade <__addsf3x+0xa2>
 adc:	99 27       	eor	r25, r25
 ade:	ee 0f       	add	r30, r30
 ae0:	97 95       	ror	r25
 ae2:	87 95       	ror	r24
 ae4:	08 95       	ret

00000ae6 <__fixsfsi>:
 ae6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 aea:	68 94       	set
 aec:	b1 11       	cpse	r27, r1
 aee:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>
 af2:	08 95       	ret

00000af4 <__fixunssfsi>:
 af4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_splitA>
 af8:	88 f0       	brcs	.+34     	; 0xb1c <__fixunssfsi+0x28>
 afa:	9f 57       	subi	r25, 0x7F	; 127
 afc:	98 f0       	brcs	.+38     	; 0xb24 <__fixunssfsi+0x30>
 afe:	b9 2f       	mov	r27, r25
 b00:	99 27       	eor	r25, r25
 b02:	b7 51       	subi	r27, 0x17	; 23
 b04:	b0 f0       	brcs	.+44     	; 0xb32 <__fixunssfsi+0x3e>
 b06:	e1 f0       	breq	.+56     	; 0xb40 <__fixunssfsi+0x4c>
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	1a f0       	brmi	.+6      	; 0xb18 <__fixunssfsi+0x24>
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__fixunssfsi+0x14>
 b16:	14 c0       	rjmp	.+40     	; 0xb40 <__fixunssfsi+0x4c>
 b18:	b1 30       	cpi	r27, 0x01	; 1
 b1a:	91 f0       	breq	.+36     	; 0xb40 <__fixunssfsi+0x4c>
 b1c:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_zero>
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	08 95       	ret
 b24:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_zero>
 b28:	67 2f       	mov	r22, r23
 b2a:	78 2f       	mov	r23, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	b8 5f       	subi	r27, 0xF8	; 248
 b30:	39 f0       	breq	.+14     	; 0xb40 <__fixunssfsi+0x4c>
 b32:	b9 3f       	cpi	r27, 0xF9	; 249
 b34:	cc f3       	brlt	.-14     	; 0xb28 <__fixunssfsi+0x34>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b3 95       	inc	r27
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <__fixunssfsi+0x42>
 b40:	3e f4       	brtc	.+14     	; 0xb50 <__fixunssfsi+0x5c>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__floatunsisf>:
 b52:	e8 94       	clt
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__floatsisf+0x12>

00000b56 <__floatsisf>:
 b56:	97 fb       	bst	r25, 7
 b58:	3e f4       	brtc	.+14     	; 0xb68 <__floatsisf+0x12>
 b5a:	90 95       	com	r25
 b5c:	80 95       	com	r24
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	99 23       	and	r25, r25
 b6a:	a9 f0       	breq	.+42     	; 0xb96 <__floatsisf+0x40>
 b6c:	f9 2f       	mov	r31, r25
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	bb 27       	eor	r27, r27
 b72:	93 95       	inc	r25
 b74:	f6 95       	lsr	r31
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f1 11       	cpse	r31, r1
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <__floatsisf+0x1c>
 b82:	fa f4       	brpl	.+62     	; 0xbc2 <__floatsisf+0x6c>
 b84:	bb 0f       	add	r27, r27
 b86:	11 f4       	brne	.+4      	; 0xb8c <__floatsisf+0x36>
 b88:	60 ff       	sbrs	r22, 0
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <__floatsisf+0x6c>
 b8c:	6f 5f       	subi	r22, 0xFF	; 255
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <__floatsisf+0x6c>
 b96:	88 23       	and	r24, r24
 b98:	11 f0       	breq	.+4      	; 0xb9e <__floatsisf+0x48>
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__floatsisf+0x6a>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatsisf+0x54>
 ba2:	9e e8       	ldi	r25, 0x8E	; 142
 ba4:	87 2f       	mov	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__floatsisf+0x5e>
 baa:	66 23       	and	r22, r22
 bac:	71 f0       	breq	.+28     	; 0xbca <__floatsisf+0x74>
 bae:	96 e8       	ldi	r25, 0x86	; 134
 bb0:	86 2f       	mov	r24, r22
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__floatsisf+0x6c>
 bb8:	9a 95       	dec	r25
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <__floatsisf+0x62>
 bc2:	88 0f       	add	r24, r24
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__fp_inf>:
 bcc:	97 f9       	bld	r25, 7
 bce:	9f 67       	ori	r25, 0x7F	; 127
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	08 95       	ret

00000bd8 <__fp_nan>:
 bd8:	9f ef       	ldi	r25, 0xFF	; 255
 bda:	80 ec       	ldi	r24, 0xC0	; 192
 bdc:	08 95       	ret

00000bde <__fp_pscA>:
 bde:	00 24       	eor	r0, r0
 be0:	0a 94       	dec	r0
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	18 06       	cpc	r1, r24
 be8:	09 06       	cpc	r0, r25
 bea:	08 95       	ret

00000bec <__fp_pscB>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	12 16       	cp	r1, r18
 bf2:	13 06       	cpc	r1, r19
 bf4:	14 06       	cpc	r1, r20
 bf6:	05 06       	cpc	r0, r21
 bf8:	08 95       	ret

00000bfa <__fp_round>:
 bfa:	09 2e       	mov	r0, r25
 bfc:	03 94       	inc	r0
 bfe:	00 0c       	add	r0, r0
 c00:	11 f4       	brne	.+4      	; 0xc06 <__fp_round+0xc>
 c02:	88 23       	and	r24, r24
 c04:	52 f0       	brmi	.+20     	; 0xc1a <__fp_round+0x20>
 c06:	bb 0f       	add	r27, r27
 c08:	40 f4       	brcc	.+16     	; 0xc1a <__fp_round+0x20>
 c0a:	bf 2b       	or	r27, r31
 c0c:	11 f4       	brne	.+4      	; 0xc12 <__fp_round+0x18>
 c0e:	60 ff       	sbrs	r22, 0
 c10:	04 c0       	rjmp	.+8      	; 0xc1a <__fp_round+0x20>
 c12:	6f 5f       	subi	r22, 0xFF	; 255
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__fp_split3>:
 c1c:	57 fd       	sbrc	r21, 7
 c1e:	90 58       	subi	r25, 0x80	; 128
 c20:	44 0f       	add	r20, r20
 c22:	55 1f       	adc	r21, r21
 c24:	59 f0       	breq	.+22     	; 0xc3c <__fp_splitA+0x10>
 c26:	5f 3f       	cpi	r21, 0xFF	; 255
 c28:	71 f0       	breq	.+28     	; 0xc46 <__fp_splitA+0x1a>
 c2a:	47 95       	ror	r20

00000c2c <__fp_splitA>:
 c2c:	88 0f       	add	r24, r24
 c2e:	97 fb       	bst	r25, 7
 c30:	99 1f       	adc	r25, r25
 c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_splitA+0x20>
 c34:	9f 3f       	cpi	r25, 0xFF	; 255
 c36:	79 f0       	breq	.+30     	; 0xc56 <__fp_splitA+0x2a>
 c38:	87 95       	ror	r24
 c3a:	08 95       	ret
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	14 06       	cpc	r1, r20
 c42:	55 1f       	adc	r21, r21
 c44:	f2 cf       	rjmp	.-28     	; 0xc2a <__fp_split3+0xe>
 c46:	46 95       	lsr	r20
 c48:	f1 df       	rcall	.-30     	; 0xc2c <__fp_splitA>
 c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__fp_splitA+0x30>
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	99 1f       	adc	r25, r25
 c54:	f1 cf       	rjmp	.-30     	; 0xc38 <__fp_splitA+0xc>
 c56:	86 95       	lsr	r24
 c58:	71 05       	cpc	r23, r1
 c5a:	61 05       	cpc	r22, r1
 c5c:	08 94       	sec
 c5e:	08 95       	ret

00000c60 <__fp_zero>:
 c60:	e8 94       	clt

00000c62 <__fp_szero>:
 c62:	bb 27       	eor	r27, r27
 c64:	66 27       	eor	r22, r22
 c66:	77 27       	eor	r23, r23
 c68:	cb 01       	movw	r24, r22
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <__mulsf3>:
 c6e:	0e 94 4a 06 	call	0xc94	; 0xc94 <__mulsf3x>
 c72:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_round>
 c76:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscA>
 c7a:	38 f0       	brcs	.+14     	; 0xc8a <__mulsf3+0x1c>
 c7c:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscB>
 c80:	20 f0       	brcs	.+8      	; 0xc8a <__mulsf3+0x1c>
 c82:	95 23       	and	r25, r21
 c84:	11 f0       	breq	.+4      	; 0xc8a <__mulsf3+0x1c>
 c86:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 c8a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 c8e:	11 24       	eor	r1, r1
 c90:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>

00000c94 <__mulsf3x>:
 c94:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_split3>
 c98:	70 f3       	brcs	.-36     	; 0xc76 <__mulsf3+0x8>

00000c9a <__mulsf3_pse>:
 c9a:	95 9f       	mul	r25, r21
 c9c:	c1 f3       	breq	.-16     	; 0xc8e <__mulsf3+0x20>
 c9e:	95 0f       	add	r25, r21
 ca0:	50 e0       	ldi	r21, 0x00	; 0
 ca2:	55 1f       	adc	r21, r21
 ca4:	62 9f       	mul	r22, r18
 ca6:	f0 01       	movw	r30, r0
 ca8:	72 9f       	mul	r23, r18
 caa:	bb 27       	eor	r27, r27
 cac:	f0 0d       	add	r31, r0
 cae:	b1 1d       	adc	r27, r1
 cb0:	63 9f       	mul	r22, r19
 cb2:	aa 27       	eor	r26, r26
 cb4:	f0 0d       	add	r31, r0
 cb6:	b1 1d       	adc	r27, r1
 cb8:	aa 1f       	adc	r26, r26
 cba:	64 9f       	mul	r22, r20
 cbc:	66 27       	eor	r22, r22
 cbe:	b0 0d       	add	r27, r0
 cc0:	a1 1d       	adc	r26, r1
 cc2:	66 1f       	adc	r22, r22
 cc4:	82 9f       	mul	r24, r18
 cc6:	22 27       	eor	r18, r18
 cc8:	b0 0d       	add	r27, r0
 cca:	a1 1d       	adc	r26, r1
 ccc:	62 1f       	adc	r22, r18
 cce:	73 9f       	mul	r23, r19
 cd0:	b0 0d       	add	r27, r0
 cd2:	a1 1d       	adc	r26, r1
 cd4:	62 1f       	adc	r22, r18
 cd6:	83 9f       	mul	r24, r19
 cd8:	a0 0d       	add	r26, r0
 cda:	61 1d       	adc	r22, r1
 cdc:	22 1f       	adc	r18, r18
 cde:	74 9f       	mul	r23, r20
 ce0:	33 27       	eor	r19, r19
 ce2:	a0 0d       	add	r26, r0
 ce4:	61 1d       	adc	r22, r1
 ce6:	23 1f       	adc	r18, r19
 ce8:	84 9f       	mul	r24, r20
 cea:	60 0d       	add	r22, r0
 cec:	21 1d       	adc	r18, r1
 cee:	82 2f       	mov	r24, r18
 cf0:	76 2f       	mov	r23, r22
 cf2:	6a 2f       	mov	r22, r26
 cf4:	11 24       	eor	r1, r1
 cf6:	9f 57       	subi	r25, 0x7F	; 127
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	9a f0       	brmi	.+38     	; 0xd22 <__mulsf3_pse+0x88>
 cfc:	f1 f0       	breq	.+60     	; 0xd3a <__mulsf3_pse+0xa0>
 cfe:	88 23       	and	r24, r24
 d00:	4a f0       	brmi	.+18     	; 0xd14 <__mulsf3_pse+0x7a>
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	bb 1f       	adc	r27, r27
 d08:	66 1f       	adc	r22, r22
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 1f       	adc	r24, r24
 d0e:	91 50       	subi	r25, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	a9 f7       	brne	.-22     	; 0xcfe <__mulsf3_pse+0x64>
 d14:	9e 3f       	cpi	r25, 0xFE	; 254
 d16:	51 05       	cpc	r21, r1
 d18:	80 f0       	brcs	.+32     	; 0xd3a <__mulsf3_pse+0xa0>
 d1a:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 d1e:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>
 d22:	5f 3f       	cpi	r21, 0xFF	; 255
 d24:	e4 f3       	brlt	.-8      	; 0xd1e <__mulsf3_pse+0x84>
 d26:	98 3e       	cpi	r25, 0xE8	; 232
 d28:	d4 f3       	brlt	.-12     	; 0xd1e <__mulsf3_pse+0x84>
 d2a:	86 95       	lsr	r24
 d2c:	77 95       	ror	r23
 d2e:	67 95       	ror	r22
 d30:	b7 95       	ror	r27
 d32:	f7 95       	ror	r31
 d34:	e7 95       	ror	r30
 d36:	9f 5f       	subi	r25, 0xFF	; 255
 d38:	c1 f7       	brne	.-16     	; 0xd2a <__mulsf3_pse+0x90>
 d3a:	fe 2b       	or	r31, r30
 d3c:	88 0f       	add	r24, r24
 d3e:	91 1d       	adc	r25, r1
 d40:	96 95       	lsr	r25
 d42:	87 95       	ror	r24
 d44:	97 f9       	bld	r25, 7
 d46:	08 95       	ret

00000d48 <atoi>:
 d48:	fc 01       	movw	r30, r24
 d4a:	88 27       	eor	r24, r24
 d4c:	99 27       	eor	r25, r25
 d4e:	e8 94       	clt
 d50:	21 91       	ld	r18, Z+
 d52:	20 32       	cpi	r18, 0x20	; 32
 d54:	e9 f3       	breq	.-6      	; 0xd50 <atoi+0x8>
 d56:	29 30       	cpi	r18, 0x09	; 9
 d58:	10 f0       	brcs	.+4      	; 0xd5e <atoi+0x16>
 d5a:	2e 30       	cpi	r18, 0x0E	; 14
 d5c:	c8 f3       	brcs	.-14     	; 0xd50 <atoi+0x8>
 d5e:	2b 32       	cpi	r18, 0x2B	; 43
 d60:	41 f0       	breq	.+16     	; 0xd72 <atoi+0x2a>
 d62:	2d 32       	cpi	r18, 0x2D	; 45
 d64:	39 f4       	brne	.+14     	; 0xd74 <atoi+0x2c>
 d66:	68 94       	set
 d68:	04 c0       	rjmp	.+8      	; 0xd72 <atoi+0x2a>
 d6a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulhi_const_10>
 d6e:	82 0f       	add	r24, r18
 d70:	91 1d       	adc	r25, r1
 d72:	21 91       	ld	r18, Z+
 d74:	20 53       	subi	r18, 0x30	; 48
 d76:	2a 30       	cpi	r18, 0x0A	; 10
 d78:	c0 f3       	brcs	.-16     	; 0xd6a <atoi+0x22>
 d7a:	1e f4       	brtc	.+6      	; 0xd82 <atoi+0x3a>
 d7c:	90 95       	com	r25
 d7e:	81 95       	neg	r24
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	08 95       	ret

00000d84 <__mulhi_const_10>:
 d84:	7a e0       	ldi	r23, 0x0A	; 10
 d86:	97 9f       	mul	r25, r23
 d88:	90 2d       	mov	r25, r0
 d8a:	87 9f       	mul	r24, r23
 d8c:	80 2d       	mov	r24, r0
 d8e:	91 0d       	add	r25, r1
 d90:	11 24       	eor	r1, r1
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
