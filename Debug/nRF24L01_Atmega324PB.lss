
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000c44  00000cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800130  00800130  00000d08  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000279d  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001130  00000000  00000000  00003795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000139f  00000000  00000000  000048c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00005c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0e  00000000  00000000  00006314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c8f  00000000  00000000  00006d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000089b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e4       	ldi	r30, 0x44	; 68
  e0:	fc e0       	ldi	r31, 0x0C	; 12
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 33       	cpi	r26, 0x30	; 48
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e3       	ldi	r26, 0x30	; 48
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 33       	cpi	r26, 0x3B	; 59
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 ca 00 	call	0x194	; 0x194 <main>
 102:	0c 94 20 06 	jmp	0xc40	; 0xc40 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& FUNCTIONS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED1_DDR |= (1<<LED1_PIN); // set LED gpio as output
 10a:	6c 9a       	sbi	0x0d, 4	; 13
	DDRC |= (1<<4);
 10c:	3c 9a       	sbi	0x07, 4	; 7
 10e:	08 95       	ret

00000110 <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	69 f0       	breq	.+26     	; 0x12e <delay_ms+0x1e>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_ms+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <delay_ms+0x12>
 122:	00 00       	nop
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	a9 f7       	brne	.-22     	; 0x118 <delay_ms+0x8>
 12e:	08 95       	ret

00000130 <flash_LED>:
	LED1_DDR |= (1<<LED1_PIN); // set LED gpio as output
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <flash_LED+0x2c>
 13e:	8b 01       	movw	r16, r22
 140:	d8 2f       	mov	r29, r24
 142:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED2;
 144:	68 94       	set
 146:	ff 24       	eor	r15, r15
 148:	f5 f8       	bld	r15, 5
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	9f 25       	eor	r25, r15
 14e:	95 b9       	out	0x05, r25	; 5
		delay_ms(ms);
 150:	c8 01       	movw	r24, r16
 152:	0e 94 88 00 	call	0x110	; 0x110 <delay_ms>
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	dc 13       	cpse	r29, r28
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <flash_LED+0x1a>
	{
		TOGGLE_LED2;
		delay_ms(ms);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	08 95       	ret

00000168 <setup_timer_1>:
	}
}
void setup_timer_1()
{
	
	TCCR1A |= (1<<COM1A1) | (1<<COM1A0); // clear OCRA on compare
 168:	e0 e8       	ldi	r30, 0x80	; 128
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 6c       	ori	r24, 0xC0	; 192
 170:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12); // 1024 prescaler, CTC mode
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8d 60       	ori	r24, 0x0D	; 13
 17a:	80 83       	st	Z, r24
	OCR1A = 7812; // 1 second period
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	9e e1       	ldi	r25, 0x1E	; 30
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1<<OCIE1A); // set interrupt on OCA compare
 188:	ef e6       	ldi	r30, 0x6F	; 111
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <main>:
volatile float signal_strength = 0;


int main(void)
{
	setup_gpios(); 
 194:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	
	/* USART setup */
	setup_usart0(BR_38400); // for NEO6 GPS
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	0e 94 88 03 	call	0x710	; 0x710 <setup_usart0>
	
	/* nRF24L01 setup */
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 19e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 1a2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <mirf_init>
	mirf_config(); // configure nRF24L01
 1a6:	0e 94 35 02 	call	0x46a	; 0x46a <mirf_config>
	mirf_set_TADDR(tx_address);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <mirf_set_TADDR>
	setup_timer_1();
 1b2:	0e 94 b4 00 	call	0x168	; 0x168 <setup_timer_1>
	
	buffer[0] = 10;
 1b6:	e8 e3       	ldi	r30, 0x38	; 56
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	80 83       	st	Z, r24
	buffer[1] = 20;
 1be:	84 e1       	ldi	r24, 0x14	; 20
 1c0:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = 30;
 1c2:	8e e1       	ldi	r24, 0x1E	; 30
 1c4:	82 83       	std	Z+2, r24	; 0x02
			
	sei(); // enable global interrupts
 1c6:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 1c8:	62 e3       	ldi	r22, 0x32	; 50
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	0e 94 98 00 	call	0x130	; 0x130 <flash_LED>
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x42>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x48>
 1dc:	00 00       	nop
	_delay_ms(10);
	
    while (1) 
    {
		TOGGLE_LED2;
 1de:	10 e2       	ldi	r17, 0x20	; 32
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1e0:	c8 e3       	ldi	r28, 0x38	; 56
 1e2:	d1 e0       	ldi	r29, 0x01	; 1
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
	_delay_ms(10);
	
    while (1) 
    {
		TOGGLE_LED2;
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	81 27       	eor	r24, r17
 1e8:	85 b9       	out	0x05, r24	; 5
		 
		 for (int i=0; i<3; i++)
			buffer[i]++;
 1ea:	88 81       	ld	r24, Y
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	88 83       	st	Y, r24
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	8a 83       	std	Y+2, r24	; 0x02
		  
		mirf_send(buffer, mirf_PAYLOAD);
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 8d 02 	call	0x51a	; 0x51a <mirf_send>
		
		transmission_count++;
 204:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <transmission_count>
 208:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <transmission_count+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <transmission_count+0x1>
 212:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <transmission_count>
		
		while (!mirf_data_sent())
 216:	0e c0       	rjmp	.+28     	; 0x234 <main+0xa0>
		{
			if (mirf_read_MAX_RT())
 218:	0e 94 12 02 	call	0x424	; 0x424 <mirf_read_MAX_RT>
 21c:	88 23       	and	r24, r24
 21e:	51 f0       	breq	.+20     	; 0x234 <main+0xa0>
			{
				max_rt_count++;	
 220:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <max_rt_count>
 224:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <max_rt_count+0x1>
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <max_rt_count+0x1>
 22e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <max_rt_count>
				break;
 232:	04 c0       	rjmp	.+8      	; 0x23c <main+0xa8>
		  
		mirf_send(buffer, mirf_PAYLOAD);
		
		transmission_count++;
		
		while (!mirf_data_sent())
 234:	0e 94 05 02 	call	0x40a	; 0x40a <mirf_data_sent>
 238:	88 23       	and	r24, r24
 23a:	71 f3       	breq	.-36     	; 0x218 <main+0x84>
 23c:	9f e7       	ldi	r25, 0x7F	; 127
 23e:	28 e3       	ldi	r18, 0x38	; 56
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	91 50       	subi	r25, 0x01	; 1
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0xae>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xb8>
 24c:	00 00       	nop
 24e:	ca cf       	rjmp	.-108    	; 0x1e4 <main+0x50>

00000250 <__vector_13>:


//&&&&&&&&&&&&&&&&&&&&&& ISRs &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
ISR(TIMER1_COMPA_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	print_0("data rate: ;");
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 b4 02 	call	0x568	; 0x568 <print_0>
	print_int_0(transmission_count);
 286:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <transmission_count>
 28a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <transmission_count+0x1>
 28e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_int_0>
	println_0(" pkt/sec;");
 292:	82 e1       	ldi	r24, 0x12	; 18
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 d7 02 	call	0x5ae	; 0x5ae <println_0>
	
	signal_strength = ((float)max_rt_count/(float)transmission_count);
 29a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <max_rt_count>
 29e:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <max_rt_count+0x1>
 2a2:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <transmission_count>
 2a6:	d0 91 35 01 	lds	r29, 0x0135	; 0x800135 <transmission_count+0x1>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatunsisf>
 2b2:	6b 01       	movw	r12, r22
 2b4:	7c 01       	movw	r14, r24
 2b6:	be 01       	movw	r22, r28
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatunsisf>
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__divsf3>
 2cc:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 2d0:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 2d4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 2d8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	if (signal_strength>.99)
 2dc:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 2e0:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 2e4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 2e8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 2ec:	24 ea       	ldi	r18, 0xA4	; 164
 2ee:	30 e7       	ldi	r19, 0x70	; 112
 2f0:	4d e7       	ldi	r20, 0x7D	; 125
 2f2:	5f e3       	ldi	r21, 0x3F	; 63
 2f4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__gesf2>
 2f8:	18 16       	cp	r1, r24
 2fa:	64 f4       	brge	.+24     	; 0x314 <__vector_13+0xc4>
		signal_strength = .99;
 2fc:	84 ea       	ldi	r24, 0xA4	; 164
 2fe:	90 e7       	ldi	r25, 0x70	; 112
 300:	ad e7       	ldi	r26, 0x7D	; 125
 302:	bf e3       	ldi	r27, 0x3F	; 63
 304:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 308:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 30c:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <__data_end+0x2>
 310:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <__data_end+0x3>
	
	signal_strength = 1-signal_strength;
 314:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 318:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
 31c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end+0x2>
 320:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x3>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	9f e3       	ldi	r25, 0x3F	; 63
 32c:	0e 94 91 03 	call	0x722	; 0x722 <__subsf3>
 330:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 334:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 338:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 33c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	
	signal_strength *= 100;
 340:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 344:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 348:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 34c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	48 ec       	ldi	r20, 0xC8	; 200
 356:	52 e4       	ldi	r21, 0x42	; 66
 358:	0e 94 32 05 	call	0xa64	; 0xa64 <__mulsf3>
 35c:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 360:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 364:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 368:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	
	max_rt_count = (uint16_t)signal_strength;
 36c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 370:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 374:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0x2>
 378:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x3>
 37c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fixunssfsi>
 380:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <max_rt_count+0x1>
 384:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <max_rt_count>
	
	print_0("Signal strength: ;");
 388:	8c e1       	ldi	r24, 0x1C	; 28
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 b4 02 	call	0x568	; 0x568 <print_0>
	print_int_0(max_rt_count);
 390:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <max_rt_count>
 394:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <max_rt_count+0x1>
 398:	0e 94 fd 02 	call	0x5fa	; 0x5fa <print_int_0>
	print_char_0('%');
 39c:	85 e2       	ldi	r24, 0x25	; 37
 39e:	0e 94 b1 02 	call	0x562	; 0x562 <print_char_0>
	print_char_0(NL);
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	0e 94 b1 02 	call	0x562	; 0x562 <print_char_0>
	print_char_0(NL);
 3a8:	8a e0       	ldi	r24, 0x0A	; 10
 3aa:	0e 94 b1 02 	call	0x562	; 0x562 <print_char_0>
	
	transmission_count = 0;
 3ae:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <transmission_count+0x1>
 3b2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <transmission_count>
	signal_strength = 0;
 3b6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 3ba:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 3be:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end+0x2>
 3c2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x3>
	max_rt_count = 0;
 3c6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <max_rt_count+0x1>
 3ca:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <max_rt_count>
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <mirf_init>:
void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
	mirf_write_register(RX_ADDR_P1, adr, 5);
	mirf_CE_hi;
 3fc:	3f 9a       	sbi	0x07, 7	; 7
 3fe:	56 9a       	sbi	0x0a, 6	; 10
 400:	47 98       	cbi	0x08, 7	; 8
 402:	5e 9a       	sbi	0x0b, 6	; 11
 404:	0e 94 50 03 	call	0x6a0	; 0x6a0 <spi1_master_initialize>
 408:	08 95       	ret

0000040a <mirf_data_sent>:
 40a:	5e 98       	cbi	0x0b, 6	; 11
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	0e 94 5f 03 	call	0x6be	; 0x6be <spi1_exchange_char>
 412:	5e 9a       	sbi	0x0b, 6	; 11
 414:	ef ec       	ldi	r30, 0xCF	; 207
 416:	f7 e0       	ldi	r31, 0x07	; 7
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <mirf_data_sent+0xe>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <mirf_data_sent+0x14>
 41e:	00 00       	nop
 420:	80 72       	andi	r24, 0x20	; 32
 422:	08 95       	ret

00000424 <mirf_read_MAX_RT>:
 424:	5e 98       	cbi	0x0b, 6	; 11
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	0e 94 5f 03 	call	0x6be	; 0x6be <spi1_exchange_char>
 42c:	5e 9a       	sbi	0x0b, 6	; 11
 42e:	ef ec       	ldi	r30, 0xCF	; 207
 430:	f7 e0       	ldi	r31, 0x07	; 7
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <mirf_read_MAX_RT+0xe>
 436:	00 c0       	rjmp	.+0      	; 0x438 <mirf_read_MAX_RT+0x14>
 438:	00 00       	nop
 43a:	82 95       	swap	r24
 43c:	81 70       	andi	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <mirf_config_register>:
 440:	cf 93       	push	r28
 442:	c6 2f       	mov	r28, r22
 444:	5e 98       	cbi	0x0b, 6	; 11
 446:	8f 71       	andi	r24, 0x1F	; 31
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	0e 94 57 03 	call	0x6ae	; 0x6ae <spi1_send_char>
 44e:	82 e4       	ldi	r24, 0x42	; 66
 450:	8a 95       	dec	r24
 452:	f1 f7       	brne	.-4      	; 0x450 <mirf_config_register+0x10>
 454:	00 c0       	rjmp	.+0      	; 0x456 <mirf_config_register+0x16>
 456:	8c 2f       	mov	r24, r28
 458:	0e 94 57 03 	call	0x6ae	; 0x6ae <spi1_send_char>
 45c:	5e 9a       	sbi	0x0b, 6	; 11
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <mirf_config_register+0x20>
 464:	00 c0       	rjmp	.+0      	; 0x466 <mirf_config_register+0x26>
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <mirf_config>:
 46a:	6c e6       	ldi	r22, 0x6C	; 108
 46c:	85 e0       	ldi	r24, 0x05	; 5
 46e:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	81 e1       	ldi	r24, 0x11	; 17
 476:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	82 e1       	ldi	r24, 0x12	; 18
 47e:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	83 e1       	ldi	r24, 0x13	; 19
 486:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	84 e1       	ldi	r24, 0x14	; 20
 48e:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	85 e1       	ldi	r24, 0x15	; 21
 496:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	86 e1       	ldi	r24, 0x16	; 22
 49e:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4ba:	6f ef       	ldi	r22, 0xFF	; 255
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4c2:	60 e7       	ldi	r22, 0x70	; 112
 4c4:	87 e0       	ldi	r24, 0x07	; 7
 4c6:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
 4ca:	08 95       	ret

000004cc <mirf_write_register>:
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	eb 01       	movw	r28, r22
 4d4:	14 2f       	mov	r17, r20
 4d6:	5e 98       	cbi	0x0b, 6	; 11
 4d8:	8f 71       	andi	r24, 0x1F	; 31
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	0e 94 57 03 	call	0x6ae	; 0x6ae <spi1_send_char>
 4e0:	61 2f       	mov	r22, r17
 4e2:	ce 01       	movw	r24, r28
 4e4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <spi1_send_bytes>
 4e8:	5e 9a       	sbi	0x0b, 6	; 11
 4ea:	82 e4       	ldi	r24, 0x42	; 66
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <mirf_write_register+0x20>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <mirf_write_register+0x26>
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 500:	45 e0       	ldi	r20, 0x05	; 5
 502:	bc 01       	movw	r22, r24
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	0e 94 66 02 	call	0x4cc	; 0x4cc <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 50a:	45 e0       	ldi	r20, 0x05	; 5
 50c:	be 01       	movw	r22, r28
 50e:	80 e1       	ldi	r24, 0x10	; 16
 510:	0e 94 66 02 	call	0x4cc	; 0x4cc <mirf_write_register>
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	ec 01       	movw	r28, r24
 522:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 524:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 526:	6a e5       	ldi	r22, 0x5A	; 90
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52e:	82 e4       	ldi	r24, 0x42	; 66
 530:	8a 95       	dec	r24
 532:	f1 f7       	brne	.-4      	; 0x530 <mirf_send+0x16>
 534:	00 c0       	rjmp	.+0      	; 0x536 <mirf_send+0x1c>
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 536:	60 e7       	ldi	r22, 0x70	; 112
 538:	87 e0       	ldi	r24, 0x07	; 7
 53a:	0e 94 20 02 	call	0x440	; 0x440 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 53e:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 540:	80 ea       	ldi	r24, 0xA0	; 160
 542:	0e 94 57 03 	call	0x6ae	; 0x6ae <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 546:	61 2f       	mov	r22, r17
 548:	ce 01       	movw	r24, r28
 54a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 54e:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 550:	47 9a       	sbi	0x08, 7	; 8
 552:	88 e2       	ldi	r24, 0x28	; 40
 554:	8a 95       	dec	r24
 556:	f1 f7       	brne	.-4      	; 0x554 <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 558:	47 98       	cbi	0x08, 7	; 8
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	08 95       	ret

00000562 <print_char_0>:
		usart1_send_char(char_array[i]);
		
	}
	usart1_send_char(0x0D); // CR
	usart1_send_char(0x0A); // NL
}
 562:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 566:	08 95       	ret

00000568 <print_0>:
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 574:	8a 30       	cpi	r24, 0x0A	; 10
 576:	b1 f0       	breq	.+44     	; 0x5a4 <print_0+0x3c>
 578:	8b 33       	cpi	r24, 0x3B	; 59
 57a:	61 f4       	brne	.+24     	; 0x594 <print_0+0x2c>
 57c:	13 c0       	rjmp	.+38     	; 0x5a4 <print_0+0x3c>
 57e:	89 91       	ld	r24, Y+
 580:	8a 30       	cpi	r24, 0x0A	; 10
 582:	81 f0       	breq	.+32     	; 0x5a4 <print_0+0x3c>
 584:	8b 33       	cpi	r24, 0x3B	; 59
 586:	71 f0       	breq	.+28     	; 0x5a4 <print_0+0x3c>
 588:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 58c:	0c 17       	cp	r16, r28
 58e:	1d 07       	cpc	r17, r29
 590:	b1 f7       	brne	.-20     	; 0x57e <print_0+0x16>
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <print_0+0x3c>
 594:	8f 01       	movw	r16, r30
 596:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 59a:	e8 01       	movw	r28, r16
 59c:	21 96       	adiw	r28, 0x01	; 1
 59e:	08 53       	subi	r16, 0x38	; 56
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	ed cf       	rjmp	.-38     	; 0x57e <print_0+0x16>
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	08 95       	ret

000005ae <println_0>:
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	8c 01       	movw	r16, r24
 5b8:	fc 01       	movw	r30, r24
 5ba:	80 81       	ld	r24, Z
 5bc:	8a 30       	cpi	r24, 0x0A	; 10
 5be:	69 f0       	breq	.+26     	; 0x5da <println_0+0x2c>
 5c0:	8b 33       	cpi	r24, 0x3B	; 59
 5c2:	79 f4       	brne	.+30     	; 0x5e2 <println_0+0x34>
 5c4:	0a c0       	rjmp	.+20     	; 0x5da <println_0+0x2c>
 5c6:	89 91       	ld	r24, Y+
 5c8:	8a 30       	cpi	r24, 0x0A	; 10
 5ca:	39 f0       	breq	.+14     	; 0x5da <println_0+0x2c>
 5cc:	8b 33       	cpi	r24, 0x3B	; 59
 5ce:	29 f0       	breq	.+10     	; 0x5da <println_0+0x2c>
 5d0:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 5d4:	0c 17       	cp	r16, r28
 5d6:	1d 07       	cpc	r17, r29
 5d8:	b1 f7       	brne	.-20     	; 0x5c6 <println_0+0x18>
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <println_0+0x42>
 5e2:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
 5e6:	e8 01       	movw	r28, r16
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	08 53       	subi	r16, 0x38	; 56
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	eb cf       	rjmp	.-42     	; 0x5c6 <println_0+0x18>
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <print_int_0>:

void print_int_0(int number)
{
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	c0 54       	subi	r28, 0x40	; 64
 60c:	d1 09       	sbc	r29, r1
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	8c 01       	movw	r16, r24
	if (number == 0)
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	31 f4       	brne	.+12     	; 0x62a <print_int_0+0x30>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
{
	if (number == 0)
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
 624:	e1 2c       	mov	r14, r1
 626:	f1 2c       	mov	r15, r1
 628:	16 c0       	rjmp	.+44     	; 0x656 <print_int_0+0x5c>
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 62e:	ea e0       	ldi	r30, 0x0A	; 10
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	01 c0       	rjmp	.+2      	; 0x636 <print_int_0+0x3c>
		num_digit++;
 634:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 636:	bf 01       	movw	r22, r30
 638:	0e 94 c3 05 	call	0xb86	; 0xb86 <__divmodhi4>
 63c:	cb 01       	movw	r24, r22
		num_digit++;
 63e:	79 01       	movw	r14, r18
 640:	4f ef       	ldi	r20, 0xFF	; 255
 642:	e4 1a       	sub	r14, r20
 644:	f4 0a       	sbc	r15, r20
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	a9 f7       	brne	.-22     	; 0x634 <print_int_0+0x3a>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 64a:	11 23       	and	r17, r17
 64c:	24 f4       	brge	.+8      	; 0x656 <print_int_0+0x5c>
 64e:	79 01       	movw	r14, r18
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	e8 0e       	add	r14, r24
 654:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 656:	4a e0       	ldi	r20, 0x0A	; 10
 658:	be 01       	movw	r22, r28
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	c8 01       	movw	r24, r16
 660:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 664:	1e 14       	cp	r1, r14
 666:	1f 04       	cpc	r1, r15
 668:	6c f4       	brge	.+26     	; 0x684 <print_int_0+0x8a>
 66a:	8e 01       	movw	r16, r28
 66c:	0f 5f       	subi	r16, 0xFF	; 255
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	e0 0e       	add	r14, r16
 672:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 674:	f8 01       	movw	r30, r16
 676:	81 91       	ld	r24, Z+
 678:	8f 01       	movw	r16, r30
 67a:	0e 94 80 03 	call	0x700	; 0x700 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array, 10);

	for (int i=0; i<num_digit ; i++)
 67e:	0e 15       	cp	r16, r14
 680:	1f 05       	cpc	r17, r15
 682:	c1 f7       	brne	.-16     	; 0x674 <print_int_0+0x7a>
	{
		usart0_send_char(char_array[i]);
	}
}
 684:	c0 5c       	subi	r28, 0xC0	; 192
 686:	df 4f       	sbci	r29, 0xFF	; 255
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	08 95       	ret

000006a0 <spi1_master_initialize>:
 6a0:	6b 9a       	sbi	0x0d, 3	; 13
 6a2:	57 9a       	sbi	0x0a, 7	; 10
 6a4:	56 9a       	sbi	0x0a, 6	; 10
 6a6:	82 e5       	ldi	r24, 0x52	; 82
 6a8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 6ac:	08 95       	ret

000006ae <spi1_send_char>:
 6ae:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6b2:	ed ea       	ldi	r30, 0xAD	; 173
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	88 23       	and	r24, r24
 6ba:	ec f7       	brge	.-6      	; 0x6b6 <spi1_send_char+0x8>
 6bc:	08 95       	ret

000006be <spi1_exchange_char>:
 6be:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6c2:	ed ea       	ldi	r30, 0xAD	; 173
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	88 23       	and	r24, r24
 6ca:	ec f7       	brge	.-6      	; 0x6c6 <spi1_exchange_char+0x8>
 6cc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 6d0:	08 95       	ret

000006d2 <spi1_send_bytes>:
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	66 23       	and	r22, r22
 6d8:	81 f0       	breq	.+32     	; 0x6fa <spi1_send_bytes+0x28>
 6da:	dc 01       	movw	r26, r24
 6dc:	9c 01       	movw	r18, r24
 6de:	26 0f       	add	r18, r22
 6e0:	31 1d       	adc	r19, r1
 6e2:	ce ea       	ldi	r28, 0xAE	; 174
 6e4:	d0 e0       	ldi	r29, 0x00	; 0
 6e6:	ed ea       	ldi	r30, 0xAD	; 173
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	9d 91       	ld	r25, X+
 6ec:	98 83       	st	Y, r25
 6ee:	90 81       	ld	r25, Z
 6f0:	99 23       	and	r25, r25
 6f2:	ec f7       	brge	.-6      	; 0x6ee <spi1_send_bytes+0x1c>
 6f4:	a2 17       	cp	r26, r18
 6f6:	b3 07       	cpc	r27, r19
 6f8:	c1 f7       	brne	.-16     	; 0x6ea <spi1_send_bytes+0x18>
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 700:	e0 ec       	ldi	r30, 0xC0	; 192
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	90 81       	ld	r25, Z
 706:	95 ff       	sbrs	r25, 5
 708:	fd cf       	rjmp	.-6      	; 0x704 <usart0_send_char+0x4>
 70a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 70e:	08 95       	ret

00000710 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 710:	98 e9       	ldi	r25, 0x98	; 152
 712:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 716:	96 e0       	ldi	r25, 0x06	; 6
 718:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 71c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 720:	08 95       	ret

00000722 <__subsf3>:
 722:	50 58       	subi	r21, 0x80	; 128

00000724 <__addsf3>:
 724:	bb 27       	eor	r27, r27
 726:	aa 27       	eor	r26, r26
 728:	0e 94 a9 03 	call	0x752	; 0x752 <__addsf3x>
 72c:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_round>
 730:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscA>
 734:	38 f0       	brcs	.+14     	; 0x744 <__addsf3+0x20>
 736:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscB>
 73a:	20 f0       	brcs	.+8      	; 0x744 <__addsf3+0x20>
 73c:	39 f4       	brne	.+14     	; 0x74c <__addsf3+0x28>
 73e:	9f 3f       	cpi	r25, 0xFF	; 255
 740:	19 f4       	brne	.+6      	; 0x748 <__addsf3+0x24>
 742:	26 f4       	brtc	.+8      	; 0x74c <__addsf3+0x28>
 744:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_nan>
 748:	0e f4       	brtc	.+2      	; 0x74c <__addsf3+0x28>
 74a:	e0 95       	com	r30
 74c:	e7 fb       	bst	r30, 7
 74e:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>

00000752 <__addsf3x>:
 752:	e9 2f       	mov	r30, r25
 754:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_split3>
 758:	58 f3       	brcs	.-42     	; 0x730 <__addsf3+0xc>
 75a:	ba 17       	cp	r27, r26
 75c:	62 07       	cpc	r22, r18
 75e:	73 07       	cpc	r23, r19
 760:	84 07       	cpc	r24, r20
 762:	95 07       	cpc	r25, r21
 764:	20 f0       	brcs	.+8      	; 0x76e <__addsf3x+0x1c>
 766:	79 f4       	brne	.+30     	; 0x786 <__addsf3x+0x34>
 768:	a6 f5       	brtc	.+104    	; 0x7d2 <__addsf3x+0x80>
 76a:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_zero>
 76e:	0e f4       	brtc	.+2      	; 0x772 <__addsf3x+0x20>
 770:	e0 95       	com	r30
 772:	0b 2e       	mov	r0, r27
 774:	ba 2f       	mov	r27, r26
 776:	a0 2d       	mov	r26, r0
 778:	0b 01       	movw	r0, r22
 77a:	b9 01       	movw	r22, r18
 77c:	90 01       	movw	r18, r0
 77e:	0c 01       	movw	r0, r24
 780:	ca 01       	movw	r24, r20
 782:	a0 01       	movw	r20, r0
 784:	11 24       	eor	r1, r1
 786:	ff 27       	eor	r31, r31
 788:	59 1b       	sub	r21, r25
 78a:	99 f0       	breq	.+38     	; 0x7b2 <__addsf3x+0x60>
 78c:	59 3f       	cpi	r21, 0xF9	; 249
 78e:	50 f4       	brcc	.+20     	; 0x7a4 <__addsf3x+0x52>
 790:	50 3e       	cpi	r21, 0xE0	; 224
 792:	68 f1       	brcs	.+90     	; 0x7ee <__addsf3x+0x9c>
 794:	1a 16       	cp	r1, r26
 796:	f0 40       	sbci	r31, 0x00	; 0
 798:	a2 2f       	mov	r26, r18
 79a:	23 2f       	mov	r18, r19
 79c:	34 2f       	mov	r19, r20
 79e:	44 27       	eor	r20, r20
 7a0:	58 5f       	subi	r21, 0xF8	; 248
 7a2:	f3 cf       	rjmp	.-26     	; 0x78a <__addsf3x+0x38>
 7a4:	46 95       	lsr	r20
 7a6:	37 95       	ror	r19
 7a8:	27 95       	ror	r18
 7aa:	a7 95       	ror	r26
 7ac:	f0 40       	sbci	r31, 0x00	; 0
 7ae:	53 95       	inc	r21
 7b0:	c9 f7       	brne	.-14     	; 0x7a4 <__addsf3x+0x52>
 7b2:	7e f4       	brtc	.+30     	; 0x7d2 <__addsf3x+0x80>
 7b4:	1f 16       	cp	r1, r31
 7b6:	ba 0b       	sbc	r27, r26
 7b8:	62 0b       	sbc	r22, r18
 7ba:	73 0b       	sbc	r23, r19
 7bc:	84 0b       	sbc	r24, r20
 7be:	ba f0       	brmi	.+46     	; 0x7ee <__addsf3x+0x9c>
 7c0:	91 50       	subi	r25, 0x01	; 1
 7c2:	a1 f0       	breq	.+40     	; 0x7ec <__addsf3x+0x9a>
 7c4:	ff 0f       	add	r31, r31
 7c6:	bb 1f       	adc	r27, r27
 7c8:	66 1f       	adc	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	c2 f7       	brpl	.-16     	; 0x7c0 <__addsf3x+0x6e>
 7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__addsf3x+0x9c>
 7d2:	ba 0f       	add	r27, r26
 7d4:	62 1f       	adc	r22, r18
 7d6:	73 1f       	adc	r23, r19
 7d8:	84 1f       	adc	r24, r20
 7da:	48 f4       	brcc	.+18     	; 0x7ee <__addsf3x+0x9c>
 7dc:	87 95       	ror	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	b7 95       	ror	r27
 7e4:	f7 95       	ror	r31
 7e6:	9e 3f       	cpi	r25, 0xFE	; 254
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <__addsf3x+0x9a>
 7ea:	b0 cf       	rjmp	.-160    	; 0x74c <__addsf3+0x28>
 7ec:	93 95       	inc	r25
 7ee:	88 0f       	add	r24, r24
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__addsf3x+0xa2>
 7f2:	99 27       	eor	r25, r25
 7f4:	ee 0f       	add	r30, r30
 7f6:	97 95       	ror	r25
 7f8:	87 95       	ror	r24
 7fa:	08 95       	ret

000007fc <__divsf3>:
 7fc:	0e 94 12 04 	call	0x824	; 0x824 <__divsf3x>
 800:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_round>
 804:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscB>
 808:	58 f0       	brcs	.+22     	; 0x820 <__divsf3+0x24>
 80a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscA>
 80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0x24>
 810:	29 f4       	brne	.+10     	; 0x81c <__divsf3+0x20>
 812:	5f 3f       	cpi	r21, 0xFF	; 255
 814:	29 f0       	breq	.+10     	; 0x820 <__divsf3+0x24>
 816:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 81a:	51 11       	cpse	r21, r1
 81c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>
 820:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_nan>

00000824 <__divsf3x>:
 824:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_split3>
 828:	68 f3       	brcs	.-38     	; 0x804 <__divsf3+0x8>

0000082a <__divsf3_pse>:
 82a:	99 23       	and	r25, r25
 82c:	b1 f3       	breq	.-20     	; 0x81a <__divsf3+0x1e>
 82e:	55 23       	and	r21, r21
 830:	91 f3       	breq	.-28     	; 0x816 <__divsf3+0x1a>
 832:	95 1b       	sub	r25, r21
 834:	55 0b       	sbc	r21, r21
 836:	bb 27       	eor	r27, r27
 838:	aa 27       	eor	r26, r26
 83a:	62 17       	cp	r22, r18
 83c:	73 07       	cpc	r23, r19
 83e:	84 07       	cpc	r24, r20
 840:	38 f0       	brcs	.+14     	; 0x850 <__divsf3_pse+0x26>
 842:	9f 5f       	subi	r25, 0xFF	; 255
 844:	5f 4f       	sbci	r21, 0xFF	; 255
 846:	22 0f       	add	r18, r18
 848:	33 1f       	adc	r19, r19
 84a:	44 1f       	adc	r20, r20
 84c:	aa 1f       	adc	r26, r26
 84e:	a9 f3       	breq	.-22     	; 0x83a <__divsf3_pse+0x10>
 850:	35 d0       	rcall	.+106    	; 0x8bc <__divsf3_pse+0x92>
 852:	0e 2e       	mov	r0, r30
 854:	3a f0       	brmi	.+14     	; 0x864 <__divsf3_pse+0x3a>
 856:	e0 e8       	ldi	r30, 0x80	; 128
 858:	32 d0       	rcall	.+100    	; 0x8be <__divsf3_pse+0x94>
 85a:	91 50       	subi	r25, 0x01	; 1
 85c:	50 40       	sbci	r21, 0x00	; 0
 85e:	e6 95       	lsr	r30
 860:	00 1c       	adc	r0, r0
 862:	ca f7       	brpl	.-14     	; 0x856 <__divsf3_pse+0x2c>
 864:	2b d0       	rcall	.+86     	; 0x8bc <__divsf3_pse+0x92>
 866:	fe 2f       	mov	r31, r30
 868:	29 d0       	rcall	.+82     	; 0x8bc <__divsf3_pse+0x92>
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	bb 1f       	adc	r27, r27
 872:	26 17       	cp	r18, r22
 874:	37 07       	cpc	r19, r23
 876:	48 07       	cpc	r20, r24
 878:	ab 07       	cpc	r26, r27
 87a:	b0 e8       	ldi	r27, 0x80	; 128
 87c:	09 f0       	breq	.+2      	; 0x880 <__divsf3_pse+0x56>
 87e:	bb 0b       	sbc	r27, r27
 880:	80 2d       	mov	r24, r0
 882:	bf 01       	movw	r22, r30
 884:	ff 27       	eor	r31, r31
 886:	93 58       	subi	r25, 0x83	; 131
 888:	5f 4f       	sbci	r21, 0xFF	; 255
 88a:	3a f0       	brmi	.+14     	; 0x89a <__divsf3_pse+0x70>
 88c:	9e 3f       	cpi	r25, 0xFE	; 254
 88e:	51 05       	cpc	r21, r1
 890:	78 f0       	brcs	.+30     	; 0x8b0 <__divsf3_pse+0x86>
 892:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 896:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>
 89a:	5f 3f       	cpi	r21, 0xFF	; 255
 89c:	e4 f3       	brlt	.-8      	; 0x896 <__divsf3_pse+0x6c>
 89e:	98 3e       	cpi	r25, 0xE8	; 232
 8a0:	d4 f3       	brlt	.-12     	; 0x896 <__divsf3_pse+0x6c>
 8a2:	86 95       	lsr	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f7 95       	ror	r31
 8ac:	9f 5f       	subi	r25, 0xFF	; 255
 8ae:	c9 f7       	brne	.-14     	; 0x8a2 <__divsf3_pse+0x78>
 8b0:	88 0f       	add	r24, r24
 8b2:	91 1d       	adc	r25, r1
 8b4:	96 95       	lsr	r25
 8b6:	87 95       	ror	r24
 8b8:	97 f9       	bld	r25, 7
 8ba:	08 95       	ret
 8bc:	e1 e0       	ldi	r30, 0x01	; 1
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	bb 1f       	adc	r27, r27
 8c6:	62 17       	cp	r22, r18
 8c8:	73 07       	cpc	r23, r19
 8ca:	84 07       	cpc	r24, r20
 8cc:	ba 07       	cpc	r27, r26
 8ce:	20 f0       	brcs	.+8      	; 0x8d8 <__divsf3_pse+0xae>
 8d0:	62 1b       	sub	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	84 0b       	sbc	r24, r20
 8d6:	ba 0b       	sbc	r27, r26
 8d8:	ee 1f       	adc	r30, r30
 8da:	88 f7       	brcc	.-30     	; 0x8be <__divsf3_pse+0x94>
 8dc:	e0 95       	com	r30
 8de:	08 95       	ret

000008e0 <__fixunssfsi>:
 8e0:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_splitA>
 8e4:	88 f0       	brcs	.+34     	; 0x908 <__stack+0x9>
 8e6:	9f 57       	subi	r25, 0x7F	; 127
 8e8:	98 f0       	brcs	.+38     	; 0x910 <__stack+0x11>
 8ea:	b9 2f       	mov	r27, r25
 8ec:	99 27       	eor	r25, r25
 8ee:	b7 51       	subi	r27, 0x17	; 23
 8f0:	b0 f0       	brcs	.+44     	; 0x91e <__stack+0x1f>
 8f2:	e1 f0       	breq	.+56     	; 0x92c <__stack+0x2d>
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	1a f0       	brmi	.+6      	; 0x904 <__stack+0x5>
 8fe:	ba 95       	dec	r27
 900:	c9 f7       	brne	.-14     	; 0x8f4 <__fixunssfsi+0x14>
 902:	14 c0       	rjmp	.+40     	; 0x92c <__stack+0x2d>
 904:	b1 30       	cpi	r27, 0x01	; 1
 906:	91 f0       	breq	.+36     	; 0x92c <__stack+0x2d>
 908:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_zero>
 90c:	b1 e0       	ldi	r27, 0x01	; 1
 90e:	08 95       	ret
 910:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_zero>
 914:	67 2f       	mov	r22, r23
 916:	78 2f       	mov	r23, r24
 918:	88 27       	eor	r24, r24
 91a:	b8 5f       	subi	r27, 0xF8	; 248
 91c:	39 f0       	breq	.+14     	; 0x92c <__stack+0x2d>
 91e:	b9 3f       	cpi	r27, 0xF9	; 249
 920:	cc f3       	brlt	.-14     	; 0x914 <__stack+0x15>
 922:	86 95       	lsr	r24
 924:	77 95       	ror	r23
 926:	67 95       	ror	r22
 928:	b3 95       	inc	r27
 92a:	d9 f7       	brne	.-10     	; 0x922 <__stack+0x23>
 92c:	3e f4       	brtc	.+14     	; 0x93c <__stack+0x3d>
 92e:	90 95       	com	r25
 930:	80 95       	com	r24
 932:	70 95       	com	r23
 934:	61 95       	neg	r22
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <__floatunsisf>:
 93e:	e8 94       	clt
 940:	09 c0       	rjmp	.+18     	; 0x954 <__floatsisf+0x12>

00000942 <__floatsisf>:
 942:	97 fb       	bst	r25, 7
 944:	3e f4       	brtc	.+14     	; 0x954 <__floatsisf+0x12>
 946:	90 95       	com	r25
 948:	80 95       	com	r24
 94a:	70 95       	com	r23
 94c:	61 95       	neg	r22
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	99 23       	and	r25, r25
 956:	a9 f0       	breq	.+42     	; 0x982 <__floatsisf+0x40>
 958:	f9 2f       	mov	r31, r25
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	bb 27       	eor	r27, r27
 95e:	93 95       	inc	r25
 960:	f6 95       	lsr	r31
 962:	87 95       	ror	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f1 11       	cpse	r31, r1
 96c:	f8 cf       	rjmp	.-16     	; 0x95e <__floatsisf+0x1c>
 96e:	fa f4       	brpl	.+62     	; 0x9ae <__floatsisf+0x6c>
 970:	bb 0f       	add	r27, r27
 972:	11 f4       	brne	.+4      	; 0x978 <__floatsisf+0x36>
 974:	60 ff       	sbrs	r22, 0
 976:	1b c0       	rjmp	.+54     	; 0x9ae <__floatsisf+0x6c>
 978:	6f 5f       	subi	r22, 0xFF	; 255
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	16 c0       	rjmp	.+44     	; 0x9ae <__floatsisf+0x6c>
 982:	88 23       	and	r24, r24
 984:	11 f0       	breq	.+4      	; 0x98a <__floatsisf+0x48>
 986:	96 e9       	ldi	r25, 0x96	; 150
 988:	11 c0       	rjmp	.+34     	; 0x9ac <__floatsisf+0x6a>
 98a:	77 23       	and	r23, r23
 98c:	21 f0       	breq	.+8      	; 0x996 <__floatsisf+0x54>
 98e:	9e e8       	ldi	r25, 0x8E	; 142
 990:	87 2f       	mov	r24, r23
 992:	76 2f       	mov	r23, r22
 994:	05 c0       	rjmp	.+10     	; 0x9a0 <__floatsisf+0x5e>
 996:	66 23       	and	r22, r22
 998:	71 f0       	breq	.+28     	; 0x9b6 <__floatsisf+0x74>
 99a:	96 e8       	ldi	r25, 0x86	; 134
 99c:	86 2f       	mov	r24, r22
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	2a f0       	brmi	.+10     	; 0x9ae <__floatsisf+0x6c>
 9a4:	9a 95       	dec	r25
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	da f7       	brpl	.-10     	; 0x9a4 <__floatsisf+0x62>
 9ae:	88 0f       	add	r24, r24
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <__fp_inf>:
 9b8:	97 f9       	bld	r25, 7
 9ba:	9f 67       	ori	r25, 0x7F	; 127
 9bc:	80 e8       	ldi	r24, 0x80	; 128
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	08 95       	ret

000009c4 <__fp_nan>:
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	80 ec       	ldi	r24, 0xC0	; 192
 9c8:	08 95       	ret

000009ca <__fp_pscA>:
 9ca:	00 24       	eor	r0, r0
 9cc:	0a 94       	dec	r0
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	18 06       	cpc	r1, r24
 9d4:	09 06       	cpc	r0, r25
 9d6:	08 95       	ret

000009d8 <__fp_pscB>:
 9d8:	00 24       	eor	r0, r0
 9da:	0a 94       	dec	r0
 9dc:	12 16       	cp	r1, r18
 9de:	13 06       	cpc	r1, r19
 9e0:	14 06       	cpc	r1, r20
 9e2:	05 06       	cpc	r0, r21
 9e4:	08 95       	ret

000009e6 <__fp_round>:
 9e6:	09 2e       	mov	r0, r25
 9e8:	03 94       	inc	r0
 9ea:	00 0c       	add	r0, r0
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__fp_round+0xc>
 9ee:	88 23       	and	r24, r24
 9f0:	52 f0       	brmi	.+20     	; 0xa06 <__fp_round+0x20>
 9f2:	bb 0f       	add	r27, r27
 9f4:	40 f4       	brcc	.+16     	; 0xa06 <__fp_round+0x20>
 9f6:	bf 2b       	or	r27, r31
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__fp_round+0x18>
 9fa:	60 ff       	sbrs	r22, 0
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fp_round+0x20>
 9fe:	6f 5f       	subi	r22, 0xFF	; 255
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	08 95       	ret

00000a08 <__fp_split3>:
 a08:	57 fd       	sbrc	r21, 7
 a0a:	90 58       	subi	r25, 0x80	; 128
 a0c:	44 0f       	add	r20, r20
 a0e:	55 1f       	adc	r21, r21
 a10:	59 f0       	breq	.+22     	; 0xa28 <__fp_splitA+0x10>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	71 f0       	breq	.+28     	; 0xa32 <__fp_splitA+0x1a>
 a16:	47 95       	ror	r20

00000a18 <__fp_splitA>:
 a18:	88 0f       	add	r24, r24
 a1a:	97 fb       	bst	r25, 7
 a1c:	99 1f       	adc	r25, r25
 a1e:	61 f0       	breq	.+24     	; 0xa38 <__fp_splitA+0x20>
 a20:	9f 3f       	cpi	r25, 0xFF	; 255
 a22:	79 f0       	breq	.+30     	; 0xa42 <__fp_splitA+0x2a>
 a24:	87 95       	ror	r24
 a26:	08 95       	ret
 a28:	12 16       	cp	r1, r18
 a2a:	13 06       	cpc	r1, r19
 a2c:	14 06       	cpc	r1, r20
 a2e:	55 1f       	adc	r21, r21
 a30:	f2 cf       	rjmp	.-28     	; 0xa16 <__fp_split3+0xe>
 a32:	46 95       	lsr	r20
 a34:	f1 df       	rcall	.-30     	; 0xa18 <__fp_splitA>
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__fp_splitA+0x30>
 a38:	16 16       	cp	r1, r22
 a3a:	17 06       	cpc	r1, r23
 a3c:	18 06       	cpc	r1, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	f1 cf       	rjmp	.-30     	; 0xa24 <__fp_splitA+0xc>
 a42:	86 95       	lsr	r24
 a44:	71 05       	cpc	r23, r1
 a46:	61 05       	cpc	r22, r1
 a48:	08 94       	sec
 a4a:	08 95       	ret

00000a4c <__fp_zero>:
 a4c:	e8 94       	clt

00000a4e <__fp_szero>:
 a4e:	bb 27       	eor	r27, r27
 a50:	66 27       	eor	r22, r22
 a52:	77 27       	eor	r23, r23
 a54:	cb 01       	movw	r24, r22
 a56:	97 f9       	bld	r25, 7
 a58:	08 95       	ret

00000a5a <__gesf2>:
 a5a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_cmp>
 a5e:	08 f4       	brcc	.+2      	; 0xa62 <__gesf2+0x8>
 a60:	8f ef       	ldi	r24, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__mulsf3>:
 a64:	0e 94 45 05 	call	0xa8a	; 0xa8a <__mulsf3x>
 a68:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_round>
 a6c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscA>
 a70:	38 f0       	brcs	.+14     	; 0xa80 <__mulsf3+0x1c>
 a72:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscB>
 a76:	20 f0       	brcs	.+8      	; 0xa80 <__mulsf3+0x1c>
 a78:	95 23       	and	r25, r21
 a7a:	11 f0       	breq	.+4      	; 0xa80 <__mulsf3+0x1c>
 a7c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 a80:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_nan>
 a84:	11 24       	eor	r1, r1
 a86:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>

00000a8a <__mulsf3x>:
 a8a:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_split3>
 a8e:	70 f3       	brcs	.-36     	; 0xa6c <__mulsf3+0x8>

00000a90 <__mulsf3_pse>:
 a90:	95 9f       	mul	r25, r21
 a92:	c1 f3       	breq	.-16     	; 0xa84 <__mulsf3+0x20>
 a94:	95 0f       	add	r25, r21
 a96:	50 e0       	ldi	r21, 0x00	; 0
 a98:	55 1f       	adc	r21, r21
 a9a:	62 9f       	mul	r22, r18
 a9c:	f0 01       	movw	r30, r0
 a9e:	72 9f       	mul	r23, r18
 aa0:	bb 27       	eor	r27, r27
 aa2:	f0 0d       	add	r31, r0
 aa4:	b1 1d       	adc	r27, r1
 aa6:	63 9f       	mul	r22, r19
 aa8:	aa 27       	eor	r26, r26
 aaa:	f0 0d       	add	r31, r0
 aac:	b1 1d       	adc	r27, r1
 aae:	aa 1f       	adc	r26, r26
 ab0:	64 9f       	mul	r22, r20
 ab2:	66 27       	eor	r22, r22
 ab4:	b0 0d       	add	r27, r0
 ab6:	a1 1d       	adc	r26, r1
 ab8:	66 1f       	adc	r22, r22
 aba:	82 9f       	mul	r24, r18
 abc:	22 27       	eor	r18, r18
 abe:	b0 0d       	add	r27, r0
 ac0:	a1 1d       	adc	r26, r1
 ac2:	62 1f       	adc	r22, r18
 ac4:	73 9f       	mul	r23, r19
 ac6:	b0 0d       	add	r27, r0
 ac8:	a1 1d       	adc	r26, r1
 aca:	62 1f       	adc	r22, r18
 acc:	83 9f       	mul	r24, r19
 ace:	a0 0d       	add	r26, r0
 ad0:	61 1d       	adc	r22, r1
 ad2:	22 1f       	adc	r18, r18
 ad4:	74 9f       	mul	r23, r20
 ad6:	33 27       	eor	r19, r19
 ad8:	a0 0d       	add	r26, r0
 ada:	61 1d       	adc	r22, r1
 adc:	23 1f       	adc	r18, r19
 ade:	84 9f       	mul	r24, r20
 ae0:	60 0d       	add	r22, r0
 ae2:	21 1d       	adc	r18, r1
 ae4:	82 2f       	mov	r24, r18
 ae6:	76 2f       	mov	r23, r22
 ae8:	6a 2f       	mov	r22, r26
 aea:	11 24       	eor	r1, r1
 aec:	9f 57       	subi	r25, 0x7F	; 127
 aee:	50 40       	sbci	r21, 0x00	; 0
 af0:	9a f0       	brmi	.+38     	; 0xb18 <__mulsf3_pse+0x88>
 af2:	f1 f0       	breq	.+60     	; 0xb30 <__mulsf3_pse+0xa0>
 af4:	88 23       	and	r24, r24
 af6:	4a f0       	brmi	.+18     	; 0xb0a <__mulsf3_pse+0x7a>
 af8:	ee 0f       	add	r30, r30
 afa:	ff 1f       	adc	r31, r31
 afc:	bb 1f       	adc	r27, r27
 afe:	66 1f       	adc	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	91 50       	subi	r25, 0x01	; 1
 b06:	50 40       	sbci	r21, 0x00	; 0
 b08:	a9 f7       	brne	.-22     	; 0xaf4 <__mulsf3_pse+0x64>
 b0a:	9e 3f       	cpi	r25, 0xFE	; 254
 b0c:	51 05       	cpc	r21, r1
 b0e:	80 f0       	brcs	.+32     	; 0xb30 <__mulsf3_pse+0xa0>
 b10:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 b14:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>
 b18:	5f 3f       	cpi	r21, 0xFF	; 255
 b1a:	e4 f3       	brlt	.-8      	; 0xb14 <__mulsf3_pse+0x84>
 b1c:	98 3e       	cpi	r25, 0xE8	; 232
 b1e:	d4 f3       	brlt	.-12     	; 0xb14 <__mulsf3_pse+0x84>
 b20:	86 95       	lsr	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	f7 95       	ror	r31
 b2a:	e7 95       	ror	r30
 b2c:	9f 5f       	subi	r25, 0xFF	; 255
 b2e:	c1 f7       	brne	.-16     	; 0xb20 <__mulsf3_pse+0x90>
 b30:	fe 2b       	or	r31, r30
 b32:	88 0f       	add	r24, r24
 b34:	91 1d       	adc	r25, r1
 b36:	96 95       	lsr	r25
 b38:	87 95       	ror	r24
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret

00000b3e <__fp_cmp>:
 b3e:	99 0f       	add	r25, r25
 b40:	00 08       	sbc	r0, r0
 b42:	55 0f       	add	r21, r21
 b44:	aa 0b       	sbc	r26, r26
 b46:	e0 e8       	ldi	r30, 0x80	; 128
 b48:	fe ef       	ldi	r31, 0xFE	; 254
 b4a:	16 16       	cp	r1, r22
 b4c:	17 06       	cpc	r1, r23
 b4e:	e8 07       	cpc	r30, r24
 b50:	f9 07       	cpc	r31, r25
 b52:	c0 f0       	brcs	.+48     	; 0xb84 <__fp_cmp+0x46>
 b54:	12 16       	cp	r1, r18
 b56:	13 06       	cpc	r1, r19
 b58:	e4 07       	cpc	r30, r20
 b5a:	f5 07       	cpc	r31, r21
 b5c:	98 f0       	brcs	.+38     	; 0xb84 <__fp_cmp+0x46>
 b5e:	62 1b       	sub	r22, r18
 b60:	73 0b       	sbc	r23, r19
 b62:	84 0b       	sbc	r24, r20
 b64:	95 0b       	sbc	r25, r21
 b66:	39 f4       	brne	.+14     	; 0xb76 <__fp_cmp+0x38>
 b68:	0a 26       	eor	r0, r26
 b6a:	61 f0       	breq	.+24     	; 0xb84 <__fp_cmp+0x46>
 b6c:	23 2b       	or	r18, r19
 b6e:	24 2b       	or	r18, r20
 b70:	25 2b       	or	r18, r21
 b72:	21 f4       	brne	.+8      	; 0xb7c <__fp_cmp+0x3e>
 b74:	08 95       	ret
 b76:	0a 26       	eor	r0, r26
 b78:	09 f4       	brne	.+2      	; 0xb7c <__fp_cmp+0x3e>
 b7a:	a1 40       	sbci	r26, 0x01	; 1
 b7c:	a6 95       	lsr	r26
 b7e:	8f ef       	ldi	r24, 0xFF	; 255
 b80:	81 1d       	adc	r24, r1
 b82:	81 1d       	adc	r24, r1
 b84:	08 95       	ret

00000b86 <__divmodhi4>:
 b86:	97 fb       	bst	r25, 7
 b88:	07 2e       	mov	r0, r23
 b8a:	16 f4       	brtc	.+4      	; 0xb90 <__divmodhi4+0xa>
 b8c:	00 94       	com	r0
 b8e:	07 d0       	rcall	.+14     	; 0xb9e <__divmodhi4_neg1>
 b90:	77 fd       	sbrc	r23, 7
 b92:	09 d0       	rcall	.+18     	; 0xba6 <__divmodhi4_neg2>
 b94:	0e 94 d7 05 	call	0xbae	; 0xbae <__udivmodhi4>
 b98:	07 fc       	sbrc	r0, 7
 b9a:	05 d0       	rcall	.+10     	; 0xba6 <__divmodhi4_neg2>
 b9c:	3e f4       	brtc	.+14     	; 0xbac <__divmodhi4_exit>

00000b9e <__divmodhi4_neg1>:
 b9e:	90 95       	com	r25
 ba0:	81 95       	neg	r24
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <__divmodhi4_neg2>:
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255

00000bac <__divmodhi4_exit>:
 bac:	08 95       	ret

00000bae <__udivmodhi4>:
 bae:	aa 1b       	sub	r26, r26
 bb0:	bb 1b       	sub	r27, r27
 bb2:	51 e1       	ldi	r21, 0x11	; 17
 bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <__udivmodhi4_ep>

00000bb6 <__udivmodhi4_loop>:
 bb6:	aa 1f       	adc	r26, r26
 bb8:	bb 1f       	adc	r27, r27
 bba:	a6 17       	cp	r26, r22
 bbc:	b7 07       	cpc	r27, r23
 bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__udivmodhi4_ep>
 bc0:	a6 1b       	sub	r26, r22
 bc2:	b7 0b       	sbc	r27, r23

00000bc4 <__udivmodhi4_ep>:
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	5a 95       	dec	r21
 bca:	a9 f7       	brne	.-22     	; 0xbb6 <__udivmodhi4_loop>
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	bc 01       	movw	r22, r24
 bd2:	cd 01       	movw	r24, r26
 bd4:	08 95       	ret

00000bd6 <__itoa_ncheck>:
 bd6:	bb 27       	eor	r27, r27
 bd8:	4a 30       	cpi	r20, 0x0A	; 10
 bda:	31 f4       	brne	.+12     	; 0xbe8 <__itoa_ncheck+0x12>
 bdc:	99 23       	and	r25, r25
 bde:	22 f4       	brpl	.+8      	; 0xbe8 <__itoa_ncheck+0x12>
 be0:	bd e2       	ldi	r27, 0x2D	; 45
 be2:	90 95       	com	r25
 be4:	81 95       	neg	r24
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__utoa_common>

00000bec <__utoa_ncheck>:
 bec:	bb 27       	eor	r27, r27

00000bee <__utoa_common>:
 bee:	fb 01       	movw	r30, r22
 bf0:	55 27       	eor	r21, r21
 bf2:	aa 27       	eor	r26, r26
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	aa 1f       	adc	r26, r26
 bfa:	a4 17       	cp	r26, r20
 bfc:	10 f0       	brcs	.+4      	; 0xc02 <__utoa_common+0x14>
 bfe:	a4 1b       	sub	r26, r20
 c00:	83 95       	inc	r24
 c02:	50 51       	subi	r21, 0x10	; 16
 c04:	b9 f7       	brne	.-18     	; 0xbf4 <__utoa_common+0x6>
 c06:	a0 5d       	subi	r26, 0xD0	; 208
 c08:	aa 33       	cpi	r26, 0x3A	; 58
 c0a:	08 f0       	brcs	.+2      	; 0xc0e <__utoa_common+0x20>
 c0c:	a9 5d       	subi	r26, 0xD9	; 217
 c0e:	a1 93       	st	Z+, r26
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	79 f7       	brne	.-34     	; 0xbf2 <__utoa_common+0x4>
 c14:	b1 11       	cpse	r27, r1
 c16:	b1 93       	st	Z+, r27
 c18:	11 92       	st	Z+, r1
 c1a:	cb 01       	movw	r24, r22
 c1c:	0c 94 10 06 	jmp	0xc20	; 0xc20 <strrev>

00000c20 <strrev>:
 c20:	dc 01       	movw	r26, r24
 c22:	fc 01       	movw	r30, r24
 c24:	67 2f       	mov	r22, r23
 c26:	71 91       	ld	r23, Z+
 c28:	77 23       	and	r23, r23
 c2a:	e1 f7       	brne	.-8      	; 0xc24 <strrev+0x4>
 c2c:	32 97       	sbiw	r30, 0x02	; 2
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <strrev+0x18>
 c30:	7c 91       	ld	r23, X
 c32:	6d 93       	st	X+, r22
 c34:	70 83       	st	Z, r23
 c36:	62 91       	ld	r22, -Z
 c38:	ae 17       	cp	r26, r30
 c3a:	bf 07       	cpc	r27, r31
 c3c:	c8 f3       	brcs	.-14     	; 0xc30 <strrev+0x10>
 c3e:	08 95       	ret

00000c40 <_exit>:
 c40:	f8 94       	cli

00000c42 <__stop_program>:
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
