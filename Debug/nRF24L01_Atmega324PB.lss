
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000d7e  00000e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080011a  0080011a  00000e2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000219f  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108c  00000000  00000000  0000324b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001188  00000000  00000000  000042d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  00005460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000982  00000000  00000000  00005a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000197d  00000000  00000000  000063a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00007d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e7       	ldi	r30, 0x7E	; 126
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 31       	cpi	r26, 0x1A	; 26
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	aa e1       	ldi	r26, 0x1A	; 26
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a5 37       	cpi	r26, 0x75	; 117
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
 102:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <analog_read>:
int analog_read(unsigned char channel)
{
    int analog_in = 0;
    
	//ADMUX = (0x07)&channel; // select channel
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	98 7f       	andi	r25, 0xF8	; 248
 128:	87 70       	andi	r24, 0x07	; 7
 12a:	89 2b       	or	r24, r25
 12c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC); // start conversion
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
    while ((ADCSRA & (1 << ADIF)) == 0)
 138:	80 81       	ld	r24, Z
 13a:	84 ff       	sbrs	r24, 4
 13c:	fd cf       	rjmp	.-6      	; 0x138 <analog_read+0x18>
        ; // wait for flag

    analog_in = (0x00FF) & (ADCL);       // get lower byte
 13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    analog_in |= (0x2F00) & (ADCH << 8); // get higher byte
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

    return analog_in;
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	98 2f       	mov	r25, r24
 14a:	88 27       	eor	r24, r24
 14c:	88 27       	eor	r24, r24
 14e:	9f 72       	andi	r25, 0x2F	; 47
}
 150:	82 2b       	or	r24, r18
 152:	08 95       	ret

00000154 <setup_TMR1_pwm>:
	
	temp_buf[0] = lon_buf[5];
	temp_buf[1] = lon_buf[6];
	lon_sec = atoi((const char *)temp_buf);
	
}
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	89 60       	ori	r24, 0x09	; 9
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <set_TMR1A_duty_cycle>:
 16a:	bc 01       	movw	r22, r24
 16c:	99 0f       	add	r25, r25
 16e:	88 0b       	sbc	r24, r24
 170:	99 0b       	sbc	r25, r25
 172:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 176:	2f e6       	ldi	r18, 0x6F	; 111
 178:	32 e1       	ldi	r19, 0x12	; 18
 17a:	43 e8       	ldi	r20, 0x83	; 131
 17c:	5e e3       	ldi	r21, 0x3E	; 62
 17e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	5f e3       	ldi	r21, 0x3F	; 63
 18a:	0e 94 22 04 	call	0x844	; 0x844 <__subsf3>
 18e:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixsfsi>
 192:	69 3c       	cpi	r22, 0xC9	; 201
 194:	71 05       	cpc	r23, r1
 196:	14 f0       	brlt	.+4      	; 0x19c <set_TMR1A_duty_cycle+0x32>
 198:	68 ec       	ldi	r22, 0xC8	; 200
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	77 27       	eor	r23, r23
 19e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a6:	08 95       	ret

000001a8 <set_TMR1B_duty_cycle>:
 1a8:	bc 01       	movw	r22, r24
 1aa:	99 0f       	add	r25, r25
 1ac:	88 0b       	sbc	r24, r24
 1ae:	99 0b       	sbc	r25, r25
 1b0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 1b4:	2f e6       	ldi	r18, 0x6F	; 111
 1b6:	32 e1       	ldi	r19, 0x12	; 18
 1b8:	43 e8       	ldi	r20, 0x83	; 131
 1ba:	5e e3       	ldi	r21, 0x3E	; 62
 1bc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	0e 94 22 04 	call	0x844	; 0x844 <__subsf3>
 1cc:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixsfsi>
 1d0:	69 3c       	cpi	r22, 0xC9	; 201
 1d2:	71 05       	cpc	r23, r1
 1d4:	14 f0       	brlt	.+4      	; 0x1da <set_TMR1B_duty_cycle+0x32>
 1d6:	68 ec       	ldi	r22, 0xC8	; 200
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	77 27       	eor	r23, r23
 1dc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1e0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1e4:	08 95       	ret

000001e6 <stop_TMR1A_pwm>:
 1e6:	e0 e8       	ldi	r30, 0x80	; 128
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <stop_TMR1B_pwm>:
 1f2:	e0 e8       	ldi	r30, 0x80	; 128
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <start_TMR1A_pwm>:
 1fe:	e0 e8       	ldi	r30, 0x80	; 128
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 68       	ori	r24, 0x80	; 128
 206:	80 83       	st	Z, r24
 208:	08 95       	ret

0000020a <start_TMR1B_pwm>:
 20a:	e0 e8       	ldi	r30, 0x80	; 128
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 62       	ori	r24, 0x20	; 32
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <motor_off>:
 216:	29 98       	cbi	0x05, 1	; 5
 218:	2a 98       	cbi	0x05, 2	; 5
 21a:	08 95       	ret

0000021c <motor_on>:
 21c:	29 9a       	sbi	0x05, 1	; 5
 21e:	2a 9a       	sbi	0x05, 2	; 5
 220:	08 95       	ret

00000222 <setup_TMR0_pwm>:
 222:	84 b5       	in	r24, 0x24	; 36
 224:	83 68       	ori	r24, 0x83	; 131
 226:	84 bd       	out	0x24, r24	; 36
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	85 bd       	out	0x25, r24	; 37
 22e:	8e e3       	ldi	r24, 0x3E	; 62
 230:	87 bd       	out	0x27, r24	; 39
 232:	08 95       	ret

00000234 <setup_gpios>:
 234:	6c 9a       	sbi	0x0d, 4	; 13
 236:	55 9a       	sbi	0x0a, 5	; 10
 238:	54 9a       	sbi	0x0a, 4	; 10
 23a:	21 9a       	sbi	0x04, 1	; 4
 23c:	22 9a       	sbi	0x04, 2	; 4
 23e:	23 9a       	sbi	0x04, 3	; 4
 240:	08 95       	ret

00000242 <delay_ms>:
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	69 f0       	breq	.+26     	; 0x260 <delay_ms+0x1e>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	ef ec       	ldi	r30, 0xCF	; 207
 24c:	f7 e0       	ldi	r31, 0x07	; 7
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <delay_ms+0xc>
 252:	00 c0       	rjmp	.+0      	; 0x254 <delay_ms+0x12>
 254:	00 00       	nop
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	82 17       	cp	r24, r18
 25c:	93 07       	cpc	r25, r19
 25e:	a9 f7       	brne	.-22     	; 0x24a <delay_ms+0x8>
 260:	08 95       	ret

00000262 <flash_LED>:
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	88 23       	and	r24, r24
 26e:	79 f0       	breq	.+30     	; 0x28e <flash_LED+0x2c>
 270:	8b 01       	movw	r16, r22
 272:	d8 2f       	mov	r29, r24
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	68 94       	set
 278:	ff 24       	eor	r15, r15
 27a:	f4 f8       	bld	r15, 4
 27c:	9e b1       	in	r25, 0x0e	; 14
 27e:	9f 25       	eor	r25, r15
 280:	9e b9       	out	0x0e, r25	; 14
 282:	c8 01       	movw	r24, r16
 284:	0e 94 21 01 	call	0x242	; 0x242 <delay_ms>
 288:	cf 5f       	subi	r28, 0xFF	; 255
 28a:	dc 13       	cpse	r29, r28
 28c:	f7 cf       	rjmp	.-18     	; 0x27c <flash_LED+0x1a>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	08 95       	ret

0000029a <js_mtr_scaling>:

int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
 29a:	9c 01       	movw	r18, r24
 29c:	2d 5c       	subi	r18, 0xCD	; 205
 29e:	31 40       	sbci	r19, 0x01	; 1
 2a0:	2f 34       	cpi	r18, 0x4F	; 79
 2a2:	31 05       	cpc	r19, r1
 2a4:	90 f0       	brcs	.+36     	; 0x2ca <js_mtr_scaling+0x30>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
 2a6:	8d 31       	cpi	r24, 0x1D	; 29
 2a8:	22 e0       	ldi	r18, 0x02	; 2
 2aa:	92 07       	cpc	r25, r18
 2ac:	2c f0       	brlt	.+10     	; 0x2b8 <js_mtr_scaling+0x1e>
	value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
 2ae:	84 5f       	subi	r24, 0xF4	; 244
 2b0:	91 40       	sbci	r25, 0x01	; 1
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <js_mtr_scaling+0x34>
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
 2b8:	8c 3c       	cpi	r24, 0xCC	; 204
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	92 07       	cpc	r25, r18
 2be:	3c f4       	brge	.+14     	; 0x2ce <js_mtr_scaling+0x34>
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
 2c0:	84 5f       	subi	r24, 0xF4	; 244
 2c2:	91 40       	sbci	r25, 0x01	; 1
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <js_mtr_scaling+0x34>
int js_mtr_scaling(int value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000

	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
	value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
	if (value > 1000)                         // do not send any value bigger than 1000 or smaller than -1000
	value = 1000;

	return value;
 2ce:	89 3e       	cpi	r24, 0xE9	; 233
 2d0:	23 e0       	ldi	r18, 0x03	; 3
 2d2:	92 07       	cpc	r25, r18
 2d4:	14 f0       	brlt	.+4      	; 0x2da <js_mtr_scaling+0x40>
 2d6:	88 ee       	ldi	r24, 0xE8	; 232
 2d8:	93 e0       	ldi	r25, 0x03	; 3
} // end of joystick_scaling
 2da:	08 95       	ret

000002dc <js_srv_scaling>:

int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	47 e0       	ldi	r20, 0x07	; 7
 2ee:	54 e4       	ldi	r21, 0x44	; 68
 2f0:	0e 94 8f 04 	call	0x91e	; 0x91e <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	5c f4       	brge	.+22     	; 0x30e <js_srv_scaling+0x32>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	46 ee       	ldi	r20, 0xE6	; 230
 2fe:	53 e4       	ldi	r21, 0x43	; 67
 300:	c7 01       	movw	r24, r14
 302:	b6 01       	movw	r22, r12
 304:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	0c f4       	brge	.+2      	; 0x30e <js_srv_scaling+0x32>
 30c:	5c c0       	rjmp	.+184    	; 0x3c6 <js_srv_scaling+0xea>
	value = 0;
	else if (value > DEADBAND_MAX)            // if joystick is higher than deadband
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	47 e0       	ldi	r20, 0x07	; 7
 314:	54 e4       	ldi	r21, 0x44	; 68
 316:	c7 01       	movw	r24, r14
 318:	b6 01       	movw	r22, r12
 31a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__gesf2>
 31e:	18 16       	cp	r1, r24
 320:	ac f4       	brge	.+42     	; 0x34c <js_srv_scaling+0x70>
	{
		value = 2 * (value - NEUTRAL_CMD);    // compute the change from the neutral position multiply by 2 to scale to 1000
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	4a ef       	ldi	r20, 0xFA	; 250
 328:	53 e4       	ldi	r21, 0x43	; 67
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	0e 94 22 04 	call	0x844	; 0x844 <__subsf3>
 332:	9b 01       	movw	r18, r22
 334:	ac 01       	movw	r20, r24
 336:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
		value = value  / 22.2; // scale to -45 45
 33a:	2a e9       	ldi	r18, 0x9A	; 154
 33c:	39 e9       	ldi	r19, 0x99	; 153
 33e:	41 eb       	ldi	r20, 0xB1	; 177
 340:	51 e4       	ldi	r21, 0x41	; 65
 342:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 346:	6b 01       	movw	r12, r22
 348:	7c 01       	movw	r14, r24
 34a:	20 c0       	rjmp	.+64     	; 0x38c <js_srv_scaling+0xb0>
	}
	else if (value < DEADBAND_MIN)            // if joystick is lower than deadband
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	46 ee       	ldi	r20, 0xE6	; 230
 352:	53 e4       	ldi	r21, 0x43	; 67
 354:	c7 01       	movw	r24, r14
 356:	b6 01       	movw	r22, r12
 358:	0e 94 8f 04 	call	0x91e	; 0x91e <__cmpsf2>
 35c:	88 23       	and	r24, r24
 35e:	b4 f4       	brge	.+44     	; 0x38c <js_srv_scaling+0xb0>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	8a ef       	ldi	r24, 0xFA	; 250
 36a:	93 e4       	ldi	r25, 0x43	; 67
 36c:	0e 94 22 04 	call	0x844	; 0x844 <__subsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 ec       	ldi	r21, 0xC0	; 192
 378:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
		value = value  / 22.2; // scale to -45 45
 37c:	2a e9       	ldi	r18, 0x9A	; 154
 37e:	39 e9       	ldi	r19, 0x99	; 153
 380:	41 eb       	ldi	r20, 0xB1	; 177
 382:	51 e4       	ldi	r21, 0x41	; 65
 384:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 388:	6b 01       	movw	r12, r22
 38a:	7c 01       	movw	r14, r24
	}
	if (value > 1000)                         // do not send any value bigger than 1000
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	4a e7       	ldi	r20, 0x7A	; 122
 392:	54 e4       	ldi	r21, 0x44	; 68
 394:	c7 01       	movw	r24, r14
 396:	b6 01       	movw	r22, r12
 398:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__gesf2>
 39c:	18 16       	cp	r1, r24
 39e:	bc f0       	brlt	.+46     	; 0x3ce <js_srv_scaling+0xf2>
	value = 1000;
	if (value < -1000)                        // do not send any value smaller than -1000
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4a e7       	ldi	r20, 0x7A	; 122
 3a6:	54 ec       	ldi	r21, 0xC4	; 196
 3a8:	c7 01       	movw	r24, r14
 3aa:	b6 01       	movw	r22, r12
 3ac:	0e 94 8f 04 	call	0x91e	; 0x91e <__cmpsf2>
 3b0:	88 23       	and	r24, r24
 3b2:	ac f4       	brge	.+42     	; 0x3de <js_srv_scaling+0x102>
	value = -1000;
 3b4:	0f 2e       	mov	r0, r31
 3b6:	c1 2c       	mov	r12, r1
 3b8:	d1 2c       	mov	r13, r1
 3ba:	fa e7       	ldi	r31, 0x7A	; 122
 3bc:	ef 2e       	mov	r14, r31
 3be:	f4 ec       	ldi	r31, 0xC4	; 196
 3c0:	ff 2e       	mov	r15, r31
 3c2:	f0 2d       	mov	r31, r0
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <js_srv_scaling+0x102>

int js_srv_scaling(float value) // scales the result to commands from -1000 to 1000.
{
	value = value * CMD_SCALE - OFFSET; // scale to 0 -> 1000
	if ((value < DEADBAND_MAX) && (value > DEADBAND_MIN)) // if within the dead band, send neutral command (0)
	value = 0;
 3c6:	c1 2c       	mov	r12, r1
 3c8:	d1 2c       	mov	r13, r1
 3ca:	76 01       	movw	r14, r12
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <js_srv_scaling+0x102>
	{
		value = (-2) * (NEUTRAL_CMD - value); // compute the change from the neutral position and invert (multiply by 2 to scale to -1000
		value = value  / 22.2; // scale to -45 45
	}
	if (value > 1000)                         // do not send any value bigger than 1000
	value = 1000;
 3ce:	0f 2e       	mov	r0, r31
 3d0:	c1 2c       	mov	r12, r1
 3d2:	d1 2c       	mov	r13, r1
 3d4:	fa e7       	ldi	r31, 0x7A	; 122
 3d6:	ef 2e       	mov	r14, r31
 3d8:	f4 e4       	ldi	r31, 0x44	; 68
 3da:	ff 2e       	mov	r15, r31
 3dc:	f0 2d       	mov	r31, r0
	if (value < -1000)                        // do not send any value smaller than -1000
	value = -1000;

	return value;
 3de:	c7 01       	movw	r24, r14
 3e0:	b6 01       	movw	r22, r12
 3e2:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixsfsi>
} // end of joystick_scaling
 3e6:	cb 01       	movw	r24, r22
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	df 90       	pop	r13
 3ee:	cf 90       	pop	r12
 3f0:	08 95       	ret

000003f2 <main>:



int main(void)
{
	setup_gpios(); 
 3f2:	0e 94 1a 01 	call	0x234	; 0x234 <setup_gpios>
	setup_usart0(BR_9600); // for FTDI debugging (terminal)
 3f6:	83 e3       	ldi	r24, 0x33	; 51
 3f8:	0e 94 19 04 	call	0x832	; 0x832 <setup_usart0>
	//setup_usart1(BR_1000000); // for NEO6 GPS
	//spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
	//mirf_init(); // initialize nRF24L01
	//mirf_config(); // configure nRF24L01
	setup_adc();
 3fc:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
 400:	0e 94 aa 00 	call	0x154	; 0x154 <setup_TMR1_pwm>
	setup_TMR0_pwm(); // setup TMR0 PWM for servo
 404:	0e 94 11 01 	call	0x222	; 0x222 <setup_TMR0_pwm>
	//setup_TMR3();
		
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 408:	62 e3       	ldi	r22, 0x32	; 50
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	0e 94 31 01 	call	0x262	; 0x262 <flash_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	89 e6       	ldi	r24, 0x69	; 105
 416:	98 e1       	ldi	r25, 0x18	; 24
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	_delay_ms(1000);
	sei(); // enable global interrupts
 424:	78 94       	sei
	
 	//mirf_set_TADDR(tx_address);
 	//mirf_set_RADDR(rx_address);

	println_0("nRF24L01 initialized...;");
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 95 03 	call	0x72a	; 0x72a <println_0>
 42e:	8f e1       	ldi	r24, 0x1F	; 31
 430:	9e e4       	ldi	r25, 0x4E	; 78
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		
		TOGGLE_LED;
 43a:	68 94       	set
 43c:	ff 24       	eor	r15, r15
 43e:	f4 f8       	bld	r15, 4
			if ((srv_cmd < 5) && (srv_cmd > -5))
			srv_cmd = 0;
			else if (srv_cmd > 45)
			srv_cmd = 45;
			else if (srv_cmd < -45)
			srv_cmd = -45;
 440:	03 ed       	ldi	r16, 0xD3	; 211
 442:	1f ef       	ldi	r17, 0xFF	; 255
			srv_cmd = analog_read(2);
			srv_cmd = js_srv_scaling(srv_cmd);
			if ((srv_cmd < 5) && (srv_cmd > -5))
			srv_cmd = 0;
			else if (srv_cmd > 45)
			srv_cmd = 45;
 444:	cd e2       	ldi	r28, 0x2D	; 45
 446:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(10);

    while (1) 
    {
		
		TOGGLE_LED;
 448:	8e b1       	in	r24, 0x0e	; 14
 44a:	8f 25       	eor	r24, r15
 44c:	8e b9       	out	0x0e, r24	; 14
			//else // otherwise, the command is for motor control
			//{
			//	mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
			//	srv_cmd = buffer[2];

			mtr_cmd = analog_read(1);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 90 00 	call	0x120	; 0x120 <analog_read>
			mtr_cmd = js_mtr_scaling(mtr_cmd);
 454:	0e 94 4d 01 	call	0x29a	; 0x29a <js_mtr_scaling>
 458:	6c 01       	movw	r12, r24
			mtr_cmd = 0.25*mtr_cmd + .75*old_mtr_cmd;
 45a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <old_mtr_cmd>
 45e:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <old_mtr_cmd+0x1>
 462:	07 2e       	mov	r0, r23
 464:	00 0c       	add	r0, r0
 466:	88 0b       	sbc	r24, r24
 468:	99 0b       	sbc	r25, r25
 46a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e4       	ldi	r20, 0x40	; 64
 474:	5f e3       	ldi	r21, 0x3F	; 63
 476:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 47a:	4b 01       	movw	r8, r22
 47c:	5c 01       	movw	r10, r24
 47e:	b6 01       	movw	r22, r12
 480:	dd 0c       	add	r13, r13
 482:	88 0b       	sbc	r24, r24
 484:	99 0b       	sbc	r25, r25
 486:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e8       	ldi	r20, 0x80	; 128
 490:	5e e3       	ldi	r21, 0x3E	; 62
 492:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	c5 01       	movw	r24, r10
 49c:	b4 01       	movw	r22, r8
 49e:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
 4a2:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixsfsi>
 4a6:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <mtr_cmd+0x1>
 4aa:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <mtr_cmd>
			old_mtr_cmd = mtr_cmd;
 4ae:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <old_mtr_cmd+0x1>
 4b2:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <old_mtr_cmd>
			
			srv_cmd = analog_read(2);
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 90 00 	call	0x120	; 0x120 <analog_read>
			srv_cmd = js_srv_scaling(srv_cmd);
 4bc:	bc 01       	movw	r22, r24
 4be:	99 0f       	add	r25, r25
 4c0:	88 0b       	sbc	r24, r24
 4c2:	99 0b       	sbc	r25, r25
 4c4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 4c8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <js_srv_scaling>
			if ((srv_cmd < 5) && (srv_cmd > -5))
 4cc:	9c 01       	movw	r18, r24
 4ce:	2c 5f       	subi	r18, 0xFC	; 252
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	29 30       	cpi	r18, 0x09	; 9
 4d4:	31 05       	cpc	r19, r1
 4d6:	28 f4       	brcc	.+10     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			srv_cmd = 0;
 4d8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <srv_cmd+0x1>
 4dc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <srv_cmd>
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			else if (srv_cmd > 45)
 4e2:	8e 32       	cpi	r24, 0x2E	; 46
 4e4:	91 05       	cpc	r25, r1
 4e6:	2c f0       	brlt	.+10     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			srv_cmd = 45;
 4e8:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <srv_cmd+0x1>
 4ec:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <srv_cmd>
 4f0:	0d c0       	rjmp	.+26     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			else if (srv_cmd < -45)
 4f2:	83 3d       	cpi	r24, 0xD3	; 211
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	92 07       	cpc	r25, r18
 4f8:	2c f0       	brlt	.+10     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			mtr_cmd = js_mtr_scaling(mtr_cmd);
			mtr_cmd = 0.25*mtr_cmd + .75*old_mtr_cmd;
			old_mtr_cmd = mtr_cmd;
			
			srv_cmd = analog_read(2);
			srv_cmd = js_srv_scaling(srv_cmd);
 4fa:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <srv_cmd+0x1>
 4fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <srv_cmd>
 502:	04 c0       	rjmp	.+8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			if ((srv_cmd < 5) && (srv_cmd > -5))
			srv_cmd = 0;
			else if (srv_cmd > 45)
			srv_cmd = 45;
			else if (srv_cmd < -45)
			srv_cmd = -45;
 504:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <srv_cmd+0x1>
 508:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <srv_cmd>
			srv_cmd = 0.75*srv_cmd + .25*old_srv_cmd;
 50c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <srv_cmd>
 510:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <srv_cmd+0x1>
 514:	07 2e       	mov	r0, r23
 516:	00 0c       	add	r0, r0
 518:	88 0b       	sbc	r24, r24
 51a:	99 0b       	sbc	r25, r25
 51c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	40 e4       	ldi	r20, 0x40	; 64
 526:	5f e3       	ldi	r21, 0x3F	; 63
 528:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 52c:	4b 01       	movw	r8, r22
 52e:	5c 01       	movw	r10, r24
 530:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <old_srv_cmd>
 534:	06 2e       	mov	r0, r22
 536:	00 0c       	add	r0, r0
 538:	77 0b       	sbc	r23, r23
 53a:	88 0b       	sbc	r24, r24
 53c:	99 0b       	sbc	r25, r25
 53e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	40 e8       	ldi	r20, 0x80	; 128
 548:	5e e3       	ldi	r21, 0x3E	; 62
 54a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	c5 01       	movw	r24, r10
 554:	b4 01       	movw	r22, r8
 556:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
 55a:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixsfsi>
 55e:	86 2f       	mov	r24, r22
 560:	97 2f       	mov	r25, r23
 562:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <srv_cmd>
 566:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <srv_cmd+0x1>
			old_srv_cmd = srv_cmd;
 56a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <old_srv_cmd>
			println_int_0(srv_cmd);
 56e:	0e 94 bb 03 	call	0x776	; 0x776 <println_int_0>
			
			
			if (abs(mtr_cmd) < 100) // deadband (mtr_cmd is from -1000 to 1000)
 572:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <mtr_cmd>
 576:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <mtr_cmd+0x1>
 57a:	8d 59       	subi	r24, 0x9D	; 157
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	87 3c       	cpi	r24, 0xC7	; 199
 580:	91 05       	cpc	r25, r1
 582:	38 f4       	brcc	.+14     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			{
				stop_TMR1A_pwm();
 584:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <stop_TMR1A_pwm>
				stop_TMR1B_pwm();
 588:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <stop_TMR1B_pwm>
// 				set_TMR1A_duty_cycle(0);
// 				set_TMR1A_duty_cycle(0);
				motor_off();
 58c:	0e 94 0b 01 	call	0x216	; 0x216 <motor_off>
 590:	25 c0       	rjmp	.+74     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
			}
			else  
			{
				motor_on();
 592:	0e 94 0e 01 	call	0x21c	; 0x21c <motor_on>
				if (mtr_cmd > 0 ) // forward direction
 596:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <mtr_cmd>
 59a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <mtr_cmd+0x1>
 59e:	18 16       	cp	r1, r24
 5a0:	19 06       	cpc	r1, r25
 5a2:	5c f4       	brge	.+22     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
				{
					stop_TMR1B_pwm();
 5a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <stop_TMR1B_pwm>
					start_TMR1A_pwm();
 5a8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <start_TMR1A_pwm>
					set_TMR1A_duty_cycle(mtr_cmd);
 5ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <mtr_cmd>
 5b0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <mtr_cmd+0x1>
 5b4:	0e 94 b5 00 	call	0x16a	; 0x16a <set_TMR1A_duty_cycle>
 5b8:	11 c0       	rjmp	.+34     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
					
				}
				else if (mtr_cmd < 0)  // backward direction
 5ba:	99 23       	and	r25, r25
 5bc:	7c f4       	brge	.+30     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
				{
					stop_TMR1A_pwm();
 5be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <stop_TMR1A_pwm>
					start_TMR1B_pwm();
 5c2:	0e 94 05 01 	call	0x20a	; 0x20a <start_TMR1B_pwm>
					set_TMR1B_duty_cycle(abs(mtr_cmd));
 5c6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <mtr_cmd>
 5ca:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <mtr_cmd+0x1>
 5ce:	99 23       	and	r25, r25
 5d0:	1c f4       	brge	.+6      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5d2:	91 95       	neg	r25
 5d4:	81 95       	neg	r24
 5d6:	91 09       	sbc	r25, r1
 5d8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_TMR1B_duty_cycle>
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
}
void move_servo(float angle)
{ 
	angle = 47 + angle*.355;
	OCR0A = (uint8_t)angle;
 5dc:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <srv_cmd>
 5e0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <srv_cmd+0x1>
 5e4:	07 2e       	mov	r0, r23
 5e6:	00 0c       	add	r0, r0
 5e8:	88 0b       	sbc	r24, r24
 5ea:	99 0b       	sbc	r25, r25
 5ec:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatsisf>
 5f0:	2f e8       	ldi	r18, 0x8F	; 143
 5f2:	32 ec       	ldi	r19, 0xC2	; 194
 5f4:	45 eb       	ldi	r20, 0xB5	; 181
 5f6:	5e e3       	ldi	r21, 0x3E	; 62
 5f8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__mulsf3>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	4c e3       	ldi	r20, 0x3C	; 60
 602:	52 e4       	ldi	r21, 0x42	; 66
 604:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
 608:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fixunssfsi>
 60c:	67 bd       	out	0x27, r22	; 39
 60e:	8f e3       	ldi	r24, 0x3F	; 63
 610:	9c e9       	ldi	r25, 0x9C	; 156
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 616:	00 c0       	rjmp	.+0      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 618:	00 00       	nop
 61a:	16 cf       	rjmp	.-468    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>

0000061c <__vector_20>:
	return value;
} // end of joystick_scaling

// $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh
ISR(USART0_RX_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	rcv_string[k_RX] = UDR1;
 634:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <k_RX>
 638:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	ec 5d       	subi	r30, 0xDC	; 220
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	80 83       	st	Z, r24
	
	if (rcv_string[k_RX] == '$')
 644:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <k_RX>
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ec 5d       	subi	r30, 0xDC	; 220
 64c:	fe 4f       	sbci	r31, 0xFE	; 254
 64e:	80 81       	ld	r24, Z
 650:	84 32       	cpi	r24, 0x24	; 36
 652:	19 f4       	brne	.+6      	; 0x65a <__vector_20+0x3e>
	HEADER = 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <HEADER>
	
	if (HEADER)
 65a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <HEADER>
 65e:	88 23       	and	r24, r24
 660:	11 f1       	breq	.+68     	; 0x6a6 <__vector_20+0x8a>
	{
		if (rcv_string[k_RX] == ',')
 662:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <k_RX>
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	ec 5d       	subi	r30, 0xDC	; 220
 66a:	fe 4f       	sbci	r31, 0xFE	; 254
 66c:	80 81       	ld	r24, Z
 66e:	8c 32       	cpi	r24, 0x2C	; 44
 670:	a9 f4       	brne	.+42     	; 0x69c <__vector_20+0x80>
		{
			if ( (rcv_string[3] == 'R') && (rcv_string[4] == 'M') && (rcv_string[5] == 'C'))
 672:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_string+0x3>
 676:	82 35       	cpi	r24, 0x52	; 82
 678:	61 f4       	brne	.+24     	; 0x692 <__vector_20+0x76>
 67a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <rcv_string+0x4>
 67e:	8d 34       	cpi	r24, 0x4D	; 77
 680:	41 f4       	brne	.+16     	; 0x692 <__vector_20+0x76>
 682:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rcv_string+0x5>
 686:	83 34       	cpi	r24, 0x43	; 67
 688:	21 f4       	brne	.+8      	; 0x692 <__vector_20+0x76>
			{
				GPRMC_SENTENCE = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 690:	02 c0       	rjmp	.+4      	; 0x696 <__vector_20+0x7a>
			}
			else
			k_RX = 0;
 692:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <k_RX>
			HEADER = 0;
 696:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <HEADER>
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <__vector_20+0x8a>
		}
		else
		k_RX++;
 69c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <k_RX>
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <k_RX>
	}
	
	if (GPRMC_SENTENCE)
 6a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 6aa:	88 23       	and	r24, r24
 6ac:	91 f1       	breq	.+100    	; 0x712 <__vector_20+0xf6>
	{
		if (rcv_string[k_RX] == '*')
 6ae:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <k_RX>
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	ec 5d       	subi	r30, 0xDC	; 220
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	80 81       	ld	r24, Z
 6ba:	8a 32       	cpi	r24, 0x2A	; 42
 6bc:	29 f5       	brne	.+74     	; 0x708 <__vector_20+0xec>
 6be:	e7 e3       	ldi	r30, 0x37	; 55
 6c0:	f1 e0       	ldi	r31, 0x01	; 1
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
			{
				lat_buf[j] = rcv_string[i];
 6c6:	21 91       	ld	r18, Z+
 6c8:	dc 01       	movw	r26, r24
 6ca:	ac 59       	subi	r26, 0x9C	; 156
 6cc:	be 4f       	sbci	r27, 0xFE	; 254
 6ce:	2c 93       	st	X, r18
				j++;
 6d0:	01 96       	adiw	r24, 0x01	; 1
	if (GPRMC_SENTENCE)
	{
		if (rcv_string[k_RX] == '*')
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
 6d2:	87 30       	cpi	r24, 0x07	; 7
 6d4:	91 05       	cpc	r25, r1
 6d6:	b9 f7       	brne	.-18     	; 0x6c6 <__vector_20+0xaa>
			{
				lat_buf[j] = rcv_string[i];
				j++;
			}
			lat_buf[j] = NL;
 6d8:	8a e0       	ldi	r24, 0x0A	; 10
 6da:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <lat_buf+0x7>
 6de:	e5 e4       	ldi	r30, 0x45	; 69
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
			
			
			j = 0;
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
			for (int i = 33; i <40; i++)
			{
				lon_buf[j] = rcv_string[i];
 6e6:	21 91       	ld	r18, Z+
 6e8:	dc 01       	movw	r26, r24
 6ea:	a3 59       	subi	r26, 0x93	; 147
 6ec:	be 4f       	sbci	r27, 0xFE	; 254
 6ee:	2c 93       	st	X, r18
				j++;
 6f0:	01 96       	adiw	r24, 0x01	; 1
			}
			lat_buf[j] = NL;
			
			
			j = 0;
			for (int i = 33; i <40; i++)
 6f2:	87 30       	cpi	r24, 0x07	; 7
 6f4:	91 05       	cpc	r25, r1
 6f6:	b9 f7       	brne	.-18     	; 0x6e6 <__vector_20+0xca>
			{
				lon_buf[j] = rcv_string[i];
				j++;
			}
			lon_buf[j] = NL;
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
 6fa:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <lon_buf+0x7>
			
			GPRMC_SENTENCE = 0;
 6fe:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
			k_RX = 0;
 702:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <k_RX>
 706:	05 c0       	rjmp	.+10     	; 0x712 <__vector_20+0xf6>
		}
		else
		k_RX++;
 708:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <k_RX>
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <k_RX>
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <println_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	8c 01       	movw	r16, r24
 734:	fc 01       	movw	r30, r24
 736:	80 81       	ld	r24, Z
 738:	8a 30       	cpi	r24, 0x0A	; 10
 73a:	69 f0       	breq	.+26     	; 0x756 <println_0+0x2c>
 73c:	8b 33       	cpi	r24, 0x3B	; 59
 73e:	79 f4       	brne	.+30     	; 0x75e <println_0+0x34>
 740:	0a c0       	rjmp	.+20     	; 0x756 <println_0+0x2c>
 742:	89 91       	ld	r24, Y+
 744:	8a 30       	cpi	r24, 0x0A	; 10
 746:	39 f0       	breq	.+14     	; 0x756 <println_0+0x2c>
 748:	8b 33       	cpi	r24, 0x3B	; 59
 74a:	29 f0       	breq	.+10     	; 0x756 <println_0+0x2c>
 74c:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
 750:	0c 17       	cp	r16, r28
 752:	1d 07       	cpc	r17, r29
 754:	b1 f7       	brne	.-20     	; 0x742 <println_0+0x18>
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
 75c:	07 c0       	rjmp	.+14     	; 0x76c <println_0+0x42>
 75e:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
 762:	e8 01       	movw	r28, r16
 764:	21 96       	adiw	r28, 0x01	; 1
 766:	08 53       	subi	r16, 0x38	; 56
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	eb cf       	rjmp	.-42     	; 0x742 <println_0+0x18>
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	08 95       	ret

00000776 <println_int_0>:

void println_int_0(int number)
{
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	c0 54       	subi	r28, 0x40	; 64
 788:	d1 09       	sbc	r29, r1
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	8c 01       	movw	r16, r24
	if (number == 0)
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	31 f4       	brne	.+12     	; 0x7a6 <println_int_0+0x30>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 79a:	80 e3       	ldi	r24, 0x30	; 48
 79c:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
	if (number == 0)
	{
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
 7a0:	e1 2c       	mov	r14, r1
 7a2:	f1 2c       	mov	r15, r1
 7a4:	16 c0       	rjmp	.+44     	; 0x7d2 <println_int_0+0x5c>
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 7aa:	ea e0       	ldi	r30, 0x0A	; 10
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <println_int_0+0x3c>
		num_digit++;
 7b0:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 7b2:	bf 01       	movw	r22, r30
 7b4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__divmodhi4>
 7b8:	cb 01       	movw	r24, r22
		num_digit++;
 7ba:	79 01       	movw	r14, r18
 7bc:	4f ef       	ldi	r20, 0xFF	; 255
 7be:	e4 1a       	sub	r14, r20
 7c0:	f4 0a       	sbc	r15, r20
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	a9 f7       	brne	.-22     	; 0x7b0 <println_int_0+0x3a>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 7c6:	11 23       	and	r17, r17
 7c8:	24 f4       	brge	.+8      	; 0x7d2 <println_int_0+0x5c>
 7ca:	79 01       	movw	r14, r18
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	e8 0e       	add	r14, r24
 7d0:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7d2:	4a e0       	ldi	r20, 0x0A	; 10
 7d4:	be 01       	movw	r22, r28
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	c8 01       	movw	r24, r16
 7dc:	0e 94 88 06 	call	0xd10	; 0xd10 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 7e0:	1e 14       	cp	r1, r14
 7e2:	1f 04       	cpc	r1, r15
 7e4:	6c f4       	brge	.+26     	; 0x800 <println_int_0+0x8a>
 7e6:	8e 01       	movw	r16, r28
 7e8:	0f 5f       	subi	r16, 0xFF	; 255
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
 7ec:	e0 0e       	add	r14, r16
 7ee:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 7f0:	f8 01       	movw	r30, r16
 7f2:	81 91       	ld	r24, Z+
 7f4:	8f 01       	movw	r16, r30
 7f6:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 7fa:	0e 15       	cp	r16, r14
 7fc:	1f 05       	cpc	r17, r15
 7fe:	c1 f7       	brne	.-16     	; 0x7f0 <println_int_0+0x7a>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 800:	8a e0       	ldi	r24, 0x0A	; 10
 802:	0e 94 11 04 	call	0x822	; 0x822 <usart0_send_char>
}
 806:	c0 5c       	subi	r28, 0xC0	; 192
 808:	df 4f       	sbci	r29, 0xFF	; 255
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	08 95       	ret

00000822 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 822:	e0 ec       	ldi	r30, 0xC0	; 192
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	90 81       	ld	r25, Z
 828:	95 ff       	sbrs	r25, 5
 82a:	fd cf       	rjmp	.-6      	; 0x826 <usart0_send_char+0x4>
 82c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 830:	08 95       	ret

00000832 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 832:	98 e9       	ldi	r25, 0x98	; 152
 834:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 838:	96 e0       	ldi	r25, 0x06	; 6
 83a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 83e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 842:	08 95       	ret

00000844 <__subsf3>:
 844:	50 58       	subi	r21, 0x80	; 128

00000846 <__addsf3>:
 846:	bb 27       	eor	r27, r27
 848:	aa 27       	eor	r26, r26
 84a:	0e 94 3a 04 	call	0x874	; 0x874 <__addsf3x>
 84e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
 852:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
 856:	38 f0       	brcs	.+14     	; 0x866 <__addsf3+0x20>
 858:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
 85c:	20 f0       	brcs	.+8      	; 0x866 <__addsf3+0x20>
 85e:	39 f4       	brne	.+14     	; 0x86e <__addsf3+0x28>
 860:	9f 3f       	cpi	r25, 0xFF	; 255
 862:	19 f4       	brne	.+6      	; 0x86a <__addsf3+0x24>
 864:	26 f4       	brtc	.+8      	; 0x86e <__addsf3+0x28>
 866:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_nan>
 86a:	0e f4       	brtc	.+2      	; 0x86e <__addsf3+0x28>
 86c:	e0 95       	com	r30
 86e:	e7 fb       	bst	r30, 7
 870:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_inf>

00000874 <__addsf3x>:
 874:	e9 2f       	mov	r30, r25
 876:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
 87a:	58 f3       	brcs	.-42     	; 0x852 <__addsf3+0xc>
 87c:	ba 17       	cp	r27, r26
 87e:	62 07       	cpc	r22, r18
 880:	73 07       	cpc	r23, r19
 882:	84 07       	cpc	r24, r20
 884:	95 07       	cpc	r25, r21
 886:	20 f0       	brcs	.+8      	; 0x890 <__addsf3x+0x1c>
 888:	79 f4       	brne	.+30     	; 0x8a8 <__addsf3x+0x34>
 88a:	a6 f5       	brtc	.+104    	; 0x8f4 <__addsf3x+0x80>
 88c:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_zero>
 890:	0e f4       	brtc	.+2      	; 0x894 <__addsf3x+0x20>
 892:	e0 95       	com	r30
 894:	0b 2e       	mov	r0, r27
 896:	ba 2f       	mov	r27, r26
 898:	a0 2d       	mov	r26, r0
 89a:	0b 01       	movw	r0, r22
 89c:	b9 01       	movw	r22, r18
 89e:	90 01       	movw	r18, r0
 8a0:	0c 01       	movw	r0, r24
 8a2:	ca 01       	movw	r24, r20
 8a4:	a0 01       	movw	r20, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	ff 27       	eor	r31, r31
 8aa:	59 1b       	sub	r21, r25
 8ac:	99 f0       	breq	.+38     	; 0x8d4 <__addsf3x+0x60>
 8ae:	59 3f       	cpi	r21, 0xF9	; 249
 8b0:	50 f4       	brcc	.+20     	; 0x8c6 <__addsf3x+0x52>
 8b2:	50 3e       	cpi	r21, 0xE0	; 224
 8b4:	68 f1       	brcs	.+90     	; 0x910 <__stack+0x11>
 8b6:	1a 16       	cp	r1, r26
 8b8:	f0 40       	sbci	r31, 0x00	; 0
 8ba:	a2 2f       	mov	r26, r18
 8bc:	23 2f       	mov	r18, r19
 8be:	34 2f       	mov	r19, r20
 8c0:	44 27       	eor	r20, r20
 8c2:	58 5f       	subi	r21, 0xF8	; 248
 8c4:	f3 cf       	rjmp	.-26     	; 0x8ac <__addsf3x+0x38>
 8c6:	46 95       	lsr	r20
 8c8:	37 95       	ror	r19
 8ca:	27 95       	ror	r18
 8cc:	a7 95       	ror	r26
 8ce:	f0 40       	sbci	r31, 0x00	; 0
 8d0:	53 95       	inc	r21
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__addsf3x+0x52>
 8d4:	7e f4       	brtc	.+30     	; 0x8f4 <__addsf3x+0x80>
 8d6:	1f 16       	cp	r1, r31
 8d8:	ba 0b       	sbc	r27, r26
 8da:	62 0b       	sbc	r22, r18
 8dc:	73 0b       	sbc	r23, r19
 8de:	84 0b       	sbc	r24, r20
 8e0:	ba f0       	brmi	.+46     	; 0x910 <__stack+0x11>
 8e2:	91 50       	subi	r25, 0x01	; 1
 8e4:	a1 f0       	breq	.+40     	; 0x90e <__stack+0xf>
 8e6:	ff 0f       	add	r31, r31
 8e8:	bb 1f       	adc	r27, r27
 8ea:	66 1f       	adc	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	c2 f7       	brpl	.-16     	; 0x8e2 <__addsf3x+0x6e>
 8f2:	0e c0       	rjmp	.+28     	; 0x910 <__stack+0x11>
 8f4:	ba 0f       	add	r27, r26
 8f6:	62 1f       	adc	r22, r18
 8f8:	73 1f       	adc	r23, r19
 8fa:	84 1f       	adc	r24, r20
 8fc:	48 f4       	brcc	.+18     	; 0x910 <__stack+0x11>
 8fe:	87 95       	ror	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b7 95       	ror	r27
 906:	f7 95       	ror	r31
 908:	9e 3f       	cpi	r25, 0xFE	; 254
 90a:	08 f0       	brcs	.+2      	; 0x90e <__stack+0xf>
 90c:	b0 cf       	rjmp	.-160    	; 0x86e <__addsf3+0x28>
 90e:	93 95       	inc	r25
 910:	88 0f       	add	r24, r24
 912:	08 f0       	brcs	.+2      	; 0x916 <__stack+0x17>
 914:	99 27       	eor	r25, r25
 916:	ee 0f       	add	r30, r30
 918:	97 95       	ror	r25
 91a:	87 95       	ror	r24
 91c:	08 95       	ret

0000091e <__cmpsf2>:
 91e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_cmp>
 922:	08 f4       	brcc	.+2      	; 0x926 <__cmpsf2+0x8>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	08 95       	ret

00000928 <__divsf3>:
 928:	0e 94 a8 04 	call	0x950	; 0x950 <__divsf3x>
 92c:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
 930:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
 934:	58 f0       	brcs	.+22     	; 0x94c <__divsf3+0x24>
 936:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
 93a:	40 f0       	brcs	.+16     	; 0x94c <__divsf3+0x24>
 93c:	29 f4       	brne	.+10     	; 0x948 <__divsf3+0x20>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	29 f0       	breq	.+10     	; 0x94c <__divsf3+0x24>
 942:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_inf>
 946:	51 11       	cpse	r21, r1
 948:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
 94c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_nan>

00000950 <__divsf3x>:
 950:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
 954:	68 f3       	brcs	.-38     	; 0x930 <__divsf3+0x8>

00000956 <__divsf3_pse>:
 956:	99 23       	and	r25, r25
 958:	b1 f3       	breq	.-20     	; 0x946 <__divsf3+0x1e>
 95a:	55 23       	and	r21, r21
 95c:	91 f3       	breq	.-28     	; 0x942 <__divsf3+0x1a>
 95e:	95 1b       	sub	r25, r21
 960:	55 0b       	sbc	r21, r21
 962:	bb 27       	eor	r27, r27
 964:	aa 27       	eor	r26, r26
 966:	62 17       	cp	r22, r18
 968:	73 07       	cpc	r23, r19
 96a:	84 07       	cpc	r24, r20
 96c:	38 f0       	brcs	.+14     	; 0x97c <__divsf3_pse+0x26>
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	44 1f       	adc	r20, r20
 978:	aa 1f       	adc	r26, r26
 97a:	a9 f3       	breq	.-22     	; 0x966 <__divsf3_pse+0x10>
 97c:	35 d0       	rcall	.+106    	; 0x9e8 <__divsf3_pse+0x92>
 97e:	0e 2e       	mov	r0, r30
 980:	3a f0       	brmi	.+14     	; 0x990 <__divsf3_pse+0x3a>
 982:	e0 e8       	ldi	r30, 0x80	; 128
 984:	32 d0       	rcall	.+100    	; 0x9ea <__divsf3_pse+0x94>
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	e6 95       	lsr	r30
 98c:	00 1c       	adc	r0, r0
 98e:	ca f7       	brpl	.-14     	; 0x982 <__divsf3_pse+0x2c>
 990:	2b d0       	rcall	.+86     	; 0x9e8 <__divsf3_pse+0x92>
 992:	fe 2f       	mov	r31, r30
 994:	29 d0       	rcall	.+82     	; 0x9e8 <__divsf3_pse+0x92>
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	26 17       	cp	r18, r22
 9a0:	37 07       	cpc	r19, r23
 9a2:	48 07       	cpc	r20, r24
 9a4:	ab 07       	cpc	r26, r27
 9a6:	b0 e8       	ldi	r27, 0x80	; 128
 9a8:	09 f0       	breq	.+2      	; 0x9ac <__divsf3_pse+0x56>
 9aa:	bb 0b       	sbc	r27, r27
 9ac:	80 2d       	mov	r24, r0
 9ae:	bf 01       	movw	r22, r30
 9b0:	ff 27       	eor	r31, r31
 9b2:	93 58       	subi	r25, 0x83	; 131
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	3a f0       	brmi	.+14     	; 0x9c6 <__divsf3_pse+0x70>
 9b8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ba:	51 05       	cpc	r21, r1
 9bc:	78 f0       	brcs	.+30     	; 0x9dc <__divsf3_pse+0x86>
 9be:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_inf>
 9c2:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	e4 f3       	brlt	.-8      	; 0x9c2 <__divsf3_pse+0x6c>
 9ca:	98 3e       	cpi	r25, 0xE8	; 232
 9cc:	d4 f3       	brlt	.-12     	; 0x9c2 <__divsf3_pse+0x6c>
 9ce:	86 95       	lsr	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f7 95       	ror	r31
 9d8:	9f 5f       	subi	r25, 0xFF	; 255
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__divsf3_pse+0x78>
 9dc:	88 0f       	add	r24, r24
 9de:	91 1d       	adc	r25, r1
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	97 f9       	bld	r25, 7
 9e6:	08 95       	ret
 9e8:	e1 e0       	ldi	r30, 0x01	; 1
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	bb 1f       	adc	r27, r27
 9f2:	62 17       	cp	r22, r18
 9f4:	73 07       	cpc	r23, r19
 9f6:	84 07       	cpc	r24, r20
 9f8:	ba 07       	cpc	r27, r26
 9fa:	20 f0       	brcs	.+8      	; 0xa04 <__divsf3_pse+0xae>
 9fc:	62 1b       	sub	r22, r18
 9fe:	73 0b       	sbc	r23, r19
 a00:	84 0b       	sbc	r24, r20
 a02:	ba 0b       	sbc	r27, r26
 a04:	ee 1f       	adc	r30, r30
 a06:	88 f7       	brcc	.-30     	; 0x9ea <__divsf3_pse+0x94>
 a08:	e0 95       	com	r30
 a0a:	08 95       	ret

00000a0c <__fixsfsi>:
 a0c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fixunssfsi>
 a10:	68 94       	set
 a12:	b1 11       	cpse	r27, r1
 a14:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
 a18:	08 95       	ret

00000a1a <__fixunssfsi>:
 a1a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_splitA>
 a1e:	88 f0       	brcs	.+34     	; 0xa42 <__fixunssfsi+0x28>
 a20:	9f 57       	subi	r25, 0x7F	; 127
 a22:	98 f0       	brcs	.+38     	; 0xa4a <__fixunssfsi+0x30>
 a24:	b9 2f       	mov	r27, r25
 a26:	99 27       	eor	r25, r25
 a28:	b7 51       	subi	r27, 0x17	; 23
 a2a:	b0 f0       	brcs	.+44     	; 0xa58 <__fixunssfsi+0x3e>
 a2c:	e1 f0       	breq	.+56     	; 0xa66 <__fixunssfsi+0x4c>
 a2e:	66 0f       	add	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	1a f0       	brmi	.+6      	; 0xa3e <__fixunssfsi+0x24>
 a38:	ba 95       	dec	r27
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__fixunssfsi+0x14>
 a3c:	14 c0       	rjmp	.+40     	; 0xa66 <__fixunssfsi+0x4c>
 a3e:	b1 30       	cpi	r27, 0x01	; 1
 a40:	91 f0       	breq	.+36     	; 0xa66 <__fixunssfsi+0x4c>
 a42:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_zero>
 a46:	b1 e0       	ldi	r27, 0x01	; 1
 a48:	08 95       	ret
 a4a:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_zero>
 a4e:	67 2f       	mov	r22, r23
 a50:	78 2f       	mov	r23, r24
 a52:	88 27       	eor	r24, r24
 a54:	b8 5f       	subi	r27, 0xF8	; 248
 a56:	39 f0       	breq	.+14     	; 0xa66 <__fixunssfsi+0x4c>
 a58:	b9 3f       	cpi	r27, 0xF9	; 249
 a5a:	cc f3       	brlt	.-14     	; 0xa4e <__fixunssfsi+0x34>
 a5c:	86 95       	lsr	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b3 95       	inc	r27
 a64:	d9 f7       	brne	.-10     	; 0xa5c <__fixunssfsi+0x42>
 a66:	3e f4       	brtc	.+14     	; 0xa76 <__fixunssfsi+0x5c>
 a68:	90 95       	com	r25
 a6a:	80 95       	com	r24
 a6c:	70 95       	com	r23
 a6e:	61 95       	neg	r22
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	08 95       	ret

00000a78 <__floatunsisf>:
 a78:	e8 94       	clt
 a7a:	09 c0       	rjmp	.+18     	; 0xa8e <__floatsisf+0x12>

00000a7c <__floatsisf>:
 a7c:	97 fb       	bst	r25, 7
 a7e:	3e f4       	brtc	.+14     	; 0xa8e <__floatsisf+0x12>
 a80:	90 95       	com	r25
 a82:	80 95       	com	r24
 a84:	70 95       	com	r23
 a86:	61 95       	neg	r22
 a88:	7f 4f       	sbci	r23, 0xFF	; 255
 a8a:	8f 4f       	sbci	r24, 0xFF	; 255
 a8c:	9f 4f       	sbci	r25, 0xFF	; 255
 a8e:	99 23       	and	r25, r25
 a90:	a9 f0       	breq	.+42     	; 0xabc <__floatsisf+0x40>
 a92:	f9 2f       	mov	r31, r25
 a94:	96 e9       	ldi	r25, 0x96	; 150
 a96:	bb 27       	eor	r27, r27
 a98:	93 95       	inc	r25
 a9a:	f6 95       	lsr	r31
 a9c:	87 95       	ror	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b7 95       	ror	r27
 aa4:	f1 11       	cpse	r31, r1
 aa6:	f8 cf       	rjmp	.-16     	; 0xa98 <__floatsisf+0x1c>
 aa8:	fa f4       	brpl	.+62     	; 0xae8 <__floatsisf+0x6c>
 aaa:	bb 0f       	add	r27, r27
 aac:	11 f4       	brne	.+4      	; 0xab2 <__floatsisf+0x36>
 aae:	60 ff       	sbrs	r22, 0
 ab0:	1b c0       	rjmp	.+54     	; 0xae8 <__floatsisf+0x6c>
 ab2:	6f 5f       	subi	r22, 0xFF	; 255
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	8f 4f       	sbci	r24, 0xFF	; 255
 ab8:	9f 4f       	sbci	r25, 0xFF	; 255
 aba:	16 c0       	rjmp	.+44     	; 0xae8 <__floatsisf+0x6c>
 abc:	88 23       	and	r24, r24
 abe:	11 f0       	breq	.+4      	; 0xac4 <__floatsisf+0x48>
 ac0:	96 e9       	ldi	r25, 0x96	; 150
 ac2:	11 c0       	rjmp	.+34     	; 0xae6 <__floatsisf+0x6a>
 ac4:	77 23       	and	r23, r23
 ac6:	21 f0       	breq	.+8      	; 0xad0 <__floatsisf+0x54>
 ac8:	9e e8       	ldi	r25, 0x8E	; 142
 aca:	87 2f       	mov	r24, r23
 acc:	76 2f       	mov	r23, r22
 ace:	05 c0       	rjmp	.+10     	; 0xada <__floatsisf+0x5e>
 ad0:	66 23       	and	r22, r22
 ad2:	71 f0       	breq	.+28     	; 0xaf0 <__floatsisf+0x74>
 ad4:	96 e8       	ldi	r25, 0x86	; 134
 ad6:	86 2f       	mov	r24, r22
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	2a f0       	brmi	.+10     	; 0xae8 <__floatsisf+0x6c>
 ade:	9a 95       	dec	r25
 ae0:	66 0f       	add	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	da f7       	brpl	.-10     	; 0xade <__floatsisf+0x62>
 ae8:	88 0f       	add	r24, r24
 aea:	96 95       	lsr	r25
 aec:	87 95       	ror	r24
 aee:	97 f9       	bld	r25, 7
 af0:	08 95       	ret

00000af2 <__fp_cmp>:
 af2:	99 0f       	add	r25, r25
 af4:	00 08       	sbc	r0, r0
 af6:	55 0f       	add	r21, r21
 af8:	aa 0b       	sbc	r26, r26
 afa:	e0 e8       	ldi	r30, 0x80	; 128
 afc:	fe ef       	ldi	r31, 0xFE	; 254
 afe:	16 16       	cp	r1, r22
 b00:	17 06       	cpc	r1, r23
 b02:	e8 07       	cpc	r30, r24
 b04:	f9 07       	cpc	r31, r25
 b06:	c0 f0       	brcs	.+48     	; 0xb38 <__fp_cmp+0x46>
 b08:	12 16       	cp	r1, r18
 b0a:	13 06       	cpc	r1, r19
 b0c:	e4 07       	cpc	r30, r20
 b0e:	f5 07       	cpc	r31, r21
 b10:	98 f0       	brcs	.+38     	; 0xb38 <__fp_cmp+0x46>
 b12:	62 1b       	sub	r22, r18
 b14:	73 0b       	sbc	r23, r19
 b16:	84 0b       	sbc	r24, r20
 b18:	95 0b       	sbc	r25, r21
 b1a:	39 f4       	brne	.+14     	; 0xb2a <__fp_cmp+0x38>
 b1c:	0a 26       	eor	r0, r26
 b1e:	61 f0       	breq	.+24     	; 0xb38 <__fp_cmp+0x46>
 b20:	23 2b       	or	r18, r19
 b22:	24 2b       	or	r18, r20
 b24:	25 2b       	or	r18, r21
 b26:	21 f4       	brne	.+8      	; 0xb30 <__fp_cmp+0x3e>
 b28:	08 95       	ret
 b2a:	0a 26       	eor	r0, r26
 b2c:	09 f4       	brne	.+2      	; 0xb30 <__fp_cmp+0x3e>
 b2e:	a1 40       	sbci	r26, 0x01	; 1
 b30:	a6 95       	lsr	r26
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	81 1d       	adc	r24, r1
 b36:	81 1d       	adc	r24, r1
 b38:	08 95       	ret

00000b3a <__fp_inf>:
 b3a:	97 f9       	bld	r25, 7
 b3c:	9f 67       	ori	r25, 0x7F	; 127
 b3e:	80 e8       	ldi	r24, 0x80	; 128
 b40:	70 e0       	ldi	r23, 0x00	; 0
 b42:	60 e0       	ldi	r22, 0x00	; 0
 b44:	08 95       	ret

00000b46 <__fp_nan>:
 b46:	9f ef       	ldi	r25, 0xFF	; 255
 b48:	80 ec       	ldi	r24, 0xC0	; 192
 b4a:	08 95       	ret

00000b4c <__fp_pscA>:
 b4c:	00 24       	eor	r0, r0
 b4e:	0a 94       	dec	r0
 b50:	16 16       	cp	r1, r22
 b52:	17 06       	cpc	r1, r23
 b54:	18 06       	cpc	r1, r24
 b56:	09 06       	cpc	r0, r25
 b58:	08 95       	ret

00000b5a <__fp_pscB>:
 b5a:	00 24       	eor	r0, r0
 b5c:	0a 94       	dec	r0
 b5e:	12 16       	cp	r1, r18
 b60:	13 06       	cpc	r1, r19
 b62:	14 06       	cpc	r1, r20
 b64:	05 06       	cpc	r0, r21
 b66:	08 95       	ret

00000b68 <__fp_round>:
 b68:	09 2e       	mov	r0, r25
 b6a:	03 94       	inc	r0
 b6c:	00 0c       	add	r0, r0
 b6e:	11 f4       	brne	.+4      	; 0xb74 <__fp_round+0xc>
 b70:	88 23       	and	r24, r24
 b72:	52 f0       	brmi	.+20     	; 0xb88 <__fp_round+0x20>
 b74:	bb 0f       	add	r27, r27
 b76:	40 f4       	brcc	.+16     	; 0xb88 <__fp_round+0x20>
 b78:	bf 2b       	or	r27, r31
 b7a:	11 f4       	brne	.+4      	; 0xb80 <__fp_round+0x18>
 b7c:	60 ff       	sbrs	r22, 0
 b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__fp_round+0x20>
 b80:	6f 5f       	subi	r22, 0xFF	; 255
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	08 95       	ret

00000b8a <__fp_split3>:
 b8a:	57 fd       	sbrc	r21, 7
 b8c:	90 58       	subi	r25, 0x80	; 128
 b8e:	44 0f       	add	r20, r20
 b90:	55 1f       	adc	r21, r21
 b92:	59 f0       	breq	.+22     	; 0xbaa <__fp_splitA+0x10>
 b94:	5f 3f       	cpi	r21, 0xFF	; 255
 b96:	71 f0       	breq	.+28     	; 0xbb4 <__fp_splitA+0x1a>
 b98:	47 95       	ror	r20

00000b9a <__fp_splitA>:
 b9a:	88 0f       	add	r24, r24
 b9c:	97 fb       	bst	r25, 7
 b9e:	99 1f       	adc	r25, r25
 ba0:	61 f0       	breq	.+24     	; 0xbba <__fp_splitA+0x20>
 ba2:	9f 3f       	cpi	r25, 0xFF	; 255
 ba4:	79 f0       	breq	.+30     	; 0xbc4 <__fp_splitA+0x2a>
 ba6:	87 95       	ror	r24
 ba8:	08 95       	ret
 baa:	12 16       	cp	r1, r18
 bac:	13 06       	cpc	r1, r19
 bae:	14 06       	cpc	r1, r20
 bb0:	55 1f       	adc	r21, r21
 bb2:	f2 cf       	rjmp	.-28     	; 0xb98 <__fp_split3+0xe>
 bb4:	46 95       	lsr	r20
 bb6:	f1 df       	rcall	.-30     	; 0xb9a <__fp_splitA>
 bb8:	08 c0       	rjmp	.+16     	; 0xbca <__fp_splitA+0x30>
 bba:	16 16       	cp	r1, r22
 bbc:	17 06       	cpc	r1, r23
 bbe:	18 06       	cpc	r1, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	f1 cf       	rjmp	.-30     	; 0xba6 <__fp_splitA+0xc>
 bc4:	86 95       	lsr	r24
 bc6:	71 05       	cpc	r23, r1
 bc8:	61 05       	cpc	r22, r1
 bca:	08 94       	sec
 bcc:	08 95       	ret

00000bce <__fp_zero>:
 bce:	e8 94       	clt

00000bd0 <__fp_szero>:
 bd0:	bb 27       	eor	r27, r27
 bd2:	66 27       	eor	r22, r22
 bd4:	77 27       	eor	r23, r23
 bd6:	cb 01       	movw	r24, r22
 bd8:	97 f9       	bld	r25, 7
 bda:	08 95       	ret

00000bdc <__gesf2>:
 bdc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_cmp>
 be0:	08 f4       	brcc	.+2      	; 0xbe4 <__gesf2+0x8>
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	08 95       	ret

00000be6 <__mulsf3>:
 be6:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulsf3x>
 bea:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
 bee:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
 bf2:	38 f0       	brcs	.+14     	; 0xc02 <__mulsf3+0x1c>
 bf4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
 bf8:	20 f0       	brcs	.+8      	; 0xc02 <__mulsf3+0x1c>
 bfa:	95 23       	and	r25, r21
 bfc:	11 f0       	breq	.+4      	; 0xc02 <__mulsf3+0x1c>
 bfe:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_inf>
 c02:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_nan>
 c06:	11 24       	eor	r1, r1
 c08:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>

00000c0c <__mulsf3x>:
 c0c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
 c10:	70 f3       	brcs	.-36     	; 0xbee <__mulsf3+0x8>

00000c12 <__mulsf3_pse>:
 c12:	95 9f       	mul	r25, r21
 c14:	c1 f3       	breq	.-16     	; 0xc06 <__mulsf3+0x20>
 c16:	95 0f       	add	r25, r21
 c18:	50 e0       	ldi	r21, 0x00	; 0
 c1a:	55 1f       	adc	r21, r21
 c1c:	62 9f       	mul	r22, r18
 c1e:	f0 01       	movw	r30, r0
 c20:	72 9f       	mul	r23, r18
 c22:	bb 27       	eor	r27, r27
 c24:	f0 0d       	add	r31, r0
 c26:	b1 1d       	adc	r27, r1
 c28:	63 9f       	mul	r22, r19
 c2a:	aa 27       	eor	r26, r26
 c2c:	f0 0d       	add	r31, r0
 c2e:	b1 1d       	adc	r27, r1
 c30:	aa 1f       	adc	r26, r26
 c32:	64 9f       	mul	r22, r20
 c34:	66 27       	eor	r22, r22
 c36:	b0 0d       	add	r27, r0
 c38:	a1 1d       	adc	r26, r1
 c3a:	66 1f       	adc	r22, r22
 c3c:	82 9f       	mul	r24, r18
 c3e:	22 27       	eor	r18, r18
 c40:	b0 0d       	add	r27, r0
 c42:	a1 1d       	adc	r26, r1
 c44:	62 1f       	adc	r22, r18
 c46:	73 9f       	mul	r23, r19
 c48:	b0 0d       	add	r27, r0
 c4a:	a1 1d       	adc	r26, r1
 c4c:	62 1f       	adc	r22, r18
 c4e:	83 9f       	mul	r24, r19
 c50:	a0 0d       	add	r26, r0
 c52:	61 1d       	adc	r22, r1
 c54:	22 1f       	adc	r18, r18
 c56:	74 9f       	mul	r23, r20
 c58:	33 27       	eor	r19, r19
 c5a:	a0 0d       	add	r26, r0
 c5c:	61 1d       	adc	r22, r1
 c5e:	23 1f       	adc	r18, r19
 c60:	84 9f       	mul	r24, r20
 c62:	60 0d       	add	r22, r0
 c64:	21 1d       	adc	r18, r1
 c66:	82 2f       	mov	r24, r18
 c68:	76 2f       	mov	r23, r22
 c6a:	6a 2f       	mov	r22, r26
 c6c:	11 24       	eor	r1, r1
 c6e:	9f 57       	subi	r25, 0x7F	; 127
 c70:	50 40       	sbci	r21, 0x00	; 0
 c72:	9a f0       	brmi	.+38     	; 0xc9a <__mulsf3_pse+0x88>
 c74:	f1 f0       	breq	.+60     	; 0xcb2 <__mulsf3_pse+0xa0>
 c76:	88 23       	and	r24, r24
 c78:	4a f0       	brmi	.+18     	; 0xc8c <__mulsf3_pse+0x7a>
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	bb 1f       	adc	r27, r27
 c80:	66 1f       	adc	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	91 50       	subi	r25, 0x01	; 1
 c88:	50 40       	sbci	r21, 0x00	; 0
 c8a:	a9 f7       	brne	.-22     	; 0xc76 <__mulsf3_pse+0x64>
 c8c:	9e 3f       	cpi	r25, 0xFE	; 254
 c8e:	51 05       	cpc	r21, r1
 c90:	80 f0       	brcs	.+32     	; 0xcb2 <__mulsf3_pse+0xa0>
 c92:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_inf>
 c96:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
 c9a:	5f 3f       	cpi	r21, 0xFF	; 255
 c9c:	e4 f3       	brlt	.-8      	; 0xc96 <__mulsf3_pse+0x84>
 c9e:	98 3e       	cpi	r25, 0xE8	; 232
 ca0:	d4 f3       	brlt	.-12     	; 0xc96 <__mulsf3_pse+0x84>
 ca2:	86 95       	lsr	r24
 ca4:	77 95       	ror	r23
 ca6:	67 95       	ror	r22
 ca8:	b7 95       	ror	r27
 caa:	f7 95       	ror	r31
 cac:	e7 95       	ror	r30
 cae:	9f 5f       	subi	r25, 0xFF	; 255
 cb0:	c1 f7       	brne	.-16     	; 0xca2 <__mulsf3_pse+0x90>
 cb2:	fe 2b       	or	r31, r30
 cb4:	88 0f       	add	r24, r24
 cb6:	91 1d       	adc	r25, r1
 cb8:	96 95       	lsr	r25
 cba:	87 95       	ror	r24
 cbc:	97 f9       	bld	r25, 7
 cbe:	08 95       	ret

00000cc0 <__divmodhi4>:
 cc0:	97 fb       	bst	r25, 7
 cc2:	07 2e       	mov	r0, r23
 cc4:	16 f4       	brtc	.+4      	; 0xcca <__divmodhi4+0xa>
 cc6:	00 94       	com	r0
 cc8:	07 d0       	rcall	.+14     	; 0xcd8 <__divmodhi4_neg1>
 cca:	77 fd       	sbrc	r23, 7
 ccc:	09 d0       	rcall	.+18     	; 0xce0 <__divmodhi4_neg2>
 cce:	0e 94 74 06 	call	0xce8	; 0xce8 <__udivmodhi4>
 cd2:	07 fc       	sbrc	r0, 7
 cd4:	05 d0       	rcall	.+10     	; 0xce0 <__divmodhi4_neg2>
 cd6:	3e f4       	brtc	.+14     	; 0xce6 <__divmodhi4_exit>

00000cd8 <__divmodhi4_neg1>:
 cd8:	90 95       	com	r25
 cda:	81 95       	neg	r24
 cdc:	9f 4f       	sbci	r25, 0xFF	; 255
 cde:	08 95       	ret

00000ce0 <__divmodhi4_neg2>:
 ce0:	70 95       	com	r23
 ce2:	61 95       	neg	r22
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ce6 <__divmodhi4_exit>:
 ce6:	08 95       	ret

00000ce8 <__udivmodhi4>:
 ce8:	aa 1b       	sub	r26, r26
 cea:	bb 1b       	sub	r27, r27
 cec:	51 e1       	ldi	r21, 0x11	; 17
 cee:	07 c0       	rjmp	.+14     	; 0xcfe <__udivmodhi4_ep>

00000cf0 <__udivmodhi4_loop>:
 cf0:	aa 1f       	adc	r26, r26
 cf2:	bb 1f       	adc	r27, r27
 cf4:	a6 17       	cp	r26, r22
 cf6:	b7 07       	cpc	r27, r23
 cf8:	10 f0       	brcs	.+4      	; 0xcfe <__udivmodhi4_ep>
 cfa:	a6 1b       	sub	r26, r22
 cfc:	b7 0b       	sbc	r27, r23

00000cfe <__udivmodhi4_ep>:
 cfe:	88 1f       	adc	r24, r24
 d00:	99 1f       	adc	r25, r25
 d02:	5a 95       	dec	r21
 d04:	a9 f7       	brne	.-22     	; 0xcf0 <__udivmodhi4_loop>
 d06:	80 95       	com	r24
 d08:	90 95       	com	r25
 d0a:	bc 01       	movw	r22, r24
 d0c:	cd 01       	movw	r24, r26
 d0e:	08 95       	ret

00000d10 <__itoa_ncheck>:
 d10:	bb 27       	eor	r27, r27
 d12:	4a 30       	cpi	r20, 0x0A	; 10
 d14:	31 f4       	brne	.+12     	; 0xd22 <__itoa_ncheck+0x12>
 d16:	99 23       	and	r25, r25
 d18:	22 f4       	brpl	.+8      	; 0xd22 <__itoa_ncheck+0x12>
 d1a:	bd e2       	ldi	r27, 0x2D	; 45
 d1c:	90 95       	com	r25
 d1e:	81 95       	neg	r24
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__utoa_common>

00000d26 <__utoa_ncheck>:
 d26:	bb 27       	eor	r27, r27

00000d28 <__utoa_common>:
 d28:	fb 01       	movw	r30, r22
 d2a:	55 27       	eor	r21, r21
 d2c:	aa 27       	eor	r26, r26
 d2e:	88 0f       	add	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	aa 1f       	adc	r26, r26
 d34:	a4 17       	cp	r26, r20
 d36:	10 f0       	brcs	.+4      	; 0xd3c <__utoa_common+0x14>
 d38:	a4 1b       	sub	r26, r20
 d3a:	83 95       	inc	r24
 d3c:	50 51       	subi	r21, 0x10	; 16
 d3e:	b9 f7       	brne	.-18     	; 0xd2e <__utoa_common+0x6>
 d40:	a0 5d       	subi	r26, 0xD0	; 208
 d42:	aa 33       	cpi	r26, 0x3A	; 58
 d44:	08 f0       	brcs	.+2      	; 0xd48 <__utoa_common+0x20>
 d46:	a9 5d       	subi	r26, 0xD9	; 217
 d48:	a1 93       	st	Z+, r26
 d4a:	00 97       	sbiw	r24, 0x00	; 0
 d4c:	79 f7       	brne	.-34     	; 0xd2c <__utoa_common+0x4>
 d4e:	b1 11       	cpse	r27, r1
 d50:	b1 93       	st	Z+, r27
 d52:	11 92       	st	Z+, r1
 d54:	cb 01       	movw	r24, r22
 d56:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <strrev>

00000d5a <strrev>:
 d5a:	dc 01       	movw	r26, r24
 d5c:	fc 01       	movw	r30, r24
 d5e:	67 2f       	mov	r22, r23
 d60:	71 91       	ld	r23, Z+
 d62:	77 23       	and	r23, r23
 d64:	e1 f7       	brne	.-8      	; 0xd5e <strrev+0x4>
 d66:	32 97       	sbiw	r30, 0x02	; 2
 d68:	04 c0       	rjmp	.+8      	; 0xd72 <strrev+0x18>
 d6a:	7c 91       	ld	r23, X
 d6c:	6d 93       	st	X+, r22
 d6e:	70 83       	st	Z, r23
 d70:	62 91       	ld	r22, -Z
 d72:	ae 17       	cp	r26, r30
 d74:	bf 07       	cpc	r27, r31
 d76:	c8 f3       	brcs	.-14     	; 0xd6a <strrev+0x10>
 d78:	08 95       	ret

00000d7a <_exit>:
 d7a:	f8 94       	cli

00000d7c <__stop_program>:
 d7c:	ff cf       	rjmp	.-2      	; 0xd7c <__stop_program>
