
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d34  00000dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080010a  0080010a  00000dd2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002418  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001476  00000000  00000000  00004626  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00005a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4f  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff8  00000000  00000000  00006a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00007a3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e3       	ldi	r30, 0x34	; 52
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	aa 30       	cpi	r26, 0x0A	; 10
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	aa e0       	ldi	r26, 0x0A	; 10
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 37       	cpi	r26, 0x70	; 112
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
 102:	0c 94 98 06 	jmp	0xd30	; 0xd30 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <setup_TMR1_pwm>:
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 120:	e0 e8       	ldi	r30, 0x80	; 128
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	89 60       	ori	r24, 0x09	; 9
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <set_TMR1A_duty_cycle>:
 136:	bc 01       	movw	r22, r24
 138:	99 0f       	add	r25, r25
 13a:	88 0b       	sbc	r24, r24
 13c:	99 0b       	sbc	r25, r25
 13e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 142:	2f e6       	ldi	r18, 0x6F	; 111
 144:	32 e1       	ldi	r19, 0x12	; 18
 146:	43 e8       	ldi	r20, 0x83	; 131
 148:	5e e3       	ldi	r21, 0x3E	; 62
 14a:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__subsf3>
 15a:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixsfsi>
 15e:	69 3c       	cpi	r22, 0xC9	; 201
 160:	71 05       	cpc	r23, r1
 162:	14 f0       	brlt	.+4      	; 0x168 <set_TMR1A_duty_cycle+0x32>
 164:	68 ec       	ldi	r22, 0xC8	; 200
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	77 27       	eor	r23, r23
 16a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 172:	08 95       	ret

00000174 <set_TMR1B_duty_cycle>:
 174:	bc 01       	movw	r22, r24
 176:	99 0f       	add	r25, r25
 178:	88 0b       	sbc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 180:	2f e6       	ldi	r18, 0x6F	; 111
 182:	32 e1       	ldi	r19, 0x12	; 18
 184:	43 e8       	ldi	r20, 0x83	; 131
 186:	5e e3       	ldi	r21, 0x3E	; 62
 188:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__subsf3>
 198:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixsfsi>
 19c:	69 3c       	cpi	r22, 0xC9	; 201
 19e:	71 05       	cpc	r23, r1
 1a0:	14 f0       	brlt	.+4      	; 0x1a6 <set_TMR1B_duty_cycle+0x32>
 1a2:	68 ec       	ldi	r22, 0xC8	; 200
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	77 27       	eor	r23, r23
 1a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1b0:	08 95       	ret

000001b2 <stop_TMR1A_pwm>:
 1b2:	e0 e8       	ldi	r30, 0x80	; 128
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <stop_TMR1B_pwm>:
 1be:	e0 e8       	ldi	r30, 0x80	; 128
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <start_TMR1A_pwm>:
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <start_TMR1B_pwm>:
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <motor_off>:
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	2a 98       	cbi	0x05, 2	; 5
 1e6:	08 95       	ret

000001e8 <motor_on>:
 1e8:	29 9a       	sbi	0x05, 1	; 5
 1ea:	2a 9a       	sbi	0x05, 2	; 5
 1ec:	08 95       	ret

000001ee <setup_TMR0_pwm>:
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	83 68       	ori	r24, 0x83	; 131
 1f2:	84 bd       	out	0x24, r24	; 36
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	85 bd       	out	0x25, r24	; 37
 1fa:	8d e3       	ldi	r24, 0x3D	; 61
 1fc:	87 bd       	out	0x27, r24	; 39
 1fe:	08 95       	ret

00000200 <setup_TMR3>:
 200:	e1 e9       	ldi	r30, 0x91	; 145
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& MISC &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 20c:	6c 9a       	sbi	0x0d, 4	; 13
	IN1_DDR |= (1<<IN1);
 20e:	55 9a       	sbi	0x0a, 5	; 10
	IN2_DDR |= (1<<IN2);
 210:	54 9a       	sbi	0x0a, 4	; 10
	EN1_DDR |= (1<<EN1);
 212:	21 9a       	sbi	0x04, 1	; 4
	EN2_DDR |= (1<<EN2);
 214:	22 9a       	sbi	0x04, 2	; 4
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
 216:	23 9a       	sbi	0x04, 3	; 4
 218:	08 95       	ret

0000021a <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	69 f0       	breq	.+26     	; 0x238 <delay_ms+0x1e>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	ef ec       	ldi	r30, 0xCF	; 207
 224:	f7 e0       	ldi	r31, 0x07	; 7
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <delay_ms+0xc>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <delay_ms+0x12>
 22c:	00 00       	nop
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	82 17       	cp	r24, r18
 234:	93 07       	cpc	r25, r19
 236:	a9 f7       	brne	.-22     	; 0x222 <delay_ms+0x8>
 238:	08 95       	ret

0000023a <flash_LED>:
	EN2_DDR |= (1<<EN2);
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 244:	88 23       	and	r24, r24
 246:	79 f0       	breq	.+30     	; 0x266 <flash_LED+0x2c>
 248:	8b 01       	movw	r16, r22
 24a:	d8 2f       	mov	r29, r24
 24c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 24e:	68 94       	set
 250:	ff 24       	eor	r15, r15
 252:	f4 f8       	bld	r15, 4
 254:	9e b1       	in	r25, 0x0e	; 14
 256:	9f 25       	eor	r25, r15
 258:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 25a:	c8 01       	movw	r24, r16
 25c:	0e 94 0d 01 	call	0x21a	; 0x21a <delay_ms>
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	dc 13       	cpse	r29, r28
 264:	f7 cf       	rjmp	.-18     	; 0x254 <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	08 95       	ret

00000272 <parse_GPMRC>:
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//&&&&&&&&&&&&&&&&&&&&&&& GPS &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void parse_GPMRC()
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <parse_GPMRC+0xa>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_buf[2];
	
	temp_buf[0] = lat_buf[0];
 280:	0e e5       	ldi	r16, 0x5E	; 94
 282:	11 e0       	ldi	r17, 0x01	; 1
 284:	f8 01       	movw	r30, r16
 286:	80 81       	ld	r24, Z
 288:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[1];
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	8a 83       	std	Y+2, r24	; 0x02
	lat_deg = atoi((const char *)temp_buf);
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 296:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <lat_deg>
	
	temp_buf[0] = lat_buf[2];
 29a:	f8 01       	movw	r30, r16
 29c:	82 81       	ldd	r24, Z+2	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[3];
 2a0:	83 81       	ldd	r24, Z+3	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
	lat_min = atoi((const char *)temp_buf);
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 2ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lat_min>
	
	temp_buf[0] = lat_buf[5];
 2b0:	f8 01       	movw	r30, r16
 2b2:	85 81       	ldd	r24, Z+5	; 0x05
 2b4:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lat_buf[6];
 2b6:	86 81       	ldd	r24, Z+6	; 0x06
 2b8:	8a 83       	std	Y+2, r24	; 0x02
	lat_sec = atoi((const char *)temp_buf);
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 2c2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lat_sec>
	
	temp_buf[0] = lon_buf[0];
 2c6:	07 e6       	ldi	r16, 0x67	; 103
 2c8:	11 e0       	ldi	r17, 0x01	; 1
 2ca:	f8 01       	movw	r30, r16
 2cc:	80 81       	ld	r24, Z
 2ce:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[1];
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	8a 83       	std	Y+2, r24	; 0x02
	lon_deg = atoi((const char *)temp_buf);
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 2dc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lon_deg>
	
	temp_buf[0] = lon_buf[2];
 2e0:	f8 01       	movw	r30, r16
 2e2:	82 81       	ldd	r24, Z+2	; 0x02
 2e4:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[3];
 2e6:	83 81       	ldd	r24, Z+3	; 0x03
 2e8:	8a 83       	std	Y+2, r24	; 0x02
	lon_min = atoi((const char *)temp_buf);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 2f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <lon_min>
	
	temp_buf[0] = lon_buf[5];
 2f6:	f8 01       	movw	r30, r16
 2f8:	85 81       	ldd	r24, Z+5	; 0x05
 2fa:	89 83       	std	Y+1, r24	; 0x01
	temp_buf[1] = lon_buf[6];
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	8a 83       	std	Y+2, r24	; 0x02
	lon_sec = atoi((const char *)temp_buf);
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 72 06 	call	0xce4	; 0xce4 <atoi>
 308:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <main>:



int main(void)
{
	setup_gpios(); 
 31a:	0e 94 06 01 	call	0x20c	; 0x20c <setup_gpios>
	#ifdef GPS_ON
	/* USART setup */
	setup_usart0(BR_9600); // for NEO6 GPS
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	0e 94 cb 04 	call	0x996	; 0x996 <setup_usart0>
	#endif
	
	/* nRF24L01 setup */
	#ifndef DIRECT_JOYSTICK
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 324:	0e 94 77 04 	call	0x8ee	; 0x8ee <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 328:	0e 94 8e 03 	call	0x71c	; 0x71c <mirf_init>
	mirf_config(); // configure nRF24L01
 32c:	0e 94 cf 03 	call	0x79e	; 0x79e <mirf_config>
	mirf_set_TADDR(tx_address);
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 3f 04 	call	0x87e	; 0x87e <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 37 04 	call	0x86e	; 0x86e <mirf_set_RADDR>
	#endif
	
	/* ADC for current and temperature sensor (and joystick i ndirect joystick mode) */
	setup_adc();
 340:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
	
	/* Timers setup */
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
 344:	0e 94 90 00 	call	0x120	; 0x120 <setup_TMR1_pwm>
	setup_TMR0_pwm(); // setup TMR0 PWM for servo
 348:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setup_TMR0_pwm>
	setup_TMR3(); // for communication timeout with controller
 34c:	0e 94 00 01 	call	0x200	; 0x200 <setup_TMR3>
	
	sei(); // enable global interrupts
 350:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 352:	62 e3       	ldi	r22, 0x32	; 50
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	0e 94 1d 01 	call	0x23a	; 0x23a <flash_LED>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	89 e6       	ldi	r24, 0x69	; 105
 360:	98 e1       	ldi	r25, 0x18	; 24
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x48>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x52>
 36c:	00 00       	nop
 36e:	8f e1       	ldi	r24, 0x1F	; 31
 370:	9e e4       	ldi	r25, 0x4E	; 78
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x58>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x5e>
 378:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		
		TOGGLE_LED;
 37a:	68 94       	set
 37c:	bb 24       	eor	r11, r11
 37e:	b4 f8       	bld	r11, 4
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 380:	c4 e9       	ldi	r28, 0x94	; 148
 382:	d0 e0       	ldi	r29, 0x00	; 0
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
			else if (srv_cmd < -20)
				srv_cmd = -20;
 384:	0f 2e       	mov	r0, r31
 386:	fc ee       	ldi	r31, 0xEC	; 236
 388:	ef 2e       	mov	r14, r31
 38a:	ff 24       	eor	r15, r15
 38c:	fa 94       	dec	r15
 38e:	f0 2d       	mov	r31, r0
 			srv_cmd = 0;
			#endif
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
 390:	04 e1       	ldi	r16, 0x14	; 20
 392:	10 e0       	ldi	r17, 0x00	; 0
				while (!mirf_data_sent())
				{
					if (TCNT3 > 1500) // timeout of one second
					{
						comm_lost_count++;
						comm_lost = 1;
 394:	aa 24       	eor	r10, r10
 396:	a3 94       	inc	r10
	_delay_ms(10);

    while (1) 
    {
		
		TOGGLE_LED;
 398:	8e b1       	in	r24, 0x0e	; 14
 39a:	8b 25       	eor	r24, r11
 39c:	8e b9       	out	0x0e, r24	; 14
		#ifndef DIRECT_JOYSTICK
		if (comm_lost_count > 50)
 39e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 3a2:	83 33       	cpi	r24, 0x33	; 51
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <main+0x94>
		{
			comm_lost_count = 0;
 3a6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <comm_lost_count>
			mirf_config();
 3aa:	0e 94 cf 03 	call	0x79e	; 0x79e <mirf_config>
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 3ae:	19 82       	std	Y+1, r1	; 0x01
 3b0:	18 82       	st	Y, r1
 3b2:	0b c0       	rjmp	.+22     	; 0x3ca <main+0xb0>
		}

		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
		{
			if (TCNT3 > 1500) // timeout of one second
 3b4:	88 81       	ld	r24, Y
 3b6:	99 81       	ldd	r25, Y+1	; 0x01
 3b8:	8d 3d       	cpi	r24, 0xDD	; 221
 3ba:	95 40       	sbci	r25, 0x05	; 5
 3bc:	30 f0       	brcs	.+12     	; 0x3ca <main+0xb0>
			{
				comm_lost_count++;
 3be:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
 3c8:	0c c1       	rjmp	.+536    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
			comm_lost_count = 0;
			mirf_config();
		}

		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
 3ca:	0e 94 95 03 	call	0x72a	; 0x72a <mirf_data_ready>
 3ce:	88 23       	and	r24, r24
 3d0:	89 f3       	breq	.-30     	; 0x3b4 <main+0x9a>
				break;
			}
		}
		#endif
		
		if (comm_lost == 0) // if data has been received (will be 0 by default so in direct joystick mode, we will always enter this if statement
 3d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <comm_lost>
 3d6:	81 11       	cpse	r24, r1
 3d8:	04 c1       	rjmp	.+520    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
		{
			#ifndef DIRECT_JOYSTICK
			mirf_get_data(buffer); // get the data, put it in buffer
 3da:	8b e1       	ldi	r24, 0x1B	; 27
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 0c 04 	call	0x818	; 0x818 <mirf_get_data>
		
			if (buffer[0] == GET_LAT) // if the command is latitude request
 3e2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <buffer>
 3e6:	91 34       	cpi	r25, 0x41	; 65
 3e8:	31 f5       	brne	.+76     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				buffer[0] = lat_deg;
 3ea:	eb e1       	ldi	r30, 0x1B	; 27
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <lat_deg>
 3f2:	80 83       	st	Z, r24
				buffer[1] = lat_min;
 3f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lat_min>
 3f8:	81 83       	std	Z+1, r24	; 0x01
				buffer[2] = lat_sec;
 3fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lat_sec>
 3fe:	82 83       	std	Z+2, r24	; 0x02
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 400:	19 82       	std	Y+1, r1	; 0x01
 402:	18 82       	st	Y, r1
			{
				buffer[0] = lat_deg;
				buffer[1] = lat_min;
				buffer[2] = lat_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	cf 01       	movw	r24, r30
 408:	0e 94 4f 04 	call	0x89e	; 0x89e <mirf_send>
				while (!mirf_data_sent())
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				{
					if (TCNT3 > 1500) // timeout of one second
 40e:	88 81       	ld	r24, Y
 410:	99 81       	ldd	r25, Y+1	; 0x01
 412:	8d 3d       	cpi	r24, 0xDD	; 221
 414:	95 40       	sbci	r25, 0x05	; 5
 416:	40 f0       	brcs	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					{
						comm_lost_count++;
 418:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
						comm_lost = 1;
 422:	a0 92 15 01 	sts	0x0115, r10	; 0x800115 <comm_lost>
						break;
 426:	04 c0       	rjmp	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
				buffer[0] = lat_deg;
				buffer[1] = lat_min;
				buffer[2] = lat_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
				while (!mirf_data_sent())
 428:	0e 94 a2 03 	call	0x744	; 0x744 <mirf_data_sent>
 42c:	88 23       	and	r24, r24
 42e:	79 f3       	breq	.-34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
						comm_lost = 1;
						break;
					}
				}
				
				set_RX_MODE(); // listen for new data
 430:	0e 94 be 03 	call	0x77c	; 0x77c <set_RX_MODE>
 434:	d8 c0       	rjmp	.+432    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				
			}
			else if (buffer[0] == GET_LON) // if the command is longitude request
 436:	9f 34       	cpi	r25, 0x4F	; 79
 438:	91 f5       	brne	.+100    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				buffer[0] = lon_deg;
 43a:	eb e1       	ldi	r30, 0x1B	; 27
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lon_deg>
 442:	80 83       	st	Z, r24
				buffer[1] = lon_min;
 444:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lon_min>
 448:	81 83       	std	Z+1, r24	; 0x01
				buffer[2] = lon_sec;
 44a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 44e:	82 83       	std	Z+2, r24	; 0x02
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 450:	19 82       	std	Y+1, r1	; 0x01
 452:	18 82       	st	Y, r1
			{
				buffer[0] = lon_deg;
				buffer[1] = lon_min;
				buffer[2] = lon_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	cf 01       	movw	r24, r30
 458:	0e 94 4f 04 	call	0x89e	; 0x89e <mirf_send>
				while (!mirf_data_sent())
 45c:	0d c0       	rjmp	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				{
					if (TCNT3 > 1500) // timeout of one second
 45e:	88 81       	ld	r24, Y
 460:	99 81       	ldd	r25, Y+1	; 0x01
 462:	8d 3d       	cpi	r24, 0xDD	; 221
 464:	95 40       	sbci	r25, 0x05	; 5
 466:	40 f0       	brcs	.+16     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					{
						comm_lost_count++;
 468:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <comm_lost_count>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <comm_lost_count>
						comm_lost = 1;
 472:	a0 92 15 01 	sts	0x0115, r10	; 0x800115 <comm_lost>
						break;
 476:	04 c0       	rjmp	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				buffer[0] = lon_deg;
				buffer[1] = lon_min;
				buffer[2] = lon_sec;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
				while (!mirf_data_sent())
 478:	0e 94 a2 03 	call	0x744	; 0x744 <mirf_data_sent>
 47c:	88 23       	and	r24, r24
 47e:	79 f3       	breq	.-34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
						comm_lost = 1;
						break;
					}
				}
				
				lat_deg = 0;
 480:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <lat_deg>
				lat_min = 0;
 484:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <lat_min>
				lat_sec = 0;
 488:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lat_sec>
				lon_deg = 0;
 48c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lon_deg>
				lon_min = 0;
 490:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lon_min>
				lon_sec = 0;		
 494:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
				
				set_RX_MODE(); // listen for new data
 498:	0e 94 be 03 	call	0x77c	; 0x77c <set_RX_MODE>
 49c:	a4 c0       	rjmp	.+328    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				
			}
			else // otherwise, the command is for motor control (default command)
			{
				mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
 49e:	eb e1       	ldi	r30, 0x1B	; 27
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	81 81       	ldd	r24, Z+1	; 0x01
 4a4:	c9 2e       	mov	r12, r25
 4a6:	99 0f       	add	r25, r25
 4a8:	dd 08       	sbc	r13, r13
 4aa:	dc 2c       	mov	r13, r12
 4ac:	cc 24       	eor	r12, r12
 4ae:	c8 2a       	or	r12, r24
 4b0:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <mtr_cmd+0x1>
 4b4:	c0 92 19 01 	sts	0x0119, r12	; 0x800119 <mtr_cmd>
				srv_cmd = buffer[2];
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	08 2e       	mov	r0, r24
 4bc:	00 0c       	add	r0, r0
 4be:	99 0b       	sbc	r25, r25
 			if ((srv_cmd < 5) && (srv_cmd > -5))
 			srv_cmd = 0;
			#endif
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
 4c0:	85 31       	cpi	r24, 0x15	; 21
 4c2:	91 05       	cpc	r25, r1
 4c4:	2c f0       	brlt	.+10     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
				srv_cmd = 20;
 4c6:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <srv_cmd+0x1>
 4ca:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <srv_cmd>
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			else if (srv_cmd < -20)
 4d0:	8c 3e       	cpi	r24, 0xEC	; 236
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	92 07       	cpc	r25, r18
 4d6:	2c f0       	brlt	.+10     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				
			}
			else // otherwise, the command is for motor control (default command)
			{
				mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
				srv_cmd = buffer[2];
 4d8:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <srv_cmd+0x1>
 4dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <srv_cmd>
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			
			/* scaling and deadband */
			 if (srv_cmd > 20)
				srv_cmd = 20;
			else if (srv_cmd < -20)
				srv_cmd = -20;
 4e2:	f0 92 18 01 	sts	0x0118, r15	; 0x800118 <srv_cmd+0x1>
 4e6:	e0 92 17 01 	sts	0x0117, r14	; 0x800117 <srv_cmd>
			srv_cmd = 0.75*srv_cmd + .25*old_srv_cmd;
 4ea:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <srv_cmd>
 4ee:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <srv_cmd+0x1>
 4f2:	07 2e       	mov	r0, r23
 4f4:	00 0c       	add	r0, r0
 4f6:	88 0b       	sbc	r24, r24
 4f8:	99 0b       	sbc	r25, r25
 4fa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e4       	ldi	r20, 0x40	; 64
 504:	5f e3       	ldi	r21, 0x3F	; 63
 506:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3>
 50a:	2b 01       	movw	r4, r22
 50c:	3c 01       	movw	r6, r24
 50e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <old_srv_cmd>
 512:	06 2e       	mov	r0, r22
 514:	00 0c       	add	r0, r0
 516:	77 0b       	sbc	r23, r23
 518:	88 0b       	sbc	r24, r24
 51a:	99 0b       	sbc	r25, r25
 51c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	40 e8       	ldi	r20, 0x80	; 128
 526:	5e e3       	ldi	r21, 0x3E	; 62
 528:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3>
 52c:	9b 01       	movw	r18, r22
 52e:	ac 01       	movw	r20, r24
 530:	c3 01       	movw	r24, r6
 532:	b2 01       	movw	r22, r4
 534:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__addsf3>
 538:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixsfsi>
 53c:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <srv_cmd>
 540:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <srv_cmd+0x1>
			old_srv_cmd = srv_cmd;
 544:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <old_srv_cmd>
			
			if (abs(mtr_cmd) < 100) // deadband (mtr_cmd is from -1000 to 1000)
 548:	83 e6       	ldi	r24, 0x63	; 99
 54a:	c8 0e       	add	r12, r24
 54c:	d1 1c       	adc	r13, r1
 54e:	97 ec       	ldi	r25, 0xC7	; 199
 550:	c9 16       	cp	r12, r25
 552:	d1 04       	cpc	r13, r1
 554:	38 f4       	brcc	.+14     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			{
				stop_TMR1A_pwm();
 556:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
				stop_TMR1B_pwm();
 55a:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
				motor_off();
 55e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <motor_off>
 562:	25 c0       	rjmp	.+74     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			}
			else  
			{
				motor_on();
 564:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <motor_on>
				if (mtr_cmd > 0 ) // forward direction
 568:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 56c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 570:	18 16       	cp	r1, r24
 572:	19 06       	cpc	r1, r25
 574:	5c f4       	brge	.+22     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
				{
					stop_TMR1B_pwm();
 576:	0e 94 df 00 	call	0x1be	; 0x1be <stop_TMR1B_pwm>
					start_TMR1A_pwm();
 57a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_TMR1A_pwm>
					set_TMR1A_duty_cycle(mtr_cmd);
 57e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 582:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 586:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1A_duty_cycle>
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
				}
				else if (mtr_cmd < 0)  // backward direction
 58c:	99 23       	and	r25, r25
 58e:	7c f4       	brge	.+30     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
				{
					stop_TMR1A_pwm();
 590:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop_TMR1A_pwm>
					start_TMR1B_pwm();
 594:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <start_TMR1B_pwm>
					set_TMR1B_duty_cycle(abs(mtr_cmd));
 598:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mtr_cmd>
 59c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mtr_cmd+0x1>
 5a0:	99 23       	and	r25, r25
 5a2:	1c f4       	brge	.+6      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5a4:	91 95       	neg	r25
 5a6:	81 95       	neg	r24
 5a8:	91 09       	sbc	r25, r1
 5aa:	0e 94 ba 00 	call	0x174	; 0x174 <set_TMR1B_duty_cycle>

}
void move_servo(float angle)
{ 
	angle = 46 + angle*.355;
	OCR0A = (uint8_t)angle;
 5ae:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <srv_cmd>
 5b2:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <srv_cmd+0x1>
 5b6:	07 2e       	mov	r0, r23
 5b8:	00 0c       	add	r0, r0
 5ba:	88 0b       	sbc	r24, r24
 5bc:	99 0b       	sbc	r25, r25
 5be:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 5c2:	2f e8       	ldi	r18, 0x8F	; 143
 5c4:	32 ec       	ldi	r19, 0xC2	; 194
 5c6:	45 eb       	ldi	r20, 0xB5	; 181
 5c8:	5e e3       	ldi	r21, 0x3E	; 62
 5ca:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3>
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	48 e3       	ldi	r20, 0x38	; 56
 5d4:	52 e4       	ldi	r21, 0x42	; 66
 5d6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__addsf3>
 5da:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
 5de:	67 bd       	out	0x27, r22	; 39
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
			}
			#endif
 		}
		#ifndef DIRECT_JOYSTICK
 		else
 			comm_lost = 0;
 5e2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <comm_lost>
		#endif
		
		#ifdef GPS_ON	 
		if (gps_string_ready) // if a full gps sentence has been received, parse it
 5e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <gps_string_ready>
 5ea:	88 23       	and	r24, r24
 5ec:	31 f0       	breq	.+12     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
		{
			gps_string_ready = 0;
 5ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <gps_string_ready>
 			cli();
 5f2:	f8 94       	cli
 				parse_GPMRC(); // parse GPS string received by UASRT1 RX interrupt
 5f4:	0e 94 39 01 	call	0x272	; 0x272 <parse_GPMRC>
			sei();
 5f8:	78 94       	sei
 5fa:	8f e3       	ldi	r24, 0x3F	; 63
 5fc:	9c e9       	ldi	r25, 0x9C	; 156
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 602:	00 c0       	rjmp	.+0      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 604:	00 00       	nop
 606:	c8 ce       	rjmp	.-624    	; 0x398 <main+0x7e>

00000608 <__vector_20>:
#ifdef GPS_ON
//&&&&&&&&&&&&&&&&&&&&&&& USART1 ISR for GPS &&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a*hh
ISR(USART0_RX_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	rcv_string[k_RX] = UDR0;
 620:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 624:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	e2 5e       	subi	r30, 0xE2	; 226
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	80 83       	st	Z, r24
	
	if (rcv_string[k_RX] == '$')
 630:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	e2 5e       	subi	r30, 0xE2	; 226
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	80 81       	ld	r24, Z
 63c:	84 32       	cpi	r24, 0x24	; 36
 63e:	19 f4       	brne	.+6      	; 0x646 <__vector_20+0x3e>
	HEADER = 1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <HEADER>
	
	if (HEADER)
 646:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <HEADER>
 64a:	88 23       	and	r24, r24
 64c:	11 f1       	breq	.+68     	; 0x692 <__vector_20+0x8a>
	{
		if (rcv_string[k_RX] == ',')
 64e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	e2 5e       	subi	r30, 0xE2	; 226
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	80 81       	ld	r24, Z
 65a:	8c 32       	cpi	r24, 0x2C	; 44
 65c:	a9 f4       	brne	.+42     	; 0x688 <__vector_20+0x80>
		{
			if ( (rcv_string[3] == 'R') && (rcv_string[4] == 'M') && (rcv_string[5] == 'C'))
 65e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rcv_string+0x3>
 662:	82 35       	cpi	r24, 0x52	; 82
 664:	61 f4       	brne	.+24     	; 0x67e <__vector_20+0x76>
 666:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rcv_string+0x4>
 66a:	8d 34       	cpi	r24, 0x4D	; 77
 66c:	41 f4       	brne	.+16     	; 0x67e <__vector_20+0x76>
 66e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rcv_string+0x5>
 672:	83 34       	cpi	r24, 0x43	; 67
 674:	21 f4       	brne	.+8      	; 0x67e <__vector_20+0x76>
			{
				GPRMC_SENTENCE = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <GPRMC_SENTENCE>
 67c:	02 c0       	rjmp	.+4      	; 0x682 <__vector_20+0x7a>
			}
			else
			k_RX = 0;
 67e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <k_RX>
			HEADER = 0;
 682:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <HEADER>
 686:	05 c0       	rjmp	.+10     	; 0x692 <__vector_20+0x8a>
		}
		else
		k_RX++;
 688:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <k_RX>
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <k_RX>
	}
	
	if (GPRMC_SENTENCE)
 692:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <GPRMC_SENTENCE>
 696:	88 23       	and	r24, r24
 698:	a9 f1       	breq	.+106    	; 0x704 <__vector_20+0xfc>
	{
		if (rcv_string[k_RX] == '*')
 69a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <k_RX>
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	e2 5e       	subi	r30, 0xE2	; 226
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 81       	ld	r24, Z
 6a6:	8a 32       	cpi	r24, 0x2A	; 42
 6a8:	41 f5       	brne	.+80     	; 0x6fa <__vector_20+0xf2>
 6aa:	e1 e3       	ldi	r30, 0x31	; 49
 6ac:	f1 e0       	ldi	r31, 0x01	; 1
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
			{
				lat_buf[j] = rcv_string[i];
 6b2:	21 91       	ld	r18, Z+
 6b4:	dc 01       	movw	r26, r24
 6b6:	a2 5a       	subi	r26, 0xA2	; 162
 6b8:	be 4f       	sbci	r27, 0xFE	; 254
 6ba:	2c 93       	st	X, r18
				j++;
 6bc:	01 96       	adiw	r24, 0x01	; 1
	if (GPRMC_SENTENCE)
	{
		if (rcv_string[k_RX] == '*')
		{
			int j = 0;
			for (int i = 19; i < 26; i++)
 6be:	87 30       	cpi	r24, 0x07	; 7
 6c0:	91 05       	cpc	r25, r1
 6c2:	b9 f7       	brne	.-18     	; 0x6b2 <__vector_20+0xaa>
			{
				lat_buf[j] = rcv_string[i];
				j++;
			}
			lat_buf[j] = NL;
 6c4:	8a e0       	ldi	r24, 0x0A	; 10
 6c6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lat_buf+0x7>
 6ca:	ef e3       	ldi	r30, 0x3F	; 63
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
			
			
			j = 0;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
			for (int i = 33; i <40; i++)
			{
				lon_buf[j] = rcv_string[i];
 6d2:	21 91       	ld	r18, Z+
 6d4:	dc 01       	movw	r26, r24
 6d6:	a9 59       	subi	r26, 0x99	; 153
 6d8:	be 4f       	sbci	r27, 0xFE	; 254
 6da:	2c 93       	st	X, r18
				j++;
 6dc:	01 96       	adiw	r24, 0x01	; 1
			}
			lat_buf[j] = NL;
			
			
			j = 0;
			for (int i = 33; i <40; i++)
 6de:	87 30       	cpi	r24, 0x07	; 7
 6e0:	91 05       	cpc	r25, r1
 6e2:	b9 f7       	brne	.-18     	; 0x6d2 <__vector_20+0xca>
			{
				lon_buf[j] = rcv_string[i];
				j++;
			}
			lon_buf[j] = NL;
 6e4:	8a e0       	ldi	r24, 0x0A	; 10
 6e6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <lon_buf+0x7>
			
			GPRMC_SENTENCE = 0;
 6ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <GPRMC_SENTENCE>
			k_RX = 0;
 6ee:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <k_RX>
			gps_string_ready = 1;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <gps_string_ready>
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <__vector_20+0xfc>
		}
		else
		k_RX++;
 6fa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <k_RX>
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
 700:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <k_RX>
	}
}
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 71c:	3f 9a       	sbi	0x07, 7	; 7
 71e:	56 9a       	sbi	0x0a, 6	; 10
 720:	47 98       	cbi	0x08, 7	; 8
 722:	5e 9a       	sbi	0x0b, 6	; 11
 724:	0e 94 77 04 	call	0x8ee	; 0x8ee <spi1_master_initialize>
 728:	08 95       	ret

0000072a <mirf_data_ready>:
 72a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <PTX>
 72e:	81 11       	cpse	r24, r1
 730:	07 c0       	rjmp	.+14     	; 0x740 <mirf_data_ready+0x16>
 732:	5e 98       	cbi	0x0b, 6	; 11
 734:	8f ef       	ldi	r24, 0xFF	; 255
 736:	0e 94 86 04 	call	0x90c	; 0x90c <spi1_exchange_char>
 73a:	5e 9a       	sbi	0x0b, 6	; 11
 73c:	80 74       	andi	r24, 0x40	; 64
 73e:	08 95       	ret
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret

00000744 <mirf_data_sent>:
 744:	5e 98       	cbi	0x0b, 6	; 11
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	0e 94 86 04 	call	0x90c	; 0x90c <spi1_exchange_char>
 74c:	5e 9a       	sbi	0x0b, 6	; 11
 74e:	80 72       	andi	r24, 0x20	; 32
 750:	08 95       	ret

00000752 <mirf_config_register>:
 752:	cf 93       	push	r28
 754:	c6 2f       	mov	r28, r22
 756:	5e 98       	cbi	0x0b, 6	; 11
 758:	8f 71       	andi	r24, 0x1F	; 31
 75a:	80 62       	ori	r24, 0x20	; 32
 75c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
 760:	82 e4       	ldi	r24, 0x42	; 66
 762:	8a 95       	dec	r24
 764:	f1 f7       	brne	.-4      	; 0x762 <mirf_config_register+0x10>
 766:	00 c0       	rjmp	.+0      	; 0x768 <mirf_config_register+0x16>
 768:	8c 2f       	mov	r24, r28
 76a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
 76e:	5e 9a       	sbi	0x0b, 6	; 11
 770:	82 e4       	ldi	r24, 0x42	; 66
 772:	8a 95       	dec	r24
 774:	f1 f7       	brne	.-4      	; 0x772 <mirf_config_register+0x20>
 776:	00 c0       	rjmp	.+0      	; 0x778 <mirf_config_register+0x26>
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <set_RX_MODE>:
 77c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <PTX>
 780:	60 e7       	ldi	r22, 0x70	; 112
 782:	87 e0       	ldi	r24, 0x07	; 7
 784:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 788:	5e 98       	cbi	0x0b, 6	; 11
 78a:	81 ee       	ldi	r24, 0xE1	; 225
 78c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
 790:	5e 9a       	sbi	0x0b, 6	; 11
 792:	6b e5       	ldi	r22, 0x5B	; 91
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 79a:	47 9a       	sbi	0x08, 7	; 8
 79c:	08 95       	ret

0000079e <mirf_config>:
 79e:	6c e6       	ldi	r22, 0x6C	; 108
 7a0:	85 e0       	ldi	r24, 0x05	; 5
 7a2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	81 e1       	ldi	r24, 0x11	; 17
 7aa:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	82 e1       	ldi	r24, 0x12	; 18
 7b2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	83 e1       	ldi	r24, 0x13	; 19
 7ba:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	84 e1       	ldi	r24, 0x14	; 20
 7c2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	85 e1       	ldi	r24, 0x15	; 21
 7ca:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	86 e1       	ldi	r24, 0x16	; 22
 7d2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7d6:	66 e2       	ldi	r22, 0x26	; 38
 7d8:	86 e0       	ldi	r24, 0x06	; 6
 7da:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7de:	63 e0       	ldi	r22, 0x03	; 3
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7e6:	63 e0       	ldi	r22, 0x03	; 3
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7ee:	6f e4       	ldi	r22, 0x4F	; 79
 7f0:	84 e0       	ldi	r24, 0x04	; 4
 7f2:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 7f6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <PTX>
 7fa:	60 e7       	ldi	r22, 0x70	; 112
 7fc:	87 e0       	ldi	r24, 0x07	; 7
 7fe:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 802:	5e 98       	cbi	0x0b, 6	; 11
 804:	81 ee       	ldi	r24, 0xE1	; 225
 806:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
 80a:	5e 9a       	sbi	0x0b, 6	; 11
 80c:	6b e5       	ldi	r22, 0x5B	; 91
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 814:	47 9a       	sbi	0x08, 7	; 8
 816:	08 95       	ret

00000818 <mirf_get_data>:
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	ec 01       	movw	r28, r24
 81e:	5e 98       	cbi	0x0b, 6	; 11
 820:	81 e6       	ldi	r24, 0x61	; 97
 822:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
 826:	43 e0       	ldi	r20, 0x03	; 3
 828:	be 01       	movw	r22, r28
 82a:	ce 01       	movw	r24, r28
 82c:	0e 94 a7 04 	call	0x94e	; 0x94e <spi1_exchange_bytes>
 830:	5e 9a       	sbi	0x0b, 6	; 11
 832:	60 e4       	ldi	r22, 0x40	; 64
 834:	87 e0       	ldi	r24, 0x07	; 7
 836:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	eb 01       	movw	r28, r22
 848:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 84a:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 84c:	8f 71       	andi	r24, 0x1F	; 31
 84e:	80 62       	ori	r24, 0x20	; 32
 850:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
	spi1_send_bytes(value, len);
 854:	61 2f       	mov	r22, r17
 856:	ce 01       	movw	r24, r28
 858:	0e 94 90 04 	call	0x920	; 0x920 <spi1_send_bytes>
	mirf_CSN_hi;
 85c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 85e:	82 e4       	ldi	r24, 0x42	; 66
 860:	8a 95       	dec	r24
 862:	f1 f7       	brne	.-4      	; 0x860 <mirf_write_register+0x20>
 864:	00 c0       	rjmp	.+0      	; 0x866 <mirf_write_register+0x26>
	_delay_us(25);
	
}
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	08 95       	ret

0000086e <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 86e:	47 98       	cbi	0x08, 7	; 8
	mirf_write_register(RX_ADDR_P1, adr, 5);
 870:	45 e0       	ldi	r20, 0x05	; 5
 872:	bc 01       	movw	r22, r24
 874:	8b e0       	ldi	r24, 0x0B	; 11
 876:	0e 94 20 04 	call	0x840	; 0x840 <mirf_write_register>
	mirf_CE_hi;
 87a:	47 9a       	sbi	0x08, 7	; 8
 87c:	08 95       	ret

0000087e <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 884:	45 e0       	ldi	r20, 0x05	; 5
 886:	bc 01       	movw	r22, r24
 888:	8a e0       	ldi	r24, 0x0A	; 10
 88a:	0e 94 20 04 	call	0x840	; 0x840 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 88e:	45 e0       	ldi	r20, 0x05	; 5
 890:	be 01       	movw	r22, r28
 892:	80 e1       	ldi	r24, 0x10	; 16
 894:	0e 94 20 04 	call	0x840	; 0x840 <mirf_write_register>
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	08 95       	ret

0000089e <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 89e:	1f 93       	push	r17
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	ec 01       	movw	r28, r24
 8a6:	16 2f       	mov	r17, r22
// 	while (PTX)
// 	{
// 		println_0("while(PTX)")	;
// 	} // Wait until last packet is send

	mirf_CE_lo;
 8a8:	47 98       	cbi	0x08, 7	; 8

	PTX = 1;    // Set to transmitter mode
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 8b0:	6a e5       	ldi	r22, 0x5A	; 90
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 8b8:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 8ba:	81 ee       	ldi	r24, 0xE1	; 225
 8bc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 8c0:	5e 9a       	sbi	0x0b, 6	; 11
 8c2:	82 e4       	ldi	r24, 0x42	; 66
 8c4:	8a 95       	dec	r24
 8c6:	f1 f7       	brne	.-4      	; 0x8c4 <mirf_send+0x26>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <mirf_send+0x2c>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8ca:	60 e7       	ldi	r22, 0x70	; 112
 8cc:	87 e0       	ldi	r24, 0x07	; 7
 8ce:	0e 94 a9 03 	call	0x752	; 0x752 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 8d2:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 8d4:	80 ea       	ldi	r24, 0xA0	; 160
 8d6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 8da:	61 2f       	mov	r22, r17
 8dc:	ce 01       	movw	r24, r28
 8de:	0e 94 90 04 	call	0x920	; 0x920 <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 8e2:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 8e4:	47 9a       	sbi	0x08, 7	; 8
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	08 95       	ret

000008ee <spi1_master_initialize>:
 8ee:	6b 9a       	sbi	0x0d, 3	; 13
 8f0:	57 9a       	sbi	0x0a, 7	; 10
 8f2:	56 9a       	sbi	0x0a, 6	; 10
 8f4:	82 e5       	ldi	r24, 0x52	; 82
 8f6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 8fa:	08 95       	ret

000008fc <spi1_send_char>:
 8fc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 900:	ed ea       	ldi	r30, 0xAD	; 173
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	88 23       	and	r24, r24
 908:	ec f7       	brge	.-6      	; 0x904 <__stack+0x5>
 90a:	08 95       	ret

0000090c <spi1_exchange_char>:
 90c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 910:	ed ea       	ldi	r30, 0xAD	; 173
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	88 23       	and	r24, r24
 918:	ec f7       	brge	.-6      	; 0x914 <spi1_exchange_char+0x8>
 91a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 91e:	08 95       	ret

00000920 <spi1_send_bytes>:
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	66 23       	and	r22, r22
 926:	81 f0       	breq	.+32     	; 0x948 <spi1_send_bytes+0x28>
 928:	dc 01       	movw	r26, r24
 92a:	9c 01       	movw	r18, r24
 92c:	26 0f       	add	r18, r22
 92e:	31 1d       	adc	r19, r1
 930:	ce ea       	ldi	r28, 0xAE	; 174
 932:	d0 e0       	ldi	r29, 0x00	; 0
 934:	ed ea       	ldi	r30, 0xAD	; 173
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	9d 91       	ld	r25, X+
 93a:	98 83       	st	Y, r25
 93c:	90 81       	ld	r25, Z
 93e:	99 23       	and	r25, r25
 940:	ec f7       	brge	.-6      	; 0x93c <spi1_send_bytes+0x1c>
 942:	a2 17       	cp	r26, r18
 944:	b3 07       	cpc	r27, r19
 946:	c1 f7       	brne	.-16     	; 0x938 <spi1_send_bytes+0x18>
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	08 95       	ret

0000094e <spi1_exchange_bytes>:
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	44 23       	and	r20, r20
 958:	c9 f0       	breq	.+50     	; 0x98c <spi1_exchange_bytes+0x3e>
 95a:	dc 01       	movw	r26, r24
 95c:	06 2f       	mov	r16, r22
 95e:	17 2f       	mov	r17, r23
 960:	9c 01       	movw	r18, r24
 962:	24 0f       	add	r18, r20
 964:	31 1d       	adc	r19, r1
 966:	a9 01       	movw	r20, r18
 968:	2e ea       	ldi	r18, 0xAE	; 174
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	ed ea       	ldi	r30, 0xAD	; 173
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	9d 91       	ld	r25, X+
 972:	e9 01       	movw	r28, r18
 974:	98 83       	st	Y, r25
 976:	90 81       	ld	r25, Z
 978:	99 23       	and	r25, r25
 97a:	ec f7       	brge	.-6      	; 0x976 <spi1_exchange_bytes+0x28>
 97c:	e9 01       	movw	r28, r18
 97e:	98 81       	ld	r25, Y
 980:	e8 01       	movw	r28, r16
 982:	99 93       	st	Y+, r25
 984:	8e 01       	movw	r16, r28
 986:	a4 17       	cp	r26, r20
 988:	b5 07       	cpc	r27, r21
 98a:	91 f7       	brne	.-28     	; 0x970 <spi1_exchange_bytes+0x22>
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	08 95       	ret

00000996 <setup_usart0>:
}


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 996:	98 e9       	ldi	r25, 0x98	; 152
 998:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 99c:	96 e0       	ldi	r25, 0x06	; 6
 99e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 9a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 9a6:	08 95       	ret

000009a8 <__subsf3>:
 9a8:	50 58       	subi	r21, 0x80	; 128

000009aa <__addsf3>:
 9aa:	bb 27       	eor	r27, r27
 9ac:	aa 27       	eor	r26, r26
 9ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3x>
 9b2:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_round>
 9b6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_pscA>
 9ba:	38 f0       	brcs	.+14     	; 0x9ca <__addsf3+0x20>
 9bc:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscB>
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__addsf3+0x20>
 9c2:	39 f4       	brne	.+14     	; 0x9d2 <__addsf3+0x28>
 9c4:	9f 3f       	cpi	r25, 0xFF	; 255
 9c6:	19 f4       	brne	.+6      	; 0x9ce <__addsf3+0x24>
 9c8:	26 f4       	brtc	.+8      	; 0x9d2 <__addsf3+0x28>
 9ca:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 9ce:	0e f4       	brtc	.+2      	; 0x9d2 <__addsf3+0x28>
 9d0:	e0 95       	com	r30
 9d2:	e7 fb       	bst	r30, 7
 9d4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>

000009d8 <__addsf3x>:
 9d8:	e9 2f       	mov	r30, r25
 9da:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_split3>
 9de:	58 f3       	brcs	.-42     	; 0x9b6 <__addsf3+0xc>
 9e0:	ba 17       	cp	r27, r26
 9e2:	62 07       	cpc	r22, r18
 9e4:	73 07       	cpc	r23, r19
 9e6:	84 07       	cpc	r24, r20
 9e8:	95 07       	cpc	r25, r21
 9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__addsf3x+0x1c>
 9ec:	79 f4       	brne	.+30     	; 0xa0c <__addsf3x+0x34>
 9ee:	a6 f5       	brtc	.+104    	; 0xa58 <__addsf3x+0x80>
 9f0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_zero>
 9f4:	0e f4       	brtc	.+2      	; 0x9f8 <__addsf3x+0x20>
 9f6:	e0 95       	com	r30
 9f8:	0b 2e       	mov	r0, r27
 9fa:	ba 2f       	mov	r27, r26
 9fc:	a0 2d       	mov	r26, r0
 9fe:	0b 01       	movw	r0, r22
 a00:	b9 01       	movw	r22, r18
 a02:	90 01       	movw	r18, r0
 a04:	0c 01       	movw	r0, r24
 a06:	ca 01       	movw	r24, r20
 a08:	a0 01       	movw	r20, r0
 a0a:	11 24       	eor	r1, r1
 a0c:	ff 27       	eor	r31, r31
 a0e:	59 1b       	sub	r21, r25
 a10:	99 f0       	breq	.+38     	; 0xa38 <__addsf3x+0x60>
 a12:	59 3f       	cpi	r21, 0xF9	; 249
 a14:	50 f4       	brcc	.+20     	; 0xa2a <__addsf3x+0x52>
 a16:	50 3e       	cpi	r21, 0xE0	; 224
 a18:	68 f1       	brcs	.+90     	; 0xa74 <__addsf3x+0x9c>
 a1a:	1a 16       	cp	r1, r26
 a1c:	f0 40       	sbci	r31, 0x00	; 0
 a1e:	a2 2f       	mov	r26, r18
 a20:	23 2f       	mov	r18, r19
 a22:	34 2f       	mov	r19, r20
 a24:	44 27       	eor	r20, r20
 a26:	58 5f       	subi	r21, 0xF8	; 248
 a28:	f3 cf       	rjmp	.-26     	; 0xa10 <__addsf3x+0x38>
 a2a:	46 95       	lsr	r20
 a2c:	37 95       	ror	r19
 a2e:	27 95       	ror	r18
 a30:	a7 95       	ror	r26
 a32:	f0 40       	sbci	r31, 0x00	; 0
 a34:	53 95       	inc	r21
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__addsf3x+0x52>
 a38:	7e f4       	brtc	.+30     	; 0xa58 <__addsf3x+0x80>
 a3a:	1f 16       	cp	r1, r31
 a3c:	ba 0b       	sbc	r27, r26
 a3e:	62 0b       	sbc	r22, r18
 a40:	73 0b       	sbc	r23, r19
 a42:	84 0b       	sbc	r24, r20
 a44:	ba f0       	brmi	.+46     	; 0xa74 <__addsf3x+0x9c>
 a46:	91 50       	subi	r25, 0x01	; 1
 a48:	a1 f0       	breq	.+40     	; 0xa72 <__addsf3x+0x9a>
 a4a:	ff 0f       	add	r31, r31
 a4c:	bb 1f       	adc	r27, r27
 a4e:	66 1f       	adc	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	c2 f7       	brpl	.-16     	; 0xa46 <__addsf3x+0x6e>
 a56:	0e c0       	rjmp	.+28     	; 0xa74 <__addsf3x+0x9c>
 a58:	ba 0f       	add	r27, r26
 a5a:	62 1f       	adc	r22, r18
 a5c:	73 1f       	adc	r23, r19
 a5e:	84 1f       	adc	r24, r20
 a60:	48 f4       	brcc	.+18     	; 0xa74 <__addsf3x+0x9c>
 a62:	87 95       	ror	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	b7 95       	ror	r27
 a6a:	f7 95       	ror	r31
 a6c:	9e 3f       	cpi	r25, 0xFE	; 254
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0x9a>
 a70:	b0 cf       	rjmp	.-160    	; 0x9d2 <__addsf3+0x28>
 a72:	93 95       	inc	r25
 a74:	88 0f       	add	r24, r24
 a76:	08 f0       	brcs	.+2      	; 0xa7a <__addsf3x+0xa2>
 a78:	99 27       	eor	r25, r25
 a7a:	ee 0f       	add	r30, r30
 a7c:	97 95       	ror	r25
 a7e:	87 95       	ror	r24
 a80:	08 95       	ret

00000a82 <__fixsfsi>:
 a82:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
 a86:	68 94       	set
 a88:	b1 11       	cpse	r27, r1
 a8a:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_szero>
 a8e:	08 95       	ret

00000a90 <__fixunssfsi>:
 a90:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_splitA>
 a94:	88 f0       	brcs	.+34     	; 0xab8 <__fixunssfsi+0x28>
 a96:	9f 57       	subi	r25, 0x7F	; 127
 a98:	98 f0       	brcs	.+38     	; 0xac0 <__fixunssfsi+0x30>
 a9a:	b9 2f       	mov	r27, r25
 a9c:	99 27       	eor	r25, r25
 a9e:	b7 51       	subi	r27, 0x17	; 23
 aa0:	b0 f0       	brcs	.+44     	; 0xace <__fixunssfsi+0x3e>
 aa2:	e1 f0       	breq	.+56     	; 0xadc <__fixunssfsi+0x4c>
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	1a f0       	brmi	.+6      	; 0xab4 <__fixunssfsi+0x24>
 aae:	ba 95       	dec	r27
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__fixunssfsi+0x14>
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <__fixunssfsi+0x4c>
 ab4:	b1 30       	cpi	r27, 0x01	; 1
 ab6:	91 f0       	breq	.+36     	; 0xadc <__fixunssfsi+0x4c>
 ab8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_zero>
 abc:	b1 e0       	ldi	r27, 0x01	; 1
 abe:	08 95       	ret
 ac0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_zero>
 ac4:	67 2f       	mov	r22, r23
 ac6:	78 2f       	mov	r23, r24
 ac8:	88 27       	eor	r24, r24
 aca:	b8 5f       	subi	r27, 0xF8	; 248
 acc:	39 f0       	breq	.+14     	; 0xadc <__fixunssfsi+0x4c>
 ace:	b9 3f       	cpi	r27, 0xF9	; 249
 ad0:	cc f3       	brlt	.-14     	; 0xac4 <__fixunssfsi+0x34>
 ad2:	86 95       	lsr	r24
 ad4:	77 95       	ror	r23
 ad6:	67 95       	ror	r22
 ad8:	b3 95       	inc	r27
 ada:	d9 f7       	brne	.-10     	; 0xad2 <__fixunssfsi+0x42>
 adc:	3e f4       	brtc	.+14     	; 0xaec <__fixunssfsi+0x5c>
 ade:	90 95       	com	r25
 ae0:	80 95       	com	r24
 ae2:	70 95       	com	r23
 ae4:	61 95       	neg	r22
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	08 95       	ret

00000aee <__floatunsisf>:
 aee:	e8 94       	clt
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <__floatsisf+0x12>

00000af2 <__floatsisf>:
 af2:	97 fb       	bst	r25, 7
 af4:	3e f4       	brtc	.+14     	; 0xb04 <__floatsisf+0x12>
 af6:	90 95       	com	r25
 af8:	80 95       	com	r24
 afa:	70 95       	com	r23
 afc:	61 95       	neg	r22
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	99 23       	and	r25, r25
 b06:	a9 f0       	breq	.+42     	; 0xb32 <__floatsisf+0x40>
 b08:	f9 2f       	mov	r31, r25
 b0a:	96 e9       	ldi	r25, 0x96	; 150
 b0c:	bb 27       	eor	r27, r27
 b0e:	93 95       	inc	r25
 b10:	f6 95       	lsr	r31
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	f1 11       	cpse	r31, r1
 b1c:	f8 cf       	rjmp	.-16     	; 0xb0e <__floatsisf+0x1c>
 b1e:	fa f4       	brpl	.+62     	; 0xb5e <__floatsisf+0x6c>
 b20:	bb 0f       	add	r27, r27
 b22:	11 f4       	brne	.+4      	; 0xb28 <__floatsisf+0x36>
 b24:	60 ff       	sbrs	r22, 0
 b26:	1b c0       	rjmp	.+54     	; 0xb5e <__floatsisf+0x6c>
 b28:	6f 5f       	subi	r22, 0xFF	; 255
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	16 c0       	rjmp	.+44     	; 0xb5e <__floatsisf+0x6c>
 b32:	88 23       	and	r24, r24
 b34:	11 f0       	breq	.+4      	; 0xb3a <__floatsisf+0x48>
 b36:	96 e9       	ldi	r25, 0x96	; 150
 b38:	11 c0       	rjmp	.+34     	; 0xb5c <__floatsisf+0x6a>
 b3a:	77 23       	and	r23, r23
 b3c:	21 f0       	breq	.+8      	; 0xb46 <__floatsisf+0x54>
 b3e:	9e e8       	ldi	r25, 0x8E	; 142
 b40:	87 2f       	mov	r24, r23
 b42:	76 2f       	mov	r23, r22
 b44:	05 c0       	rjmp	.+10     	; 0xb50 <__floatsisf+0x5e>
 b46:	66 23       	and	r22, r22
 b48:	71 f0       	breq	.+28     	; 0xb66 <__floatsisf+0x74>
 b4a:	96 e8       	ldi	r25, 0x86	; 134
 b4c:	86 2f       	mov	r24, r22
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	60 e0       	ldi	r22, 0x00	; 0
 b52:	2a f0       	brmi	.+10     	; 0xb5e <__floatsisf+0x6c>
 b54:	9a 95       	dec	r25
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	da f7       	brpl	.-10     	; 0xb54 <__floatsisf+0x62>
 b5e:	88 0f       	add	r24, r24
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret

00000b68 <__fp_inf>:
 b68:	97 f9       	bld	r25, 7
 b6a:	9f 67       	ori	r25, 0x7F	; 127
 b6c:	80 e8       	ldi	r24, 0x80	; 128
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	08 95       	ret

00000b74 <__fp_nan>:
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	80 ec       	ldi	r24, 0xC0	; 192
 b78:	08 95       	ret

00000b7a <__fp_pscA>:
 b7a:	00 24       	eor	r0, r0
 b7c:	0a 94       	dec	r0
 b7e:	16 16       	cp	r1, r22
 b80:	17 06       	cpc	r1, r23
 b82:	18 06       	cpc	r1, r24
 b84:	09 06       	cpc	r0, r25
 b86:	08 95       	ret

00000b88 <__fp_pscB>:
 b88:	00 24       	eor	r0, r0
 b8a:	0a 94       	dec	r0
 b8c:	12 16       	cp	r1, r18
 b8e:	13 06       	cpc	r1, r19
 b90:	14 06       	cpc	r1, r20
 b92:	05 06       	cpc	r0, r21
 b94:	08 95       	ret

00000b96 <__fp_round>:
 b96:	09 2e       	mov	r0, r25
 b98:	03 94       	inc	r0
 b9a:	00 0c       	add	r0, r0
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0xc>
 b9e:	88 23       	and	r24, r24
 ba0:	52 f0       	brmi	.+20     	; 0xbb6 <__fp_round+0x20>
 ba2:	bb 0f       	add	r27, r27
 ba4:	40 f4       	brcc	.+16     	; 0xbb6 <__fp_round+0x20>
 ba6:	bf 2b       	or	r27, r31
 ba8:	11 f4       	brne	.+4      	; 0xbae <__fp_round+0x18>
 baa:	60 ff       	sbrs	r22, 0
 bac:	04 c0       	rjmp	.+8      	; 0xbb6 <__fp_round+0x20>
 bae:	6f 5f       	subi	r22, 0xFF	; 255
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	08 95       	ret

00000bb8 <__fp_split3>:
 bb8:	57 fd       	sbrc	r21, 7
 bba:	90 58       	subi	r25, 0x80	; 128
 bbc:	44 0f       	add	r20, r20
 bbe:	55 1f       	adc	r21, r21
 bc0:	59 f0       	breq	.+22     	; 0xbd8 <__fp_splitA+0x10>
 bc2:	5f 3f       	cpi	r21, 0xFF	; 255
 bc4:	71 f0       	breq	.+28     	; 0xbe2 <__fp_splitA+0x1a>
 bc6:	47 95       	ror	r20

00000bc8 <__fp_splitA>:
 bc8:	88 0f       	add	r24, r24
 bca:	97 fb       	bst	r25, 7
 bcc:	99 1f       	adc	r25, r25
 bce:	61 f0       	breq	.+24     	; 0xbe8 <__fp_splitA+0x20>
 bd0:	9f 3f       	cpi	r25, 0xFF	; 255
 bd2:	79 f0       	breq	.+30     	; 0xbf2 <__fp_splitA+0x2a>
 bd4:	87 95       	ror	r24
 bd6:	08 95       	ret
 bd8:	12 16       	cp	r1, r18
 bda:	13 06       	cpc	r1, r19
 bdc:	14 06       	cpc	r1, r20
 bde:	55 1f       	adc	r21, r21
 be0:	f2 cf       	rjmp	.-28     	; 0xbc6 <__fp_split3+0xe>
 be2:	46 95       	lsr	r20
 be4:	f1 df       	rcall	.-30     	; 0xbc8 <__fp_splitA>
 be6:	08 c0       	rjmp	.+16     	; 0xbf8 <__fp_splitA+0x30>
 be8:	16 16       	cp	r1, r22
 bea:	17 06       	cpc	r1, r23
 bec:	18 06       	cpc	r1, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	f1 cf       	rjmp	.-30     	; 0xbd4 <__fp_splitA+0xc>
 bf2:	86 95       	lsr	r24
 bf4:	71 05       	cpc	r23, r1
 bf6:	61 05       	cpc	r22, r1
 bf8:	08 94       	sec
 bfa:	08 95       	ret

00000bfc <__fp_zero>:
 bfc:	e8 94       	clt

00000bfe <__fp_szero>:
 bfe:	bb 27       	eor	r27, r27
 c00:	66 27       	eor	r22, r22
 c02:	77 27       	eor	r23, r23
 c04:	cb 01       	movw	r24, r22
 c06:	97 f9       	bld	r25, 7
 c08:	08 95       	ret

00000c0a <__mulsf3>:
 c0a:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3x>
 c0e:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_round>
 c12:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_pscA>
 c16:	38 f0       	brcs	.+14     	; 0xc26 <__mulsf3+0x1c>
 c18:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscB>
 c1c:	20 f0       	brcs	.+8      	; 0xc26 <__mulsf3+0x1c>
 c1e:	95 23       	and	r25, r21
 c20:	11 f0       	breq	.+4      	; 0xc26 <__mulsf3+0x1c>
 c22:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 c26:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 c2a:	11 24       	eor	r1, r1
 c2c:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_szero>

00000c30 <__mulsf3x>:
 c30:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_split3>
 c34:	70 f3       	brcs	.-36     	; 0xc12 <__mulsf3+0x8>

00000c36 <__mulsf3_pse>:
 c36:	95 9f       	mul	r25, r21
 c38:	c1 f3       	breq	.-16     	; 0xc2a <__mulsf3+0x20>
 c3a:	95 0f       	add	r25, r21
 c3c:	50 e0       	ldi	r21, 0x00	; 0
 c3e:	55 1f       	adc	r21, r21
 c40:	62 9f       	mul	r22, r18
 c42:	f0 01       	movw	r30, r0
 c44:	72 9f       	mul	r23, r18
 c46:	bb 27       	eor	r27, r27
 c48:	f0 0d       	add	r31, r0
 c4a:	b1 1d       	adc	r27, r1
 c4c:	63 9f       	mul	r22, r19
 c4e:	aa 27       	eor	r26, r26
 c50:	f0 0d       	add	r31, r0
 c52:	b1 1d       	adc	r27, r1
 c54:	aa 1f       	adc	r26, r26
 c56:	64 9f       	mul	r22, r20
 c58:	66 27       	eor	r22, r22
 c5a:	b0 0d       	add	r27, r0
 c5c:	a1 1d       	adc	r26, r1
 c5e:	66 1f       	adc	r22, r22
 c60:	82 9f       	mul	r24, r18
 c62:	22 27       	eor	r18, r18
 c64:	b0 0d       	add	r27, r0
 c66:	a1 1d       	adc	r26, r1
 c68:	62 1f       	adc	r22, r18
 c6a:	73 9f       	mul	r23, r19
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	62 1f       	adc	r22, r18
 c72:	83 9f       	mul	r24, r19
 c74:	a0 0d       	add	r26, r0
 c76:	61 1d       	adc	r22, r1
 c78:	22 1f       	adc	r18, r18
 c7a:	74 9f       	mul	r23, r20
 c7c:	33 27       	eor	r19, r19
 c7e:	a0 0d       	add	r26, r0
 c80:	61 1d       	adc	r22, r1
 c82:	23 1f       	adc	r18, r19
 c84:	84 9f       	mul	r24, r20
 c86:	60 0d       	add	r22, r0
 c88:	21 1d       	adc	r18, r1
 c8a:	82 2f       	mov	r24, r18
 c8c:	76 2f       	mov	r23, r22
 c8e:	6a 2f       	mov	r22, r26
 c90:	11 24       	eor	r1, r1
 c92:	9f 57       	subi	r25, 0x7F	; 127
 c94:	50 40       	sbci	r21, 0x00	; 0
 c96:	9a f0       	brmi	.+38     	; 0xcbe <__mulsf3_pse+0x88>
 c98:	f1 f0       	breq	.+60     	; 0xcd6 <__mulsf3_pse+0xa0>
 c9a:	88 23       	and	r24, r24
 c9c:	4a f0       	brmi	.+18     	; 0xcb0 <__mulsf3_pse+0x7a>
 c9e:	ee 0f       	add	r30, r30
 ca0:	ff 1f       	adc	r31, r31
 ca2:	bb 1f       	adc	r27, r27
 ca4:	66 1f       	adc	r22, r22
 ca6:	77 1f       	adc	r23, r23
 ca8:	88 1f       	adc	r24, r24
 caa:	91 50       	subi	r25, 0x01	; 1
 cac:	50 40       	sbci	r21, 0x00	; 0
 cae:	a9 f7       	brne	.-22     	; 0xc9a <__mulsf3_pse+0x64>
 cb0:	9e 3f       	cpi	r25, 0xFE	; 254
 cb2:	51 05       	cpc	r21, r1
 cb4:	80 f0       	brcs	.+32     	; 0xcd6 <__mulsf3_pse+0xa0>
 cb6:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 cba:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_szero>
 cbe:	5f 3f       	cpi	r21, 0xFF	; 255
 cc0:	e4 f3       	brlt	.-8      	; 0xcba <__mulsf3_pse+0x84>
 cc2:	98 3e       	cpi	r25, 0xE8	; 232
 cc4:	d4 f3       	brlt	.-12     	; 0xcba <__mulsf3_pse+0x84>
 cc6:	86 95       	lsr	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	b7 95       	ror	r27
 cce:	f7 95       	ror	r31
 cd0:	e7 95       	ror	r30
 cd2:	9f 5f       	subi	r25, 0xFF	; 255
 cd4:	c1 f7       	brne	.-16     	; 0xcc6 <__mulsf3_pse+0x90>
 cd6:	fe 2b       	or	r31, r30
 cd8:	88 0f       	add	r24, r24
 cda:	91 1d       	adc	r25, r1
 cdc:	96 95       	lsr	r25
 cde:	87 95       	ror	r24
 ce0:	97 f9       	bld	r25, 7
 ce2:	08 95       	ret

00000ce4 <atoi>:
 ce4:	fc 01       	movw	r30, r24
 ce6:	88 27       	eor	r24, r24
 ce8:	99 27       	eor	r25, r25
 cea:	e8 94       	clt
 cec:	21 91       	ld	r18, Z+
 cee:	20 32       	cpi	r18, 0x20	; 32
 cf0:	e9 f3       	breq	.-6      	; 0xcec <atoi+0x8>
 cf2:	29 30       	cpi	r18, 0x09	; 9
 cf4:	10 f0       	brcs	.+4      	; 0xcfa <atoi+0x16>
 cf6:	2e 30       	cpi	r18, 0x0E	; 14
 cf8:	c8 f3       	brcs	.-14     	; 0xcec <atoi+0x8>
 cfa:	2b 32       	cpi	r18, 0x2B	; 43
 cfc:	41 f0       	breq	.+16     	; 0xd0e <atoi+0x2a>
 cfe:	2d 32       	cpi	r18, 0x2D	; 45
 d00:	39 f4       	brne	.+14     	; 0xd10 <atoi+0x2c>
 d02:	68 94       	set
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <atoi+0x2a>
 d06:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulhi_const_10>
 d0a:	82 0f       	add	r24, r18
 d0c:	91 1d       	adc	r25, r1
 d0e:	21 91       	ld	r18, Z+
 d10:	20 53       	subi	r18, 0x30	; 48
 d12:	2a 30       	cpi	r18, 0x0A	; 10
 d14:	c0 f3       	brcs	.-16     	; 0xd06 <atoi+0x22>
 d16:	1e f4       	brtc	.+6      	; 0xd1e <atoi+0x3a>
 d18:	90 95       	com	r25
 d1a:	81 95       	neg	r24
 d1c:	9f 4f       	sbci	r25, 0xFF	; 255
 d1e:	08 95       	ret

00000d20 <__mulhi_const_10>:
 d20:	7a e0       	ldi	r23, 0x0A	; 10
 d22:	97 9f       	mul	r25, r23
 d24:	90 2d       	mov	r25, r0
 d26:	87 9f       	mul	r24, r23
 d28:	80 2d       	mov	r24, r0
 d2a:	91 0d       	add	r25, r1
 d2c:	11 24       	eor	r1, r1
 d2e:	08 95       	ret

00000d30 <_exit>:
 d30:	f8 94       	cli

00000d32 <__stop_program>:
 d32:	ff cf       	rjmp	.-2      	; 0xd32 <__stop_program>
