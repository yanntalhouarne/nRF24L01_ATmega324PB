
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  000004d0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002515  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001082  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000123f  00000000  00000000  00003d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00004f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000974  00000000  00000000  0000554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019e7  00000000  00000000  00005ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e2       	ldi	r30, 0x2E	; 46
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 30       	cpi	r26, 0x0E	; 14
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e0       	ldi	r26, 0x0E	; 14
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a1 31       	cpi	r26, 0x11	; 17
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 b4 00 	call	0x168	; 0x168 <main>
 102:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& MISC &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 10a:	6c 9a       	sbi	0x0d, 4	; 13
	DDRC |= (1<<4);
 10c:	3c 9a       	sbi	0x07, 4	; 7
 10e:	08 95       	ret

00000110 <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	69 f0       	breq	.+26     	; 0x12e <delay_ms+0x1e>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_ms+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <delay_ms+0x12>
 122:	00 00       	nop
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	a9 f7       	brne	.-22     	; 0x118 <delay_ms+0x8>
 12e:	08 95       	ret

00000130 <flash_LED>:
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <flash_LED+0x2c>
 13e:	8b 01       	movw	r16, r22
 140:	d8 2f       	mov	r29, r24
 142:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 144:	68 94       	set
 146:	ff 24       	eor	r15, r15
 148:	f4 f8       	bld	r15, 4
 14a:	9e b1       	in	r25, 0x0e	; 14
 14c:	9f 25       	eor	r25, r15
 14e:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 150:	c8 01       	movw	r24, r16
 152:	0e 94 88 00 	call	0x110	; 0x110 <delay_ms>
	DDRC |= (1<<4);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	dc 13       	cpse	r29, r28
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	08 95       	ret

00000168 <main>:
char tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};


int main(void)
{
	setup_gpios(); 
 168:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	
	/* USART setup */
	setup_usart0(BR_9600); // for NEO6 GPS
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	0e 94 0c 02 	call	0x418	; 0x418 <setup_usart0>
	
	/* nRF24L01 setup */
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 172:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 176:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <mirf_init>
	mirf_config(); // configure nRF24L01
 17a:	0e 94 32 01 	call	0x264	; 0x264 <mirf_config>
	mirf_set_TADDR(tx_address);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_set_TADDR>
	
	buffer[0] = '1';
 186:	ee e0       	ldi	r30, 0x0E	; 14
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	81 e3       	ldi	r24, 0x31	; 49
 18c:	80 83       	st	Z, r24
	buffer[1] = '2';
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = '3';
 192:	83 e3       	ldi	r24, 0x33	; 51
 194:	82 83       	std	Z+2, r24	; 0x02
			
	sei(); // enable global interrupts
 196:	78 94       	sei
	
	/* setup complete notification */
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 198:	62 e3       	ldi	r22, 0x32	; 50
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	0e 94 98 00 	call	0x130	; 0x130 <flash_LED>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x40>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x4a>
 1b2:	00 00       	nop
	_delay_ms(1000);
	
    while (1) 
    {
		TOGGLE_LED;
 1b4:	c0 e1       	ldi	r28, 0x10	; 16
 1b6:	8e b1       	in	r24, 0x0e	; 14
 1b8:	8c 27       	eor	r24, r28
 1ba:	8e b9       	out	0x0e, r24	; 14
		 
		 
		mirf_send(buffer, mirf_PAYLOAD);
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 8a 01 	call	0x314	; 0x314 <mirf_send>
		
		while (!mirf_data_sent())
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <main+0x72>
		{
			if (mirf_read_MAX_RT())
 1c8:	0e 94 0f 01 	call	0x21e	; 0x21e <mirf_read_MAX_RT>
 1cc:	88 23       	and	r24, r24
 1ce:	29 f0       	breq	.+10     	; 0x1da <main+0x72>
			{
				println_0("MAX_RT;");
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 ae 01 	call	0x35c	; 0x35c <println_0>
				break;
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <main+0x7a>
		TOGGLE_LED;
		 
		 
		mirf_send(buffer, mirf_PAYLOAD);
		
		while (!mirf_data_sent())
 1da:	0e 94 02 01 	call	0x204	; 0x204 <mirf_data_sent>
 1de:	88 23       	and	r24, r24
 1e0:	99 f3       	breq	.-26     	; 0x1c8 <main+0x60>
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	89 e6       	ldi	r24, 0x69	; 105
 1e6:	98 e1       	ldi	r25, 0x18	; 24
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x80>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x8a>
 1f2:	00 00       	nop
 1f4:	e0 cf       	rjmp	.-64     	; 0x1b6 <main+0x4e>

000001f6 <mirf_init>:
void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
	mirf_write_register(RX_ADDR_P0, adr, 5);
	mirf_CE_hi;
 1f6:	3f 9a       	sbi	0x07, 7	; 7
 1f8:	56 9a       	sbi	0x0a, 6	; 10
 1fa:	47 98       	cbi	0x08, 7	; 8
 1fc:	5e 9a       	sbi	0x0b, 6	; 11
 1fe:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi1_master_initialize>
 202:	08 95       	ret

00000204 <mirf_data_sent>:
 204:	5e 98       	cbi	0x0b, 6	; 11
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <spi1_exchange_char>
 20c:	5e 9a       	sbi	0x0b, 6	; 11
 20e:	ef ec       	ldi	r30, 0xCF	; 207
 210:	f7 e0       	ldi	r31, 0x07	; 7
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <mirf_data_sent+0xe>
 216:	00 c0       	rjmp	.+0      	; 0x218 <mirf_data_sent+0x14>
 218:	00 00       	nop
 21a:	80 72       	andi	r24, 0x20	; 32
 21c:	08 95       	ret

0000021e <mirf_read_MAX_RT>:
 21e:	5e 98       	cbi	0x0b, 6	; 11
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <spi1_exchange_char>
 226:	5e 9a       	sbi	0x0b, 6	; 11
 228:	ef ec       	ldi	r30, 0xCF	; 207
 22a:	f7 e0       	ldi	r31, 0x07	; 7
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <mirf_read_MAX_RT+0xe>
 230:	00 c0       	rjmp	.+0      	; 0x232 <mirf_read_MAX_RT+0x14>
 232:	00 00       	nop
 234:	82 95       	swap	r24
 236:	81 70       	andi	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <mirf_config_register>:
 23a:	cf 93       	push	r28
 23c:	c6 2f       	mov	r28, r22
 23e:	5e 98       	cbi	0x0b, 6	; 11
 240:	8f 71       	andi	r24, 0x1F	; 31
 242:	80 62       	ori	r24, 0x20	; 32
 244:	0e 94 db 01 	call	0x3b6	; 0x3b6 <spi1_send_char>
 248:	82 e4       	ldi	r24, 0x42	; 66
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <mirf_config_register+0x10>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <mirf_config_register+0x16>
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 db 01 	call	0x3b6	; 0x3b6 <spi1_send_char>
 256:	5e 9a       	sbi	0x0b, 6	; 11
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <mirf_config_register+0x20>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <mirf_config_register+0x26>
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <mirf_config>:
 264:	6c e6       	ldi	r22, 0x6C	; 108
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	81 e1       	ldi	r24, 0x11	; 17
 270:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	82 e1       	ldi	r24, 0x12	; 18
 278:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	83 e1       	ldi	r24, 0x13	; 19
 280:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	84 e1       	ldi	r24, 0x14	; 20
 288:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	85 e1       	ldi	r24, 0x15	; 21
 290:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	86 e1       	ldi	r24, 0x16	; 22
 298:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 29c:	66 e0       	ldi	r22, 0x06	; 6
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 2b4:	6f ef       	ldi	r22, 0xFF	; 255
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 2bc:	60 e7       	ldi	r22, 0x70	; 112
 2be:	87 e0       	ldi	r24, 0x07	; 7
 2c0:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
 2c4:	08 95       	ret

000002c6 <mirf_write_register>:
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	eb 01       	movw	r28, r22
 2ce:	14 2f       	mov	r17, r20
 2d0:	5e 98       	cbi	0x0b, 6	; 11
 2d2:	8f 71       	andi	r24, 0x1F	; 31
 2d4:	80 62       	ori	r24, 0x20	; 32
 2d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <spi1_send_char>
 2da:	61 2f       	mov	r22, r17
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 ed 01 	call	0x3da	; 0x3da <spi1_send_bytes>
 2e2:	5e 9a       	sbi	0x0b, 6	; 11
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <mirf_write_register+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <mirf_write_register+0x26>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 2fa:	45 e0       	ldi	r20, 0x05	; 5
 2fc:	bc 01       	movw	r22, r24
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	0e 94 63 01 	call	0x2c6	; 0x2c6 <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 304:	45 e0       	ldi	r20, 0x05	; 5
 306:	be 01       	movw	r22, r28
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <mirf_write_register>
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ec 01       	movw	r28, r24
 31c:	16 2f       	mov	r17, r22
	mirf_CE_lo; // Enter Standby-I mode
 31e:	47 98       	cbi	0x08, 7	; 8
	
	TX_POWERUP; // Enter TX mode (PRIM_RX = 0, PWR_UP = 1)
 320:	6a e5       	ldi	r22, 0x5A	; 90
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <mirf_send+0x16>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <mirf_send+0x1c>
	
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); // clear flags 
 330:	60 e7       	ldi	r22, 0x70	; 112
 332:	87 e0       	ldi	r24, 0x07	; 7
 334:	0e 94 1d 01 	call	0x23a	; 0x23a <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 338:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 33a:	80 ea       	ldi	r24, 0xA0	; 160
 33c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 340:	61 2f       	mov	r22, r17
 342:	ce 01       	movw	r24, r28
 344:	0e 94 ed 01 	call	0x3da	; 0x3da <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 348:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 34a:	47 9a       	sbi	0x08, 7	; 8
 34c:	88 e2       	ldi	r24, 0x28	; 40
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <mirf_send+0x3a>
	_delay_us(15); // pulse CE for at least 10us
	mirf_CE_lo; // data packet sent, ShockBurst automatically enters RX mode
 352:	47 98       	cbi	0x08, 7	; 8
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	08 95       	ret

0000035c <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	8a 30       	cpi	r24, 0x0A	; 10
 36c:	69 f0       	breq	.+26     	; 0x388 <println_0+0x2c>
 36e:	8b 33       	cpi	r24, 0x3B	; 59
 370:	79 f4       	brne	.+30     	; 0x390 <println_0+0x34>
 372:	0a c0       	rjmp	.+20     	; 0x388 <println_0+0x2c>
 374:	89 91       	ld	r24, Y+
 376:	8a 30       	cpi	r24, 0x0A	; 10
 378:	39 f0       	breq	.+14     	; 0x388 <println_0+0x2c>
 37a:	8b 33       	cpi	r24, 0x3B	; 59
 37c:	29 f0       	breq	.+10     	; 0x388 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 37e:	0e 94 04 02 	call	0x408	; 0x408 <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 382:	0c 17       	cp	r16, r28
 384:	1d 07       	cpc	r17, r29
 386:	b1 f7       	brne	.-20     	; 0x374 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 388:	8a e0       	ldi	r24, 0x0A	; 10
 38a:	0e 94 04 02 	call	0x408	; 0x408 <usart0_send_char>
}
 38e:	07 c0       	rjmp	.+14     	; 0x39e <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 390:	0e 94 04 02 	call	0x408	; 0x408 <usart0_send_char>
 394:	e8 01       	movw	r28, r16
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	08 53       	subi	r16, 0x38	; 56
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	eb cf       	rjmp	.-42     	; 0x374 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <spi1_master_initialize>:
 3a8:	6b 9a       	sbi	0x0d, 3	; 13
 3aa:	57 9a       	sbi	0x0a, 7	; 10
 3ac:	56 9a       	sbi	0x0a, 6	; 10
 3ae:	82 e5       	ldi	r24, 0x52	; 82
 3b0:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 3b4:	08 95       	ret

000003b6 <spi1_send_char>:
 3b6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3ba:	ed ea       	ldi	r30, 0xAD	; 173
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 23       	and	r24, r24
 3c2:	ec f7       	brge	.-6      	; 0x3be <spi1_send_char+0x8>
 3c4:	08 95       	ret

000003c6 <spi1_exchange_char>:
 3c6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3ca:	ed ea       	ldi	r30, 0xAD	; 173
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	ec f7       	brge	.-6      	; 0x3ce <spi1_exchange_char+0x8>
 3d4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 3d8:	08 95       	ret

000003da <spi1_send_bytes>:
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	66 23       	and	r22, r22
 3e0:	81 f0       	breq	.+32     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e2:	dc 01       	movw	r26, r24
 3e4:	9c 01       	movw	r18, r24
 3e6:	26 0f       	add	r18, r22
 3e8:	31 1d       	adc	r19, r1
 3ea:	ce ea       	ldi	r28, 0xAE	; 174
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	ed ea       	ldi	r30, 0xAD	; 173
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	9d 91       	ld	r25, X+
 3f4:	98 83       	st	Y, r25
 3f6:	90 81       	ld	r25, Z
 3f8:	99 23       	and	r25, r25
 3fa:	ec f7       	brge	.-6      	; 0x3f6 <spi1_send_bytes+0x1c>
 3fc:	a2 17       	cp	r26, r18
 3fe:	b3 07       	cpc	r27, r19
 400:	c1 f7       	brne	.-16     	; 0x3f2 <spi1_send_bytes+0x18>
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 408:	e0 ec       	ldi	r30, 0xC0	; 192
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	90 81       	ld	r25, Z
 40e:	95 ff       	sbrs	r25, 5
 410:	fd cf       	rjmp	.-6      	; 0x40c <usart0_send_char+0x4>
 412:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 416:	08 95       	ret

00000418 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1<<RXCIE); //
 418:	98 e9       	ldi	r25, 0x98	; 152
 41a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 41e:	96 e0       	ldi	r25, 0x06	; 6
 420:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 424:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
