
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800124  00800124  00000ce8  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029f7  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fd  00000000  00000000  00003a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167a  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  000063a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6f  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d53  00000000  00000000  000074e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000923a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 e3       	ldi	r30, 0x30	; 48
  e0:	fc e0       	ldi	r31, 0x0C	; 12
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 32       	cpi	r26, 0x24	; 36
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e2       	ldi	r26, 0x24	; 36
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ad 32       	cpi	r26, 0x2D	; 45
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 05 01 	call	0x20a	; 0x20a <main>
 102:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_adc>:
#include "adc.h"


void setup_adc()
{
    ADMUX |= (1 << REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC module, prescaler of 128
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <setup_TMR1_pwm>:
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 120:	e0 e8       	ldi	r30, 0x80	; 128
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 68       	ori	r24, 0x81	; 129
 128:	80 83       	st	Z, r24
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	89 60       	ori	r24, 0x09	; 9
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <set_TMR1_duty_cycle>:
 136:	bc 01       	movw	r22, r24
 138:	99 0f       	add	r25, r25
 13a:	88 0b       	sbc	r24, r24
 13c:	99 0b       	sbc	r25, r25
 13e:	0e 94 c0 04 	call	0x980	; 0x980 <__floatsisf>
 142:	2f e6       	ldi	r18, 0x6F	; 111
 144:	32 e1       	ldi	r19, 0x12	; 18
 146:	43 e8       	ldi	r20, 0x83	; 131
 148:	5e e3       	ldi	r21, 0x3E	; 62
 14a:	0e 94 4c 05 	call	0xa98	; 0xa98 <__mulsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	0e 94 1b 04 	call	0x836	; 0x836 <__subsf3>
 15a:	0e 94 88 04 	call	0x910	; 0x910 <__fixsfsi>
 15e:	6f 3f       	cpi	r22, 0xFF	; 255
 160:	71 05       	cpc	r23, r1
 162:	19 f0       	breq	.+6      	; 0x16a <set_TMR1_duty_cycle+0x34>
 164:	14 f0       	brlt	.+4      	; 0x16a <set_TMR1_duty_cycle+0x34>
 166:	6f ef       	ldi	r22, 0xFF	; 255
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	77 27       	eor	r23, r23
 16c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 170:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 174:	08 95       	ret

00000176 <move_motor_forward>:
 176:	29 9a       	sbi	0x05, 1	; 5
 178:	2a 98       	cbi	0x05, 2	; 5
 17a:	08 95       	ret

0000017c <move_motor_backward>:
 17c:	29 98       	cbi	0x05, 1	; 5
 17e:	2a 9a       	sbi	0x05, 2	; 5
 180:	08 95       	ret

00000182 <motor_off>:
 182:	29 9a       	sbi	0x05, 1	; 5
 184:	2a 9a       	sbi	0x05, 2	; 5
 186:	08 95       	ret

00000188 <setup_TMR0_pwm>:
 188:	84 b5       	in	r24, 0x24	; 36
 18a:	83 68       	ori	r24, 0x83	; 131
 18c:	84 bd       	out	0x24, r24	; 36
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	84 60       	ori	r24, 0x04	; 4
 192:	85 bd       	out	0x25, r24	; 37
 194:	8e e3       	ldi	r24, 0x3E	; 62
 196:	87 bd       	out	0x27, r24	; 39
 198:	08 95       	ret

0000019a <setup_TMR3>:
 19a:	e1 e9       	ldi	r30, 0x91	; 145
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <setup_gpios>:

//&&&&&&&&&&&&&&&&&&&&&& MISC &&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output
 1a6:	6c 9a       	sbi	0x0d, 4	; 13
	IN1_DDR |= (1<<IN1);
 1a8:	21 9a       	sbi	0x04, 1	; 4
	IN2_DDR |= (1<<IN2);
 1aa:	22 9a       	sbi	0x04, 2	; 4
	ENA_DDR |= (1<<ENA);
 1ac:	55 9a       	sbi	0x0a, 5	; 10
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
 1ae:	23 9a       	sbi	0x04, 3	; 4
 1b0:	08 95       	ret

000001b2 <delay_ms>:
		delay_ms(ms);
	}
}
void delay_ms(uint16_t ms)
{
	for (uint16_t i  = 0; i < ms; i++)
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	69 f0       	breq	.+26     	; 0x1d0 <delay_ms+0x1e>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	ef ec       	ldi	r30, 0xCF	; 207
 1bc:	f7 e0       	ldi	r31, 0x07	; 7
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <delay_ms+0xc>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <delay_ms+0x12>
 1c4:	00 00       	nop
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	82 17       	cp	r24, r18
 1cc:	93 07       	cpc	r25, r19
 1ce:	a9 f7       	brne	.-22     	; 0x1ba <delay_ms+0x8>
 1d0:	08 95       	ret

000001d2 <flash_LED>:
	ENA_DDR |= (1<<ENA);
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	for (uint8_t i = 0; i < count; i++)
 1dc:	88 23       	and	r24, r24
 1de:	79 f0       	breq	.+30     	; 0x1fe <flash_LED+0x2c>
 1e0:	8b 01       	movw	r16, r22
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		TOGGLE_LED;
 1e6:	68 94       	set
 1e8:	ff 24       	eor	r15, r15
 1ea:	f4 f8       	bld	r15, 4
 1ec:	9e b1       	in	r25, 0x0e	; 14
 1ee:	9f 25       	eor	r25, r15
 1f0:	9e b9       	out	0x0e, r25	; 14
		delay_ms(ms);
 1f2:	c8 01       	movw	r24, r16
 1f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <delay_ms>
	SERVO_PWM_DDR |= (1<<SERVO_PWM);
	
}
void flash_LED(uint8_t count, uint16_t ms)
{
	for (uint8_t i = 0; i < count; i++)
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	dc 13       	cpse	r29, r28
 1fc:	f7 cf       	rjmp	.-18     	; 0x1ec <flash_LED+0x1a>
	{
		TOGGLE_LED;
		delay_ms(ms);
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	08 95       	ret

0000020a <main>:



int main(void)
{
	setup_gpios(); 
 20a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 12 04 	call	0x824	; 0x824 <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 214:	0e 94 b6 03 	call	0x76c	; 0x76c <spi1_master_initialize>
	mirf_init(); // initialize nRF24L01
 218:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mirf_init>
	mirf_config(); // configure nRF24L01
 21c:	0e 94 36 02 	call	0x46c	; 0x46c <mirf_config>
	setup_adc();
 220:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
	setup_TMR1_pwm(); // setup TMR1 PWM for DC motor
 224:	0e 94 90 00 	call	0x120	; 0x120 <setup_TMR1_pwm>
	setup_TMR0_pwm(); // setup TMR0 PWM for servo
 228:	0e 94 c4 00 	call	0x188	; 0x188 <setup_TMR0_pwm>
	setup_TMR3();
 22c:	0e 94 cd 00 	call	0x19a	; 0x19a <setup_TMR3>
	
	flash_LED(10, 50); // flash LED 10 times at intervals of 50ms
 230:	62 e3       	ldi	r22, 0x32	; 50
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <flash_LED>
	
	sei(); // enable global interrupts
 23a:	78 94       	sei
	
	mirf_set_TADDR(tx_address);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 a6 02 	call	0x54c	; 0x54c <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 9e 02 	call	0x53c	; 0x53c <mirf_set_RADDR>

	println_0("nRF24L01 initialized...;");
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <println_0>
 254:	8f e1       	ldi	r24, 0x1F	; 31
 256:	9e e4       	ldi	r25, 0x4E	; 78
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x4e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x54>
 25e:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 260:	10 e1       	ldi	r17, 0x10	; 16
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 262:	c4 e9       	ldi	r28, 0x94	; 148
 264:	d0 e0       	ldi	r29, 0x00	; 0
				while (!mirf_data_sent())
				{
					if (TCNT3 > 1500) // timeout of one second
					{
						comm_lost_count++;
						comm_lost = 1;
 266:	ff 24       	eor	r15, r15
 268:	f3 94       	inc	r15
		
			if (buffer[0] == GET_TEMP) // if the command is temperature request
			{
				temperature++;
				if (temperature > 30)
					temperature = 15;
 26a:	0f e0       	ldi	r16, 0x0F	; 15
	println_0("nRF24L01 initialized...;");
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 26c:	8e b1       	in	r24, 0x0e	; 14
 26e:	81 27       	eor	r24, r17
 270:	8e b9       	out	0x0e, r24	; 14
		
		if (comm_lost_count > 50)
 272:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 276:	83 33       	cpi	r24, 0x33	; 51
 278:	20 f0       	brcs	.+8      	; 0x282 <main+0x78>
		{
			comm_lost_count = 0;
 27a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
			mirf_config();
 27e:	0e 94 36 02 	call	0x46c	; 0x46c <mirf_config>
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 282:	19 82       	std	Y+1, r1	; 0x01
 284:	18 82       	st	Y, r1
 286:	0b c0       	rjmp	.+22     	; 0x29e <main+0x94>
		}
		
		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
		{
			if (TCNT3 > 1500) // timeout of one second
 288:	88 81       	ld	r24, Y
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	8d 3d       	cpi	r24, 0xDD	; 221
 28e:	95 40       	sbci	r25, 0x05	; 5
 290:	30 f0       	brcs	.+12     	; 0x29e <main+0x94>
			{
				comm_lost_count++;
 292:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 29c:	86 c0       	rjmp	.+268    	; 0x3aa <main+0x1a0>
			comm_lost_count = 0;
			mirf_config();
		}
		
		reset_TMR3();
		while(!mirf_data_ready())  // wait to receive command from controller
 29e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <mirf_data_ready>
 2a2:	88 23       	and	r24, r24
 2a4:	89 f3       	breq	.-30     	; 0x288 <main+0x7e>
				comm_lost_count++;
				comm_lost = 1;
				break;
			}
		}
		if (comm_lost == 0)
 2a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <comm_lost>
 2aa:	81 11       	cpse	r24, r1
 2ac:	7e c0       	rjmp	.+252    	; 0x3aa <main+0x1a0>
		{
			mirf_get_data(buffer); // get the data, put it in buffer
 2ae:	89 e2       	ldi	r24, 0x29	; 41
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mirf_get_data>
		
			if (buffer[0] == GET_TEMP) // if the command is temperature request
 2b6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <buffer>
 2ba:	84 35       	cpi	r24, 0x54	; 84
 2bc:	51 f5       	brne	.+84     	; 0x312 <main+0x108>
			{
				temperature++;
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
				if (temperature > 30)
 2c4:	8f 31       	cpi	r24, 0x1F	; 31
 2c6:	1c f4       	brge	.+6      	; 0x2ce <main+0xc4>
		{
			mirf_get_data(buffer); // get the data, put it in buffer
		
			if (buffer[0] == GET_TEMP) // if the command is temperature request
			{
				temperature++;
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <main+0xc8>
				if (temperature > 30)
					temperature = 15;
 2ce:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
				buffer[0] = temperature;
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <buffer>
	TCCR3B |= (1<<CS32); // 256 prescaler, CTC mode

}
void reset_TMR3()
{
	TCNT3 = 0;
 2da:	19 82       	std	Y+1, r1	; 0x01
 2dc:	18 82       	st	Y, r1
				temperature++;
				if (temperature > 30)
					temperature = 15;
				buffer[0] = temperature;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	89 e2       	ldi	r24, 0x29	; 41
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 b6 02 	call	0x56c	; 0x56c <mirf_send>
				while (!mirf_data_sent())
 2e8:	0d c0       	rjmp	.+26     	; 0x304 <main+0xfa>
				{
					if (TCNT3 > 1500) // timeout of one second
 2ea:	88 81       	ld	r24, Y
 2ec:	99 81       	ldd	r25, Y+1	; 0x01
 2ee:	8d 3d       	cpi	r24, 0xDD	; 221
 2f0:	95 40       	sbci	r25, 0x05	; 5
 2f2:	40 f0       	brcs	.+16     	; 0x304 <main+0xfa>
					{
						comm_lost_count++;
 2f4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
						comm_lost = 1;
 2fe:	f0 92 25 01 	sts	0x0125, r15	; 0x800125 <comm_lost>
						break;
 302:	04 c0       	rjmp	.+8      	; 0x30c <main+0x102>
				if (temperature > 30)
					temperature = 15;
				buffer[0] = temperature;
				reset_TMR3();
				mirf_send(buffer, mirf_PAYLOAD);
				while (!mirf_data_sent())
 304:	0e 94 09 02 	call	0x412	; 0x412 <mirf_data_sent>
 308:	88 23       	and	r24, r24
 30a:	79 f3       	breq	.-34     	; 0x2ea <main+0xe0>
						comm_lost = 1;
						break;
					}
				}
				
				set_RX_MODE();
 30c:	0e 94 25 02 	call	0x44a	; 0x44a <set_RX_MODE>
 310:	4e c0       	rjmp	.+156    	; 0x3ae <main+0x1a4>
				
			}
			else // otherwise, the command is for motor control
			{
				mtr_cmd = ((0xFF00)&(buffer[0]<<8)) | ((0x00FF)&(buffer[1])); // get the motor duty cycle
 312:	e9 e2       	ldi	r30, 0x29	; 41
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	21 81       	ldd	r18, Z+1	; 0x01
 318:	08 2e       	mov	r0, r24
 31a:	00 0c       	add	r0, r0
 31c:	99 0b       	sbc	r25, r25
 31e:	98 2f       	mov	r25, r24
 320:	88 27       	eor	r24, r24
 322:	82 2b       	or	r24, r18
 324:	ac 01       	movw	r20, r24
 326:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <mtr_cmd+0x1>
 32a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mtr_cmd>
				srv_cmd = buffer[2];
 32e:	22 81       	ldd	r18, Z+2	; 0x02
 330:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <srv_cmd>

				if (mtr_cmd > 0 ) // forward direction
 334:	18 16       	cp	r1, r24
 336:	19 06       	cpc	r1, r25
 338:	2c f4       	brge	.+10     	; 0x344 <main+0x13a>
				{
					set_TMR1_duty_cycle(mtr_cmd);
 33a:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1_duty_cycle>
					move_motor_forward();
 33e:	0e 94 bb 00 	call	0x176	; 0x176 <move_motor_forward>
 342:	1a c0       	rjmp	.+52     	; 0x378 <main+0x16e>
				}
				else if (mtr_cmd < 0)  // backward direction
 344:	55 23       	and	r21, r21
 346:	6c f4       	brge	.+26     	; 0x362 <main+0x158>
				{
					set_TMR1_duty_cycle(abs(mtr_cmd));
 348:	9c 01       	movw	r18, r24
 34a:	33 23       	and	r19, r19
 34c:	24 f4       	brge	.+8      	; 0x356 <main+0x14c>
 34e:	22 27       	eor	r18, r18
 350:	33 27       	eor	r19, r19
 352:	28 1b       	sub	r18, r24
 354:	39 0b       	sbc	r19, r25
 356:	c9 01       	movw	r24, r18
 358:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1_duty_cycle>
					move_motor_backward();
 35c:	0e 94 be 00 	call	0x17c	; 0x17c <move_motor_backward>
 360:	0b c0       	rjmp	.+22     	; 0x378 <main+0x16e>
				}
				else if (abs(mtr_cmd) < 100) // deadband (mtr_cmd is from -1000 to 1000)
 362:	8d 59       	subi	r24, 0x9D	; 157
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	87 3c       	cpi	r24, 0xC7	; 199
 368:	91 05       	cpc	r25, r1
 36a:	30 f4       	brcc	.+12     	; 0x378 <main+0x16e>
				{
					set_TMR1_duty_cycle(1);
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 9b 00 	call	0x136	; 0x136 <set_TMR1_duty_cycle>
					motor_off();
 374:	0e 94 c1 00 	call	0x182	; 0x182 <motor_off>
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
}
void move_servo(float angle)
{ 
	angle = 47 + angle*.355;
	OCR0A = (uint8_t)angle;
 378:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <srv_cmd>
 37c:	06 2e       	mov	r0, r22
 37e:	00 0c       	add	r0, r0
 380:	77 0b       	sbc	r23, r23
 382:	88 0b       	sbc	r24, r24
 384:	99 0b       	sbc	r25, r25
 386:	0e 94 c0 04 	call	0x980	; 0x980 <__floatsisf>
 38a:	2f e8       	ldi	r18, 0x8F	; 143
 38c:	32 ec       	ldi	r19, 0xC2	; 194
 38e:	45 eb       	ldi	r20, 0xB5	; 181
 390:	5e e3       	ldi	r21, 0x3E	; 62
 392:	0e 94 4c 05 	call	0xa98	; 0xa98 <__mulsf3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4c e3       	ldi	r20, 0x3C	; 60
 39c:	52 e4       	ldi	r21, 0x42	; 66
 39e:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>
 3a2:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
 3a6:	67 bd       	out	0x27, r22	; 39
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0x1a4>
		
				move_servo((float)srv_cmd);
			}
		}
		else
		comm_lost = 0;
 3aa:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <comm_lost>
		
		print_int_0(mtr_cmd);
 3ae:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mtr_cmd>
 3b2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <mtr_cmd+0x1>
 3b6:	0e 94 11 03 	call	0x622	; 0x622 <print_int_0>
		print_char_0(',');
 3ba:	8c e2       	ldi	r24, 0x2C	; 44
 3bc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_char_0>
		println_int_0(srv_cmd);
 3c0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <srv_cmd>
 3c4:	08 2e       	mov	r0, r24
 3c6:	00 0c       	add	r0, r0
 3c8:	99 0b       	sbc	r25, r25
 3ca:	0e 94 62 03 	call	0x6c4	; 0x6c4 <println_int_0>
 3ce:	8f e1       	ldi	r24, 0x1F	; 31
 3d0:	9e e4       	ldi	r25, 0x4E	; 78
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x1c8>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x1ce>
 3d8:	00 00       	nop
 3da:	48 cf       	rjmp	.-368    	; 0x26c <main+0x62>

000003dc <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 3dc:	54 9a       	sbi	0x0a, 4	; 10
 3de:	56 9a       	sbi	0x0a, 6	; 10
 3e0:	5c 98       	cbi	0x0b, 4	; 11
 3e2:	5e 9a       	sbi	0x0b, 6	; 11
 3e4:	e8 98       	cbi	0x1d, 0	; 29
 3e6:	e9 e6       	ldi	r30, 0x69	; 105
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	80 83       	st	Z, r24
 3f0:	e8 9a       	sbi	0x1d, 0	; 29
 3f2:	0e 94 b6 03 	call	0x76c	; 0x76c <spi1_master_initialize>
 3f6:	08 95       	ret

000003f8 <mirf_data_ready>:
 3f8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <PTX>
 3fc:	81 11       	cpse	r24, r1
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	5e 98       	cbi	0x0b, 6	; 11
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	0e 94 c5 03 	call	0x78a	; 0x78a <spi1_exchange_char>
 408:	5e 9a       	sbi	0x0b, 6	; 11
 40a:	80 74       	andi	r24, 0x40	; 64
 40c:	08 95       	ret
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret

00000412 <mirf_data_sent>:
 412:	5e 98       	cbi	0x0b, 6	; 11
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	0e 94 c5 03 	call	0x78a	; 0x78a <spi1_exchange_char>
 41a:	5e 9a       	sbi	0x0b, 6	; 11
 41c:	80 72       	andi	r24, 0x20	; 32
 41e:	08 95       	ret

00000420 <mirf_config_register>:
 420:	cf 93       	push	r28
 422:	c6 2f       	mov	r28, r22
 424:	5e 98       	cbi	0x0b, 6	; 11
 426:	8f 71       	andi	r24, 0x1F	; 31
 428:	80 62       	ori	r24, 0x20	; 32
 42a:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
 42e:	82 e4       	ldi	r24, 0x42	; 66
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <mirf_config_register+0x10>
 434:	00 c0       	rjmp	.+0      	; 0x436 <mirf_config_register+0x16>
 436:	8c 2f       	mov	r24, r28
 438:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
 43c:	5e 9a       	sbi	0x0b, 6	; 11
 43e:	82 e4       	ldi	r24, 0x42	; 66
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <mirf_config_register+0x20>
 444:	00 c0       	rjmp	.+0      	; 0x446 <mirf_config_register+0x26>
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <set_RX_MODE>:
 44a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <PTX>
 44e:	60 e7       	ldi	r22, 0x70	; 112
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 456:	5e 98       	cbi	0x0b, 6	; 11
 458:	81 ee       	ldi	r24, 0xE1	; 225
 45a:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
 45e:	5e 9a       	sbi	0x0b, 6	; 11
 460:	6b e5       	ldi	r22, 0x5B	; 91
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 468:	5c 9a       	sbi	0x0b, 4	; 11
 46a:	08 95       	ret

0000046c <mirf_config>:
 46c:	6c e6       	ldi	r22, 0x6C	; 108
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	81 e1       	ldi	r24, 0x11	; 17
 478:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	82 e1       	ldi	r24, 0x12	; 18
 480:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	83 e1       	ldi	r24, 0x13	; 19
 488:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	84 e1       	ldi	r24, 0x14	; 20
 490:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	85 e1       	ldi	r24, 0x15	; 21
 498:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	86 e1       	ldi	r24, 0x16	; 22
 4a0:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4a4:	66 e2       	ldi	r22, 0x26	; 38
 4a6:	86 e0       	ldi	r24, 0x06	; 6
 4a8:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4b4:	63 e0       	ldi	r22, 0x03	; 3
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4bc:	6f e4       	ldi	r22, 0x4F	; 79
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4c4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <PTX>
 4c8:	60 e7       	ldi	r22, 0x70	; 112
 4ca:	87 e0       	ldi	r24, 0x07	; 7
 4cc:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4d0:	5e 98       	cbi	0x0b, 6	; 11
 4d2:	81 ee       	ldi	r24, 0xE1	; 225
 4d4:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
 4d8:	5e 9a       	sbi	0x0b, 6	; 11
 4da:	6b e5       	ldi	r22, 0x5B	; 91
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 4e2:	5c 9a       	sbi	0x0b, 4	; 11
 4e4:	08 95       	ret

000004e6 <mirf_get_data>:
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	5e 98       	cbi	0x0b, 6	; 11
 4ee:	81 e6       	ldi	r24, 0x61	; 97
 4f0:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
 4f4:	43 e0       	ldi	r20, 0x03	; 3
 4f6:	be 01       	movw	r22, r28
 4f8:	ce 01       	movw	r24, r28
 4fa:	0e 94 e6 03 	call	0x7cc	; 0x7cc <spi1_exchange_bytes>
 4fe:	5e 9a       	sbi	0x0b, 6	; 11
 500:	60 e4       	ldi	r22, 0x40	; 64
 502:	87 e0       	ldi	r24, 0x07	; 7
 504:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	eb 01       	movw	r28, r22
 516:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 518:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 51a:	8f 71       	andi	r24, 0x1F	; 31
 51c:	80 62       	ori	r24, 0x20	; 32
 51e:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
	spi1_send_bytes(value, len);
 522:	61 2f       	mov	r22, r17
 524:	ce 01       	movw	r24, r28
 526:	0e 94 cf 03 	call	0x79e	; 0x79e <spi1_send_bytes>
	mirf_CSN_hi;
 52a:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52c:	82 e4       	ldi	r24, 0x42	; 66
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <mirf_write_register+0x20>
 532:	00 c0       	rjmp	.+0      	; 0x534 <mirf_write_register+0x26>
	_delay_us(25);
	
}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	08 95       	ret

0000053c <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 53c:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
 53e:	45 e0       	ldi	r20, 0x05	; 5
 540:	bc 01       	movw	r22, r24
 542:	8b e0       	ldi	r24, 0x0B	; 11
 544:	0e 94 87 02 	call	0x50e	; 0x50e <mirf_write_register>
	mirf_CE_hi;
 548:	5c 9a       	sbi	0x0b, 4	; 11
 54a:	08 95       	ret

0000054c <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 552:	45 e0       	ldi	r20, 0x05	; 5
 554:	bc 01       	movw	r22, r24
 556:	8a e0       	ldi	r24, 0x0A	; 10
 558:	0e 94 87 02 	call	0x50e	; 0x50e <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 55c:	45 e0       	ldi	r20, 0x05	; 5
 55e:	be 01       	movw	r22, r28
 560:	80 e1       	ldi	r24, 0x10	; 16
 562:	0e 94 87 02 	call	0x50e	; 0x50e <mirf_write_register>
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	ec 01       	movw	r28, r24
 574:	16 2f       	mov	r17, r22
// 	while (PTX)
// 	{
// 		println_0("while(PTX)")	;
// 	} // Wait until last packet is send

	mirf_CE_lo;
 576:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 57e:	6a e5       	ldi	r22, 0x5A	; 90
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 586:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 588:	81 ee       	ldi	r24, 0xE1	; 225
 58a:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 58e:	5e 9a       	sbi	0x0b, 6	; 11
 590:	82 e4       	ldi	r24, 0x42	; 66
 592:	8a 95       	dec	r24
 594:	f1 f7       	brne	.-4      	; 0x592 <mirf_send+0x26>
 596:	00 c0       	rjmp	.+0      	; 0x598 <mirf_send+0x2c>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 598:	60 e7       	ldi	r22, 0x70	; 112
 59a:	87 e0       	ldi	r24, 0x07	; 7
 59c:	0e 94 10 02 	call	0x420	; 0x420 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 5a0:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 5a2:	80 ea       	ldi	r24, 0xA0	; 160
 5a4:	0e 94 bd 03 	call	0x77a	; 0x77a <spi1_send_char>
	spi1_send_bytes(value, len);      // Write payload
 5a8:	61 2f       	mov	r22, r17
 5aa:	ce 01       	movw	r24, r28
 5ac:	0e 94 cf 03 	call	0x79e	; 0x79e <spi1_send_bytes>
	mirf_CSN_hi;                     // Pull up chip select
 5b0:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 5b2:	5c 9a       	sbi	0x0b, 4	; 11
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	08 95       	ret

000005bc <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
// 		RX_POWERUP;                             // Power up in receiving mode
// 		mirf_CE_hi;                             // Listening for packets
// 		PTX = 0;                                // Set to receiving mode
// 	}
	
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <print_char_0>:
		usart1_send_char(char_array[i]);
		
	}
	usart1_send_char(0x0D); // CR
	usart1_send_char(0x0A); // NL
}
 5d0:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
 5d4:	08 95       	ret

000005d6 <println_0>:
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	8c 01       	movw	r16, r24
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	8a 30       	cpi	r24, 0x0A	; 10
 5e6:	69 f0       	breq	.+26     	; 0x602 <println_0+0x2c>
 5e8:	8b 33       	cpi	r24, 0x3B	; 59
 5ea:	79 f4       	brne	.+30     	; 0x60a <println_0+0x34>
 5ec:	0a c0       	rjmp	.+20     	; 0x602 <println_0+0x2c>
 5ee:	89 91       	ld	r24, Y+
 5f0:	8a 30       	cpi	r24, 0x0A	; 10
 5f2:	39 f0       	breq	.+14     	; 0x602 <println_0+0x2c>
 5f4:	8b 33       	cpi	r24, 0x3B	; 59
 5f6:	29 f0       	breq	.+10     	; 0x602 <println_0+0x2c>
 5f8:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
 5fc:	0c 17       	cp	r16, r28
 5fe:	1d 07       	cpc	r17, r29
 600:	b1 f7       	brne	.-20     	; 0x5ee <println_0+0x18>
 602:	8a e0       	ldi	r24, 0x0A	; 10
 604:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
 608:	07 c0       	rjmp	.+14     	; 0x618 <println_0+0x42>
 60a:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
 60e:	e8 01       	movw	r28, r16
 610:	21 96       	adiw	r28, 0x01	; 1
 612:	08 53       	subi	r16, 0x38	; 56
 614:	1f 4f       	sbci	r17, 0xFF	; 255
 616:	eb cf       	rjmp	.-42     	; 0x5ee <println_0+0x18>
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	08 95       	ret

00000622 <print_int_0>:

void print_int_0(int number)
{
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	e2 97       	sbiw	r28, 0x32	; 50
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	de bf       	out	0x3e, r29	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	cd bf       	out	0x3d, r28	; 61
 63e:	8c 01       	movw	r16, r24
	if (number == 0)
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	31 f4       	brne	.+12     	; 0x650 <print_int_0+0x2e>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 644:	80 e3       	ldi	r24, 0x30	; 48
 646:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
{
	if (number == 0)
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
 64a:	e1 2c       	mov	r14, r1
 64c:	f1 2c       	mov	r15, r1
 64e:	16 c0       	rjmp	.+44     	; 0x67c <print_int_0+0x5a>
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 654:	ea e0       	ldi	r30, 0x0A	; 10
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	01 c0       	rjmp	.+2      	; 0x65c <print_int_0+0x3a>
		num_digit++;
 65a:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 65c:	bf 01       	movw	r22, r30
 65e:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 662:	cb 01       	movw	r24, r22
		num_digit++;
 664:	79 01       	movw	r14, r18
 666:	4f ef       	ldi	r20, 0xFF	; 255
 668:	e4 1a       	sub	r14, r20
 66a:	f4 0a       	sbc	r15, r20
	print_char_0('0');
	
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	a9 f7       	brne	.-22     	; 0x65a <print_int_0+0x38>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 670:	11 23       	and	r17, r17
 672:	24 f4       	brge	.+8      	; 0x67c <print_int_0+0x5a>
 674:	79 01       	movw	r14, r18
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	e8 0e       	add	r14, r24
 67a:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 67c:	4a e0       	ldi	r20, 0x0A	; 10
 67e:	be 01       	movw	r22, r28
 680:	6f 5f       	subi	r22, 0xFF	; 255
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	c8 01       	movw	r24, r16
 686:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 68a:	1e 14       	cp	r1, r14
 68c:	1f 04       	cpc	r1, r15
 68e:	6c f4       	brge	.+26     	; 0x6aa <print_int_0+0x88>
 690:	8e 01       	movw	r16, r28
 692:	0f 5f       	subi	r16, 0xFF	; 255
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	e0 0e       	add	r14, r16
 698:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 69a:	f8 01       	movw	r30, r16
 69c:	81 91       	ld	r24, Z+
 69e:	8f 01       	movw	r16, r30
 6a0:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 6a4:	0e 15       	cp	r16, r14
 6a6:	1f 05       	cpc	r17, r15
 6a8:	c1 f7       	brne	.-16     	; 0x69a <print_int_0+0x78>
	{
		usart0_send_char(char_array[i]);
	}
}
 6aa:	e2 96       	adiw	r28, 0x32	; 50
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	08 95       	ret

000006c4 <println_int_0>:

void println_int_0(int number)
{
 6c4:	ef 92       	push	r14
 6c6:	ff 92       	push	r15
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	e2 97       	sbiw	r28, 0x32	; 50
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	8c 01       	movw	r16, r24
	if (number == 0)
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <println_int_0+0x2e>
#include "print.h"
#include "usart.h"

void print_char_0(char character)
{
	usart0_send_char(character);
 6e6:	80 e3       	ldi	r24, 0x30	; 48
 6e8:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
	if (number == 0)
	{
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
 6ec:	e1 2c       	mov	r14, r1
 6ee:	f1 2c       	mov	r15, r1
 6f0:	16 c0       	rjmp	.+44     	; 0x71e <println_int_0+0x5a>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
	
	while (temp != 0)
	{
		temp = temp /10;
 6f6:	ea e0       	ldi	r30, 0x0A	; 10
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <println_int_0+0x3a>
		num_digit++;
 6fc:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 6fe:	bf 01       	movw	r22, r30
 700:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 704:	cb 01       	movw	r24, r22
		num_digit++;
 706:	79 01       	movw	r14, r18
 708:	4f ef       	ldi	r20, 0xFF	; 255
 70a:	e4 1a       	sub	r14, r20
 70c:	f4 0a       	sbc	r15, r20
		print_char_0('0');
	}
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	a9 f7       	brne	.-22     	; 0x6fc <println_int_0+0x38>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 712:	11 23       	and	r17, r17
 714:	24 f4       	brge	.+8      	; 0x71e <println_int_0+0x5a>
 716:	79 01       	movw	r14, r18
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	e8 0e       	add	r14, r24
 71c:	f1 1c       	adc	r15, r1
 71e:	4a e0       	ldi	r20, 0x0A	; 10
 720:	be 01       	movw	r22, r28
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	c8 01       	movw	r24, r16
 728:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 72c:	1e 14       	cp	r1, r14
 72e:	1f 04       	cpc	r1, r15
 730:	6c f4       	brge	.+26     	; 0x74c <println_int_0+0x88>
 732:	8e 01       	movw	r16, r28
 734:	0f 5f       	subi	r16, 0xFF	; 255
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	e0 0e       	add	r14, r16
 73a:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 73c:	f8 01       	movw	r30, r16
 73e:	81 91       	ld	r24, Z+
 740:	8f 01       	movw	r16, r30
 742:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 746:	0e 15       	cp	r16, r14
 748:	1f 05       	cpc	r17, r15
 74a:	c1 f7       	brne	.-16     	; 0x73c <println_int_0+0x78>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 74c:	8a e0       	ldi	r24, 0x0A	; 10
 74e:	0e 94 0a 04 	call	0x814	; 0x814 <usart0_send_char>
}
 752:	e2 96       	adiw	r28, 0x32	; 50
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	08 95       	ret

0000076c <spi1_master_initialize>:
 76c:	6b 9a       	sbi	0x0d, 3	; 13
 76e:	57 9a       	sbi	0x0a, 7	; 10
 770:	56 9a       	sbi	0x0a, 6	; 10
 772:	82 e5       	ldi	r24, 0x52	; 82
 774:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 778:	08 95       	ret

0000077a <spi1_send_char>:
 77a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 77e:	ed ea       	ldi	r30, 0xAD	; 173
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	88 23       	and	r24, r24
 786:	ec f7       	brge	.-6      	; 0x782 <spi1_send_char+0x8>
 788:	08 95       	ret

0000078a <spi1_exchange_char>:
 78a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 78e:	ed ea       	ldi	r30, 0xAD	; 173
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	80 81       	ld	r24, Z
 794:	88 23       	and	r24, r24
 796:	ec f7       	brge	.-6      	; 0x792 <spi1_exchange_char+0x8>
 798:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 79c:	08 95       	ret

0000079e <spi1_send_bytes>:
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	66 23       	and	r22, r22
 7a4:	81 f0       	breq	.+32     	; 0x7c6 <spi1_send_bytes+0x28>
 7a6:	dc 01       	movw	r26, r24
 7a8:	9c 01       	movw	r18, r24
 7aa:	26 0f       	add	r18, r22
 7ac:	31 1d       	adc	r19, r1
 7ae:	ce ea       	ldi	r28, 0xAE	; 174
 7b0:	d0 e0       	ldi	r29, 0x00	; 0
 7b2:	ed ea       	ldi	r30, 0xAD	; 173
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	9d 91       	ld	r25, X+
 7b8:	98 83       	st	Y, r25
 7ba:	90 81       	ld	r25, Z
 7bc:	99 23       	and	r25, r25
 7be:	ec f7       	brge	.-6      	; 0x7ba <spi1_send_bytes+0x1c>
 7c0:	a2 17       	cp	r26, r18
 7c2:	b3 07       	cpc	r27, r19
 7c4:	c1 f7       	brne	.-16     	; 0x7b6 <spi1_send_bytes+0x18>
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <spi1_exchange_bytes>:
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	44 23       	and	r20, r20
 7d6:	c9 f0       	breq	.+50     	; 0x80a <spi1_exchange_bytes+0x3e>
 7d8:	dc 01       	movw	r26, r24
 7da:	06 2f       	mov	r16, r22
 7dc:	17 2f       	mov	r17, r23
 7de:	9c 01       	movw	r18, r24
 7e0:	24 0f       	add	r18, r20
 7e2:	31 1d       	adc	r19, r1
 7e4:	a9 01       	movw	r20, r18
 7e6:	2e ea       	ldi	r18, 0xAE	; 174
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	ed ea       	ldi	r30, 0xAD	; 173
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	9d 91       	ld	r25, X+
 7f0:	e9 01       	movw	r28, r18
 7f2:	98 83       	st	Y, r25
 7f4:	90 81       	ld	r25, Z
 7f6:	99 23       	and	r25, r25
 7f8:	ec f7       	brge	.-6      	; 0x7f4 <spi1_exchange_bytes+0x28>
 7fa:	e9 01       	movw	r28, r18
 7fc:	98 81       	ld	r25, Y
 7fe:	e8 01       	movw	r28, r16
 800:	99 93       	st	Y+, r25
 802:	8e 01       	movw	r16, r28
 804:	a4 17       	cp	r26, r20
 806:	b5 07       	cpc	r27, r21
 808:	91 f7       	brne	.-28     	; 0x7ee <spi1_exchange_bytes+0x22>
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	08 95       	ret

00000814 <usart0_send_char>:
 814:	e0 ec       	ldi	r30, 0xC0	; 192
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	90 81       	ld	r25, Z
 81a:	95 ff       	sbrs	r25, 5
 81c:	fd cf       	rjmp	.-6      	; 0x818 <usart0_send_char+0x4>
 81e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 822:	08 95       	ret

00000824 <setup_usart0>:
 824:	98 e9       	ldi	r25, 0x98	; 152
 826:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 82a:	96 e0       	ldi	r25, 0x06	; 6
 82c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 830:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 834:	08 95       	ret

00000836 <__subsf3>:
 836:	50 58       	subi	r21, 0x80	; 128

00000838 <__addsf3>:
 838:	bb 27       	eor	r27, r27
 83a:	aa 27       	eor	r26, r26
 83c:	0e 94 33 04 	call	0x866	; 0x866 <__addsf3x>
 840:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_round>
 844:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_pscA>
 848:	38 f0       	brcs	.+14     	; 0x858 <__addsf3+0x20>
 84a:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscB>
 84e:	20 f0       	brcs	.+8      	; 0x858 <__addsf3+0x20>
 850:	39 f4       	brne	.+14     	; 0x860 <__addsf3+0x28>
 852:	9f 3f       	cpi	r25, 0xFF	; 255
 854:	19 f4       	brne	.+6      	; 0x85c <__addsf3+0x24>
 856:	26 f4       	brtc	.+8      	; 0x860 <__addsf3+0x28>
 858:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_nan>
 85c:	0e f4       	brtc	.+2      	; 0x860 <__addsf3+0x28>
 85e:	e0 95       	com	r30
 860:	e7 fb       	bst	r30, 7
 862:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_inf>

00000866 <__addsf3x>:
 866:	e9 2f       	mov	r30, r25
 868:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_split3>
 86c:	58 f3       	brcs	.-42     	; 0x844 <__addsf3+0xc>
 86e:	ba 17       	cp	r27, r26
 870:	62 07       	cpc	r22, r18
 872:	73 07       	cpc	r23, r19
 874:	84 07       	cpc	r24, r20
 876:	95 07       	cpc	r25, r21
 878:	20 f0       	brcs	.+8      	; 0x882 <__addsf3x+0x1c>
 87a:	79 f4       	brne	.+30     	; 0x89a <__addsf3x+0x34>
 87c:	a6 f5       	brtc	.+104    	; 0x8e6 <__addsf3x+0x80>
 87e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_zero>
 882:	0e f4       	brtc	.+2      	; 0x886 <__addsf3x+0x20>
 884:	e0 95       	com	r30
 886:	0b 2e       	mov	r0, r27
 888:	ba 2f       	mov	r27, r26
 88a:	a0 2d       	mov	r26, r0
 88c:	0b 01       	movw	r0, r22
 88e:	b9 01       	movw	r22, r18
 890:	90 01       	movw	r18, r0
 892:	0c 01       	movw	r0, r24
 894:	ca 01       	movw	r24, r20
 896:	a0 01       	movw	r20, r0
 898:	11 24       	eor	r1, r1
 89a:	ff 27       	eor	r31, r31
 89c:	59 1b       	sub	r21, r25
 89e:	99 f0       	breq	.+38     	; 0x8c6 <__addsf3x+0x60>
 8a0:	59 3f       	cpi	r21, 0xF9	; 249
 8a2:	50 f4       	brcc	.+20     	; 0x8b8 <__addsf3x+0x52>
 8a4:	50 3e       	cpi	r21, 0xE0	; 224
 8a6:	68 f1       	brcs	.+90     	; 0x902 <__stack+0x3>
 8a8:	1a 16       	cp	r1, r26
 8aa:	f0 40       	sbci	r31, 0x00	; 0
 8ac:	a2 2f       	mov	r26, r18
 8ae:	23 2f       	mov	r18, r19
 8b0:	34 2f       	mov	r19, r20
 8b2:	44 27       	eor	r20, r20
 8b4:	58 5f       	subi	r21, 0xF8	; 248
 8b6:	f3 cf       	rjmp	.-26     	; 0x89e <__addsf3x+0x38>
 8b8:	46 95       	lsr	r20
 8ba:	37 95       	ror	r19
 8bc:	27 95       	ror	r18
 8be:	a7 95       	ror	r26
 8c0:	f0 40       	sbci	r31, 0x00	; 0
 8c2:	53 95       	inc	r21
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__addsf3x+0x52>
 8c6:	7e f4       	brtc	.+30     	; 0x8e6 <__addsf3x+0x80>
 8c8:	1f 16       	cp	r1, r31
 8ca:	ba 0b       	sbc	r27, r26
 8cc:	62 0b       	sbc	r22, r18
 8ce:	73 0b       	sbc	r23, r19
 8d0:	84 0b       	sbc	r24, r20
 8d2:	ba f0       	brmi	.+46     	; 0x902 <__stack+0x3>
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	a1 f0       	breq	.+40     	; 0x900 <__stack+0x1>
 8d8:	ff 0f       	add	r31, r31
 8da:	bb 1f       	adc	r27, r27
 8dc:	66 1f       	adc	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	c2 f7       	brpl	.-16     	; 0x8d4 <__addsf3x+0x6e>
 8e4:	0e c0       	rjmp	.+28     	; 0x902 <__stack+0x3>
 8e6:	ba 0f       	add	r27, r26
 8e8:	62 1f       	adc	r22, r18
 8ea:	73 1f       	adc	r23, r19
 8ec:	84 1f       	adc	r24, r20
 8ee:	48 f4       	brcc	.+18     	; 0x902 <__stack+0x3>
 8f0:	87 95       	ror	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b7 95       	ror	r27
 8f8:	f7 95       	ror	r31
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	08 f0       	brcs	.+2      	; 0x900 <__stack+0x1>
 8fe:	b0 cf       	rjmp	.-160    	; 0x860 <__addsf3+0x28>
 900:	93 95       	inc	r25
 902:	88 0f       	add	r24, r24
 904:	08 f0       	brcs	.+2      	; 0x908 <__stack+0x9>
 906:	99 27       	eor	r25, r25
 908:	ee 0f       	add	r30, r30
 90a:	97 95       	ror	r25
 90c:	87 95       	ror	r24
 90e:	08 95       	ret

00000910 <__fixsfsi>:
 910:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
 914:	68 94       	set
 916:	b1 11       	cpse	r27, r1
 918:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_szero>
 91c:	08 95       	ret

0000091e <__fixunssfsi>:
 91e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_splitA>
 922:	88 f0       	brcs	.+34     	; 0x946 <__fixunssfsi+0x28>
 924:	9f 57       	subi	r25, 0x7F	; 127
 926:	98 f0       	brcs	.+38     	; 0x94e <__fixunssfsi+0x30>
 928:	b9 2f       	mov	r27, r25
 92a:	99 27       	eor	r25, r25
 92c:	b7 51       	subi	r27, 0x17	; 23
 92e:	b0 f0       	brcs	.+44     	; 0x95c <__fixunssfsi+0x3e>
 930:	e1 f0       	breq	.+56     	; 0x96a <__fixunssfsi+0x4c>
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	1a f0       	brmi	.+6      	; 0x942 <__fixunssfsi+0x24>
 93c:	ba 95       	dec	r27
 93e:	c9 f7       	brne	.-14     	; 0x932 <__fixunssfsi+0x14>
 940:	14 c0       	rjmp	.+40     	; 0x96a <__fixunssfsi+0x4c>
 942:	b1 30       	cpi	r27, 0x01	; 1
 944:	91 f0       	breq	.+36     	; 0x96a <__fixunssfsi+0x4c>
 946:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_zero>
 94a:	b1 e0       	ldi	r27, 0x01	; 1
 94c:	08 95       	ret
 94e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_zero>
 952:	67 2f       	mov	r22, r23
 954:	78 2f       	mov	r23, r24
 956:	88 27       	eor	r24, r24
 958:	b8 5f       	subi	r27, 0xF8	; 248
 95a:	39 f0       	breq	.+14     	; 0x96a <__fixunssfsi+0x4c>
 95c:	b9 3f       	cpi	r27, 0xF9	; 249
 95e:	cc f3       	brlt	.-14     	; 0x952 <__fixunssfsi+0x34>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b3 95       	inc	r27
 968:	d9 f7       	brne	.-10     	; 0x960 <__fixunssfsi+0x42>
 96a:	3e f4       	brtc	.+14     	; 0x97a <__fixunssfsi+0x5c>
 96c:	90 95       	com	r25
 96e:	80 95       	com	r24
 970:	70 95       	com	r23
 972:	61 95       	neg	r22
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <__floatunsisf>:
 97c:	e8 94       	clt
 97e:	09 c0       	rjmp	.+18     	; 0x992 <__floatsisf+0x12>

00000980 <__floatsisf>:
 980:	97 fb       	bst	r25, 7
 982:	3e f4       	brtc	.+14     	; 0x992 <__floatsisf+0x12>
 984:	90 95       	com	r25
 986:	80 95       	com	r24
 988:	70 95       	com	r23
 98a:	61 95       	neg	r22
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	99 23       	and	r25, r25
 994:	a9 f0       	breq	.+42     	; 0x9c0 <__floatsisf+0x40>
 996:	f9 2f       	mov	r31, r25
 998:	96 e9       	ldi	r25, 0x96	; 150
 99a:	bb 27       	eor	r27, r27
 99c:	93 95       	inc	r25
 99e:	f6 95       	lsr	r31
 9a0:	87 95       	ror	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f1 11       	cpse	r31, r1
 9aa:	f8 cf       	rjmp	.-16     	; 0x99c <__floatsisf+0x1c>
 9ac:	fa f4       	brpl	.+62     	; 0x9ec <__floatsisf+0x6c>
 9ae:	bb 0f       	add	r27, r27
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__floatsisf+0x36>
 9b2:	60 ff       	sbrs	r22, 0
 9b4:	1b c0       	rjmp	.+54     	; 0x9ec <__floatsisf+0x6c>
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	16 c0       	rjmp	.+44     	; 0x9ec <__floatsisf+0x6c>
 9c0:	88 23       	and	r24, r24
 9c2:	11 f0       	breq	.+4      	; 0x9c8 <__floatsisf+0x48>
 9c4:	96 e9       	ldi	r25, 0x96	; 150
 9c6:	11 c0       	rjmp	.+34     	; 0x9ea <__floatsisf+0x6a>
 9c8:	77 23       	and	r23, r23
 9ca:	21 f0       	breq	.+8      	; 0x9d4 <__floatsisf+0x54>
 9cc:	9e e8       	ldi	r25, 0x8E	; 142
 9ce:	87 2f       	mov	r24, r23
 9d0:	76 2f       	mov	r23, r22
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__floatsisf+0x5e>
 9d4:	66 23       	and	r22, r22
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__floatsisf+0x74>
 9d8:	96 e8       	ldi	r25, 0x86	; 134
 9da:	86 2f       	mov	r24, r22
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	2a f0       	brmi	.+10     	; 0x9ec <__floatsisf+0x6c>
 9e2:	9a 95       	dec	r25
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	da f7       	brpl	.-10     	; 0x9e2 <__floatsisf+0x62>
 9ec:	88 0f       	add	r24, r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__fp_inf>:
 9f6:	97 f9       	bld	r25, 7
 9f8:	9f 67       	ori	r25, 0x7F	; 127
 9fa:	80 e8       	ldi	r24, 0x80	; 128
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	08 95       	ret

00000a02 <__fp_nan>:
 a02:	9f ef       	ldi	r25, 0xFF	; 255
 a04:	80 ec       	ldi	r24, 0xC0	; 192
 a06:	08 95       	ret

00000a08 <__fp_pscA>:
 a08:	00 24       	eor	r0, r0
 a0a:	0a 94       	dec	r0
 a0c:	16 16       	cp	r1, r22
 a0e:	17 06       	cpc	r1, r23
 a10:	18 06       	cpc	r1, r24
 a12:	09 06       	cpc	r0, r25
 a14:	08 95       	ret

00000a16 <__fp_pscB>:
 a16:	00 24       	eor	r0, r0
 a18:	0a 94       	dec	r0
 a1a:	12 16       	cp	r1, r18
 a1c:	13 06       	cpc	r1, r19
 a1e:	14 06       	cpc	r1, r20
 a20:	05 06       	cpc	r0, r21
 a22:	08 95       	ret

00000a24 <__fp_round>:
 a24:	09 2e       	mov	r0, r25
 a26:	03 94       	inc	r0
 a28:	00 0c       	add	r0, r0
 a2a:	11 f4       	brne	.+4      	; 0xa30 <__fp_round+0xc>
 a2c:	88 23       	and	r24, r24
 a2e:	52 f0       	brmi	.+20     	; 0xa44 <__fp_round+0x20>
 a30:	bb 0f       	add	r27, r27
 a32:	40 f4       	brcc	.+16     	; 0xa44 <__fp_round+0x20>
 a34:	bf 2b       	or	r27, r31
 a36:	11 f4       	brne	.+4      	; 0xa3c <__fp_round+0x18>
 a38:	60 ff       	sbrs	r22, 0
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <__fp_round+0x20>
 a3c:	6f 5f       	subi	r22, 0xFF	; 255
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	8f 4f       	sbci	r24, 0xFF	; 255
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	08 95       	ret

00000a46 <__fp_split3>:
 a46:	57 fd       	sbrc	r21, 7
 a48:	90 58       	subi	r25, 0x80	; 128
 a4a:	44 0f       	add	r20, r20
 a4c:	55 1f       	adc	r21, r21
 a4e:	59 f0       	breq	.+22     	; 0xa66 <__fp_splitA+0x10>
 a50:	5f 3f       	cpi	r21, 0xFF	; 255
 a52:	71 f0       	breq	.+28     	; 0xa70 <__fp_splitA+0x1a>
 a54:	47 95       	ror	r20

00000a56 <__fp_splitA>:
 a56:	88 0f       	add	r24, r24
 a58:	97 fb       	bst	r25, 7
 a5a:	99 1f       	adc	r25, r25
 a5c:	61 f0       	breq	.+24     	; 0xa76 <__fp_splitA+0x20>
 a5e:	9f 3f       	cpi	r25, 0xFF	; 255
 a60:	79 f0       	breq	.+30     	; 0xa80 <__fp_splitA+0x2a>
 a62:	87 95       	ror	r24
 a64:	08 95       	ret
 a66:	12 16       	cp	r1, r18
 a68:	13 06       	cpc	r1, r19
 a6a:	14 06       	cpc	r1, r20
 a6c:	55 1f       	adc	r21, r21
 a6e:	f2 cf       	rjmp	.-28     	; 0xa54 <__fp_split3+0xe>
 a70:	46 95       	lsr	r20
 a72:	f1 df       	rcall	.-30     	; 0xa56 <__fp_splitA>
 a74:	08 c0       	rjmp	.+16     	; 0xa86 <__fp_splitA+0x30>
 a76:	16 16       	cp	r1, r22
 a78:	17 06       	cpc	r1, r23
 a7a:	18 06       	cpc	r1, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	f1 cf       	rjmp	.-30     	; 0xa62 <__fp_splitA+0xc>
 a80:	86 95       	lsr	r24
 a82:	71 05       	cpc	r23, r1
 a84:	61 05       	cpc	r22, r1
 a86:	08 94       	sec
 a88:	08 95       	ret

00000a8a <__fp_zero>:
 a8a:	e8 94       	clt

00000a8c <__fp_szero>:
 a8c:	bb 27       	eor	r27, r27
 a8e:	66 27       	eor	r22, r22
 a90:	77 27       	eor	r23, r23
 a92:	cb 01       	movw	r24, r22
 a94:	97 f9       	bld	r25, 7
 a96:	08 95       	ret

00000a98 <__mulsf3>:
 a98:	0e 94 5f 05 	call	0xabe	; 0xabe <__mulsf3x>
 a9c:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_round>
 aa0:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_pscA>
 aa4:	38 f0       	brcs	.+14     	; 0xab4 <__mulsf3+0x1c>
 aa6:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscB>
 aaa:	20 f0       	brcs	.+8      	; 0xab4 <__mulsf3+0x1c>
 aac:	95 23       	and	r25, r21
 aae:	11 f0       	breq	.+4      	; 0xab4 <__mulsf3+0x1c>
 ab0:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_inf>
 ab4:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_nan>
 ab8:	11 24       	eor	r1, r1
 aba:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_szero>

00000abe <__mulsf3x>:
 abe:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_split3>
 ac2:	70 f3       	brcs	.-36     	; 0xaa0 <__mulsf3+0x8>

00000ac4 <__mulsf3_pse>:
 ac4:	95 9f       	mul	r25, r21
 ac6:	c1 f3       	breq	.-16     	; 0xab8 <__mulsf3+0x20>
 ac8:	95 0f       	add	r25, r21
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	55 1f       	adc	r21, r21
 ace:	62 9f       	mul	r22, r18
 ad0:	f0 01       	movw	r30, r0
 ad2:	72 9f       	mul	r23, r18
 ad4:	bb 27       	eor	r27, r27
 ad6:	f0 0d       	add	r31, r0
 ad8:	b1 1d       	adc	r27, r1
 ada:	63 9f       	mul	r22, r19
 adc:	aa 27       	eor	r26, r26
 ade:	f0 0d       	add	r31, r0
 ae0:	b1 1d       	adc	r27, r1
 ae2:	aa 1f       	adc	r26, r26
 ae4:	64 9f       	mul	r22, r20
 ae6:	66 27       	eor	r22, r22
 ae8:	b0 0d       	add	r27, r0
 aea:	a1 1d       	adc	r26, r1
 aec:	66 1f       	adc	r22, r22
 aee:	82 9f       	mul	r24, r18
 af0:	22 27       	eor	r18, r18
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	62 1f       	adc	r22, r18
 af8:	73 9f       	mul	r23, r19
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	62 1f       	adc	r22, r18
 b00:	83 9f       	mul	r24, r19
 b02:	a0 0d       	add	r26, r0
 b04:	61 1d       	adc	r22, r1
 b06:	22 1f       	adc	r18, r18
 b08:	74 9f       	mul	r23, r20
 b0a:	33 27       	eor	r19, r19
 b0c:	a0 0d       	add	r26, r0
 b0e:	61 1d       	adc	r22, r1
 b10:	23 1f       	adc	r18, r19
 b12:	84 9f       	mul	r24, r20
 b14:	60 0d       	add	r22, r0
 b16:	21 1d       	adc	r18, r1
 b18:	82 2f       	mov	r24, r18
 b1a:	76 2f       	mov	r23, r22
 b1c:	6a 2f       	mov	r22, r26
 b1e:	11 24       	eor	r1, r1
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	9a f0       	brmi	.+38     	; 0xb4c <__mulsf3_pse+0x88>
 b26:	f1 f0       	breq	.+60     	; 0xb64 <__mulsf3_pse+0xa0>
 b28:	88 23       	and	r24, r24
 b2a:	4a f0       	brmi	.+18     	; 0xb3e <__mulsf3_pse+0x7a>
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	bb 1f       	adc	r27, r27
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__mulsf3_pse+0x64>
 b3e:	9e 3f       	cpi	r25, 0xFE	; 254
 b40:	51 05       	cpc	r21, r1
 b42:	80 f0       	brcs	.+32     	; 0xb64 <__mulsf3_pse+0xa0>
 b44:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_inf>
 b48:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_szero>
 b4c:	5f 3f       	cpi	r21, 0xFF	; 255
 b4e:	e4 f3       	brlt	.-8      	; 0xb48 <__mulsf3_pse+0x84>
 b50:	98 3e       	cpi	r25, 0xE8	; 232
 b52:	d4 f3       	brlt	.-12     	; 0xb48 <__mulsf3_pse+0x84>
 b54:	86 95       	lsr	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	b7 95       	ror	r27
 b5c:	f7 95       	ror	r31
 b5e:	e7 95       	ror	r30
 b60:	9f 5f       	subi	r25, 0xFF	; 255
 b62:	c1 f7       	brne	.-16     	; 0xb54 <__mulsf3_pse+0x90>
 b64:	fe 2b       	or	r31, r30
 b66:	88 0f       	add	r24, r24
 b68:	91 1d       	adc	r25, r1
 b6a:	96 95       	lsr	r25
 b6c:	87 95       	ror	r24
 b6e:	97 f9       	bld	r25, 7
 b70:	08 95       	ret

00000b72 <__divmodhi4>:
 b72:	97 fb       	bst	r25, 7
 b74:	07 2e       	mov	r0, r23
 b76:	16 f4       	brtc	.+4      	; 0xb7c <__divmodhi4+0xa>
 b78:	00 94       	com	r0
 b7a:	07 d0       	rcall	.+14     	; 0xb8a <__divmodhi4_neg1>
 b7c:	77 fd       	sbrc	r23, 7
 b7e:	09 d0       	rcall	.+18     	; 0xb92 <__divmodhi4_neg2>
 b80:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__udivmodhi4>
 b84:	07 fc       	sbrc	r0, 7
 b86:	05 d0       	rcall	.+10     	; 0xb92 <__divmodhi4_neg2>
 b88:	3e f4       	brtc	.+14     	; 0xb98 <__divmodhi4_exit>

00000b8a <__divmodhi4_neg1>:
 b8a:	90 95       	com	r25
 b8c:	81 95       	neg	r24
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <__divmodhi4_neg2>:
 b92:	70 95       	com	r23
 b94:	61 95       	neg	r22
 b96:	7f 4f       	sbci	r23, 0xFF	; 255

00000b98 <__divmodhi4_exit>:
 b98:	08 95       	ret

00000b9a <__udivmodhi4>:
 b9a:	aa 1b       	sub	r26, r26
 b9c:	bb 1b       	sub	r27, r27
 b9e:	51 e1       	ldi	r21, 0x11	; 17
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__udivmodhi4_ep>

00000ba2 <__udivmodhi4_loop>:
 ba2:	aa 1f       	adc	r26, r26
 ba4:	bb 1f       	adc	r27, r27
 ba6:	a6 17       	cp	r26, r22
 ba8:	b7 07       	cpc	r27, r23
 baa:	10 f0       	brcs	.+4      	; 0xbb0 <__udivmodhi4_ep>
 bac:	a6 1b       	sub	r26, r22
 bae:	b7 0b       	sbc	r27, r23

00000bb0 <__udivmodhi4_ep>:
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	5a 95       	dec	r21
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__udivmodhi4_loop>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	bc 01       	movw	r22, r24
 bbe:	cd 01       	movw	r24, r26
 bc0:	08 95       	ret

00000bc2 <__itoa_ncheck>:
 bc2:	bb 27       	eor	r27, r27
 bc4:	4a 30       	cpi	r20, 0x0A	; 10
 bc6:	31 f4       	brne	.+12     	; 0xbd4 <__itoa_ncheck+0x12>
 bc8:	99 23       	and	r25, r25
 bca:	22 f4       	brpl	.+8      	; 0xbd4 <__itoa_ncheck+0x12>
 bcc:	bd e2       	ldi	r27, 0x2D	; 45
 bce:	90 95       	com	r25
 bd0:	81 95       	neg	r24
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__utoa_common>

00000bd8 <__utoa_ncheck>:
 bd8:	bb 27       	eor	r27, r27

00000bda <__utoa_common>:
 bda:	fb 01       	movw	r30, r22
 bdc:	55 27       	eor	r21, r21
 bde:	aa 27       	eor	r26, r26
 be0:	88 0f       	add	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	aa 1f       	adc	r26, r26
 be6:	a4 17       	cp	r26, r20
 be8:	10 f0       	brcs	.+4      	; 0xbee <__utoa_common+0x14>
 bea:	a4 1b       	sub	r26, r20
 bec:	83 95       	inc	r24
 bee:	50 51       	subi	r21, 0x10	; 16
 bf0:	b9 f7       	brne	.-18     	; 0xbe0 <__utoa_common+0x6>
 bf2:	a0 5d       	subi	r26, 0xD0	; 208
 bf4:	aa 33       	cpi	r26, 0x3A	; 58
 bf6:	08 f0       	brcs	.+2      	; 0xbfa <__utoa_common+0x20>
 bf8:	a9 5d       	subi	r26, 0xD9	; 217
 bfa:	a1 93       	st	Z+, r26
 bfc:	00 97       	sbiw	r24, 0x00	; 0
 bfe:	79 f7       	brne	.-34     	; 0xbde <__utoa_common+0x4>
 c00:	b1 11       	cpse	r27, r1
 c02:	b1 93       	st	Z+, r27
 c04:	11 92       	st	Z+, r1
 c06:	cb 01       	movw	r24, r22
 c08:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <strrev>

00000c0c <strrev>:
 c0c:	dc 01       	movw	r26, r24
 c0e:	fc 01       	movw	r30, r24
 c10:	67 2f       	mov	r22, r23
 c12:	71 91       	ld	r23, Z+
 c14:	77 23       	and	r23, r23
 c16:	e1 f7       	brne	.-8      	; 0xc10 <strrev+0x4>
 c18:	32 97       	sbiw	r30, 0x02	; 2
 c1a:	04 c0       	rjmp	.+8      	; 0xc24 <strrev+0x18>
 c1c:	7c 91       	ld	r23, X
 c1e:	6d 93       	st	X+, r22
 c20:	70 83       	st	Z, r23
 c22:	62 91       	ld	r22, -Z
 c24:	ae 17       	cp	r26, r30
 c26:	bf 07       	cpc	r27, r31
 c28:	c8 f3       	brcs	.-14     	; 0xc1c <strrev+0x10>
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
