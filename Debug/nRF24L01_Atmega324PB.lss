
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080012e  0080012e  0000077c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002659  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001028  00000000  00000000  0000303d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001277  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  000052dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cf  00000000  00000000  00005874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c09  00000000  00000000  00006143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea eb       	ldi	r30, 0xBA	; 186
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 32       	cpi	r26, 0x2E	; 46
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e2       	ldi	r26, 0x2E	; 46
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a1 33       	cpi	r26, 0x31	; 49
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 102:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
    }
}

void setup_gpios()
{
	LED_DDR |= (1<<LED_PIN); // set LED gpio as output 
 10a:	20 9a       	sbi	0x04, 0	; 4
 10c:	08 95       	ret

0000010e <main>:
uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

int main(void)
{
	setup_gpios();
 10e:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 f5 02 	call	0x5ea	; 0x5ea <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 118:	0e 94 bd 02 	call	0x57a	; 0x57a <spi1_master_initialize>
	mirf_init();
 11c:	0e 94 35 01 	call	0x26a	; 0x26a <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	38 e3       	ldi	r19, 0x38	; 56
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x22>
 130:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 132:	95 b1       	in	r25, 0x05	; 5
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 27       	eor	r25, r24
 138:	95 b9       	out	0x05, r25	; 5
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	20 e7       	ldi	r18, 0x70	; 112
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	98 27       	eor	r25, r24
 150:	95 b9       	out	0x05, r25	; 5
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	20 e7       	ldi	r18, 0x70	; 112
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x54>
 162:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 164:	95 b1       	in	r25, 0x05	; 5
 166:	98 27       	eor	r25, r24
 168:	95 b9       	out	0x05, r25	; 5
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	20 e7       	ldi	r18, 0x70	; 112
 16e:	32 e0       	ldi	r19, 0x02	; 2
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x62>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x6c>
 17a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	98 27       	eor	r25, r24
 180:	95 b9       	out	0x05, r25	; 5
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	20 e7       	ldi	r18, 0x70	; 112
 186:	32 e0       	ldi	r19, 0x02	; 2
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 194:	95 b1       	in	r25, 0x05	; 5
 196:	98 27       	eor	r25, r24
 198:	95 b9       	out	0x05, r25	; 5
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x92>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x9c>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	98 27       	eor	r25, r24
 1b0:	95 b9       	out	0x05, r25	; 5
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	20 e7       	ldi	r18, 0x70	; 112
 1b6:	32 e0       	ldi	r19, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xaa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb4>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	98 27       	eor	r25, r24
 1c8:	95 b9       	out	0x05, r25	; 5
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xc2>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xcc>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	89 27       	eor	r24, r25
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	99 e6       	ldi	r25, 0x69	; 105
 1e6:	28 e1       	ldi	r18, 0x18	; 24
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xda>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xe4>
 1f2:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 1f4:	78 94       	sei
	
	//mirf_config_register(EN_AA, (0<<0)); // disable auto ACK for pipe 0
	//mirf_config_register(EN_AA, (0<<1));

	mirf_config();
 1f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mirf_config>
	
	mirf_set_TADDR(tx_address);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 c4 01 	call	0x388	; 0x388 <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 bc 01 	call	0x378	; 0x378 <mirf_set_RADDR>

	println_0("nRF24L01 initialized...;");
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 41 02 	call	0x482	; 0x482 <println_0>
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	9e e4       	ldi	r25, 0x4E	; 78
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x108>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x10e>
 21c:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		print_char_0(',');
		buffer[0]++;
 21e:	ce e2       	ldi	r28, 0x2E	; 46
 220:	d1 e0       	ldi	r29, 0x01	; 1
		//buffer[1] = 2;
		TOGGLE_LED;
 222:	11 e0       	ldi	r17, 0x01	; 1
	println_0("nRF24L01 initialized...;");
	_delay_ms(10);

    while (1) 
    {
		print_char_0(',');
 224:	8c e2       	ldi	r24, 0x2C	; 44
 226:	0e 94 3e 02 	call	0x47c	; 0x47c <print_char_0>
		buffer[0]++;
 22a:	88 81       	ld	r24, Y
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	88 83       	st	Y, r24
		//buffer[1] = 2;
		TOGGLE_LED;
 230:	85 b1       	in	r24, 0x05	; 5
 232:	81 27       	eor	r24, r17
 234:	85 b9       	out	0x05, r24	; 5
		//println_0("Sending data...;");
		//_delay_ms(1);
		mirf_send(buffer, mirf_PAYLOAD);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	9a e1       	ldi	r25, 0x1A	; 26
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x132>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x138>
		_delay_us(10);
		while (!mirf_data_sent());
 246:	0e 94 43 01 	call	0x286	; 0x286 <mirf_data_sent>
 24a:	88 23       	and	r24, r24
 24c:	e1 f3       	breq	.-8      	; 0x246 <main+0x138>
		mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
 24e:	60 e3       	ldi	r22, 0x30	; 48
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	30 e7       	ldi	r19, 0x70	; 112
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x14e>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x158>
 266:	00 00       	nop
 268:	dd cf       	rjmp	.-70     	; 0x224 <main+0x116>

0000026a <mirf_init>:
	mirf_CSN_lo;
	spi1_send_char(R_REGISTER | (REGISTER_MASK & reg));
	spi1_exchange_bytes(value, value, len);
	mirf_CSN_hi;
	_delay_us(25);
}
 26a:	54 9a       	sbi	0x0a, 4	; 10
 26c:	56 9a       	sbi	0x0a, 6	; 10
 26e:	5c 98       	cbi	0x0b, 4	; 11
 270:	5e 9a       	sbi	0x0b, 6	; 11
 272:	e8 98       	cbi	0x1d, 0	; 29
 274:	e9 e6       	ldi	r30, 0x69	; 105
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	80 83       	st	Z, r24
 27e:	e8 9a       	sbi	0x1d, 0	; 29
 280:	0e 94 bd 02 	call	0x57a	; 0x57a <spi1_master_initialize>
 284:	08 95       	ret

00000286 <mirf_data_sent>:
 286:	cf 93       	push	r28
 288:	5e 98       	cbi	0x0b, 6	; 11
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	0e 94 cc 02 	call	0x598	; 0x598 <spi1_exchange_char>
 290:	c8 2f       	mov	r28, r24
 292:	5e 9a       	sbi	0x0b, 6	; 11
 294:	08 2e       	mov	r0, r24
 296:	00 0c       	add	r0, r0
 298:	99 0b       	sbc	r25, r25
 29a:	0e 94 67 02 	call	0x4ce	; 0x4ce <println_int_0>
 29e:	8c 2f       	mov	r24, r28
 2a0:	80 72       	andi	r24, 0x20	; 32
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <mirf_config_register>:
 2a6:	cf 93       	push	r28
 2a8:	c6 2f       	mov	r28, r22
 2aa:	5e 98       	cbi	0x0b, 6	; 11
 2ac:	8f 71       	andi	r24, 0x1F	; 31
 2ae:	80 62       	ori	r24, 0x20	; 32
 2b0:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <mirf_config_register+0x10>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <mirf_config_register+0x16>
 2bc:	8c 2f       	mov	r24, r28
 2be:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
 2c2:	5e 9a       	sbi	0x0b, 6	; 11
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <mirf_config_register+0x20>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <mirf_config_register+0x26>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <mirf_config>:
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e1       	ldi	r24, 0x11	; 17
 2dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	82 e1       	ldi	r24, 0x12	; 18
 2e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	83 e1       	ldi	r24, 0x13	; 19
 2ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	85 e1       	ldi	r24, 0x15	; 21
 2fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	86 e1       	ldi	r24, 0x16	; 22
 304:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 308:	66 e2       	ldi	r22, 0x26	; 38
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 320:	6f e4       	ldi	r22, 0x4F	; 79
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 328:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
 32c:	60 e7       	ldi	r22, 0x70	; 112
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 334:	5e 98       	cbi	0x0b, 6	; 11
 336:	81 ee       	ldi	r24, 0xE1	; 225
 338:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
 33c:	5e 9a       	sbi	0x0b, 6	; 11
 33e:	6b e5       	ldi	r22, 0x5B	; 91
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
 346:	5c 9a       	sbi	0x0b, 4	; 11
 348:	08 95       	ret

0000034a <mirf_write_register>:

void mirf_write_register(char reg, char *value, char len)
// Writes an array of bytes into the the MiRF registers.
{
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	eb 01       	movw	r28, r22
 352:	14 2f       	mov	r17, r20
	mirf_CSN_lo;
 354:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_REGISTER | (REGISTER_MASK & reg));
 356:	8f 71       	andi	r24, 0x1F	; 31
 358:	80 62       	ori	r24, 0x20	; 32
 35a:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
	spi1_send_bytes(value, len);
 35e:	61 2f       	mov	r22, r17
 360:	ce 01       	movw	r24, r28
 362:	0e 94 d6 02 	call	0x5ac	; 0x5ac <spi1_send_bytes>
	mirf_CSN_hi;
 366:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <mirf_write_register+0x20>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <mirf_write_register+0x26>
	_delay_us(25);
	
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	08 95       	ret

00000378 <mirf_set_RADDR>:
}

void mirf_set_RADDR(char *adr)
// Sets the receiving address
{
	mirf_CE_lo;
 378:	5c 98       	cbi	0x0b, 4	; 11
	mirf_write_register(RX_ADDR_P1, adr, 5);
 37a:	45 e0       	ldi	r20, 0x05	; 5
 37c:	bc 01       	movw	r22, r24
 37e:	8b e0       	ldi	r24, 0x0B	; 11
 380:	0e 94 a5 01 	call	0x34a	; 0x34a <mirf_write_register>
	mirf_CE_hi;
 384:	5c 9a       	sbi	0x0b, 4	; 11
 386:	08 95       	ret

00000388 <mirf_set_TADDR>:
}

void mirf_set_TADDR(char *adr)
// Sets the transmitting address
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	mirf_write_register(RX_ADDR_P0, adr, 5);
 38e:	45 e0       	ldi	r20, 0x05	; 5
 390:	bc 01       	movw	r22, r24
 392:	8a e0       	ldi	r24, 0x0A	; 10
 394:	0e 94 a5 01 	call	0x34a	; 0x34a <mirf_write_register>
	mirf_write_register(TX_ADDR, adr, 5);
 398:	45 e0       	ldi	r20, 0x05	; 5
 39a:	be 01       	movw	r22, r28
 39c:	80 e1       	ldi	r24, 0x10	; 16
 39e:	0e 94 a5 01 	call	0x34a	; 0x34a <mirf_write_register>
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <mirf_send>:
}

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
 3b0:	16 2f       	mov	r17, r22
	while (PTX)
 3b2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 3b6:	88 23       	and	r24, r24
 3b8:	41 f0       	breq	.+16     	; 0x3ca <mirf_send+0x22>
	{
		println_0("while(PTX)")	;
 3ba:	83 e2       	ldi	r24, 0x23	; 35
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 41 02 	call	0x482	; 0x482 <println_0>

void mirf_send(char *value, char len)
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
	while (PTX)
 3c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 3c6:	81 11       	cpse	r24, r1
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <mirf_send+0x12>
	{
		println_0("while(PTX)")	;
	} // Wait until last packet is send

	mirf_CE_lo;
 3ca:	5c 98       	cbi	0x0b, 4	; 11

	PTX = 1;    // Set to transmitter mode
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <PTX>
	//print("in mirf_send, PTX set to ;");
	//println_int(PTX);
	//print_char_0(NL);
	TX_POWERUP; // Power up
 3d2:	6a e5       	ldi	r22, 0x5A	; 90
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>

	mirf_CSN_lo;                 // Pull down chip select
 3da:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(FLUSH_TX); // Write cmd to flush tx fifo
 3dc:	81 ee       	ldi	r24, 0xE1	; 225
 3de:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
	mirf_CSN_hi;                 // Pull up chip select
 3e2:	5e 9a       	sbi	0x0b, 6	; 11
 3e4:	82 e4       	ldi	r24, 0x42	; 66
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <mirf_send+0x3e>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <mirf_send+0x44>
	_delay_us(25);
	
	mirf_config_register(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 3ec:	60 e7       	ldi	r22, 0x70	; 112
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
	
	mirf_CSN_lo;                     // Pull down chip select
 3f4:	5e 98       	cbi	0x0b, 6	; 11
	spi1_send_char(W_TX_PAYLOAD); // Write cmd to write payload
 3f6:	80 ea       	ldi	r24, 0xA0	; 160
 3f8:	0e 94 c4 02 	call	0x588	; 0x588 <spi1_send_char>
 3fc:	82 e4       	ldi	r24, 0x42	; 66
 3fe:	8a 95       	dec	r24
 400:	f1 f7       	brne	.-4      	; 0x3fe <mirf_send+0x56>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	_delay_us(25);
	spi1_send_bytes(value, len);      // Write payload
 404:	61 2f       	mov	r22, r17
 406:	ce 01       	movw	r24, r28
 408:	0e 94 d6 02 	call	0x5ac	; 0x5ac <spi1_send_bytes>
 40c:	82 e4       	ldi	r24, 0x42	; 66
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select
 414:	5e 9a       	sbi	0x0b, 6	; 11

	mirf_CE_hi; // Start transmission
 416:	5c 9a       	sbi	0x0b, 4	; 11
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	08 95       	ret

00000420 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	//char status;
	// If still in transmitting mode then finish transmission
	
	if (PTX)
 442:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 446:	88 23       	and	r24, r24
 448:	41 f0       	breq	.+16     	; 0x45a <__vector_1+0x3a>
		//status = spi1_exchange_char(NOP); // Read status register
		//print_0("STATUS: ;");
		//println_int_0(status);
		//mirf_CSN_hi;                     // Pull up chip select
		//_delay_us(25);
		mirf_CE_lo;                             // Deactivate transreceiver
 44a:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 44c:	6b e5       	ldi	r22, 0x5B	; 91
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config_register>
		mirf_CE_hi;                             // Listening for packets
 454:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode
 456:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
	
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <print_char_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 47c:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
 480:	08 95       	ret

00000482 <println_0>:
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	8c 01       	movw	r16, r24
 48c:	fc 01       	movw	r30, r24
 48e:	80 81       	ld	r24, Z
 490:	8a 30       	cpi	r24, 0x0A	; 10
 492:	69 f0       	breq	.+26     	; 0x4ae <println_0+0x2c>
 494:	8b 33       	cpi	r24, 0x3B	; 59
 496:	79 f4       	brne	.+30     	; 0x4b6 <println_0+0x34>
 498:	0a c0       	rjmp	.+20     	; 0x4ae <println_0+0x2c>
 49a:	89 91       	ld	r24, Y+
 49c:	8a 30       	cpi	r24, 0x0A	; 10
 49e:	39 f0       	breq	.+14     	; 0x4ae <println_0+0x2c>
 4a0:	8b 33       	cpi	r24, 0x3B	; 59
 4a2:	29 f0       	breq	.+10     	; 0x4ae <println_0+0x2c>
 4a4:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
 4a8:	0c 17       	cp	r16, r28
 4aa:	1d 07       	cpc	r17, r29
 4ac:	b1 f7       	brne	.-20     	; 0x49a <println_0+0x18>
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <println_0+0x42>
 4b6:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
 4ba:	e8 01       	movw	r28, r16
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	08 53       	subi	r16, 0x38	; 56
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	eb cf       	rjmp	.-42     	; 0x49a <println_0+0x18>
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <println_int_0>:

void println_int_0(int number)
{
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	e2 97       	sbiw	r28, 0x32	; 50
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	8c 01       	movw	r16, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	89 f1       	breq	.+98     	; 0x552 <println_int_0+0x84>
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
	{
		temp = temp /10;
 4f4:	ea e0       	ldi	r30, 0x0A	; 10
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <println_int_0+0x2e>
		num_digit++;
 4fa:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 4fc:	bf 01       	movw	r22, r30
 4fe:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__divmodhi4>
 502:	cb 01       	movw	r24, r22
		num_digit++;
 504:	79 01       	movw	r14, r18
 506:	4f ef       	ldi	r20, 0xFF	; 255
 508:	e4 1a       	sub	r14, r20
 50a:	f4 0a       	sbc	r15, r20
void println_int_0(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	a9 f7       	brne	.-22     	; 0x4fa <println_int_0+0x2c>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 510:	11 23       	and	r17, r17
 512:	24 f4       	brge	.+8      	; 0x51c <println_int_0+0x4e>
 514:	79 01       	movw	r14, r18
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	e8 0e       	add	r14, r24
 51a:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 51c:	4a e0       	ldi	r20, 0x0A	; 10
 51e:	be 01       	movw	r22, r28
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	c8 01       	movw	r24, r16
 526:	0e 94 26 03 	call	0x64c	; 0x64c <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 52a:	1e 14       	cp	r1, r14
 52c:	1f 04       	cpc	r1, r15
 52e:	6c f4       	brge	.+26     	; 0x54a <println_int_0+0x7c>
 530:	8e 01       	movw	r16, r28
 532:	0f 5f       	subi	r16, 0xFF	; 255
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	e0 0e       	add	r14, r16
 538:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 53a:	f8 01       	movw	r30, r16
 53c:	81 91       	ld	r24, Z+
 53e:	8f 01       	movw	r16, r30
 540:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 544:	0e 15       	cp	r16, r14
 546:	1f 05       	cpc	r17, r15
 548:	c1 f7       	brne	.-16     	; 0x53a <println_int_0+0x6c>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 54a:	8a e0       	ldi	r24, 0x0A	; 10
 54c:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0_send_char>
}
 550:	07 c0       	rjmp	.+14     	; 0x560 <println_int_0+0x92>
 552:	4a e0       	ldi	r20, 0x0A	; 10
 554:	be 01       	movw	r22, r28
 556:	6f 5f       	subi	r22, 0xFF	; 255
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	0e 94 26 03 	call	0x64c	; 0x64c <__itoa_ncheck>
 55e:	f5 cf       	rjmp	.-22     	; 0x54a <println_int_0+0x7c>
 560:	e2 96       	adiw	r28, 0x32	; 50
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	08 95       	ret

0000057a <spi1_master_initialize>:

void spi0_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 57a:	6b 9a       	sbi	0x0d, 3	; 13
 57c:	57 9a       	sbi	0x0a, 7	; 10
 57e:	56 9a       	sbi	0x0a, 6	; 10
 580:	82 e5       	ldi	r24, 0x52	; 82
 582:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 586:	08 95       	ret

00000588 <spi1_send_char>:
 588:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 58c:	ed ea       	ldi	r30, 0xAD	; 173
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	88 23       	and	r24, r24
 594:	ec f7       	brge	.-6      	; 0x590 <spi1_send_char+0x8>
 596:	08 95       	ret

00000598 <spi1_exchange_char>:
 598:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 59c:	ed ea       	ldi	r30, 0xAD	; 173
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	ec f7       	brge	.-6      	; 0x5a0 <spi1_exchange_char+0x8>
 5a6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 5aa:	08 95       	ret

000005ac <spi1_send_bytes>:
		while (!(SPSR0 & (1 << SPIF)))
		; // wait for transmission complete
	}
}
void spi1_send_bytes(char *pdata, char bytes)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 5b0:	66 23       	and	r22, r22
 5b2:	81 f0       	breq	.+32     	; 0x5d4 <spi1_send_bytes+0x28>
 5b4:	dc 01       	movw	r26, r24
 5b6:	9c 01       	movw	r18, r24
 5b8:	26 0f       	add	r18, r22
 5ba:	31 1d       	adc	r19, r1
	{
		SPDR1 = pdata[i]; // start transmission
 5bc:	ce ea       	ldi	r28, 0xAE	; 174
 5be:	d0 e0       	ldi	r29, 0x00	; 0
		while (!(SPSR1 & (1 << SPIF)))
 5c0:	ed ea       	ldi	r30, 0xAD	; 173
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = pdata[i]; // start transmission
 5c4:	9d 91       	ld	r25, X+
 5c6:	98 83       	st	Y, r25
		while (!(SPSR1 & (1 << SPIF)))
 5c8:	90 81       	ld	r25, Z
 5ca:	99 23       	and	r25, r25
 5cc:	ec f7       	brge	.-6      	; 0x5c8 <spi1_send_bytes+0x1c>
}
void spi1_send_bytes(char *pdata, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 5ce:	a2 17       	cp	r26, r18
 5d0:	b3 07       	cpc	r27, r19
 5d2:	c1 f7       	brne	.-16     	; 0x5c4 <spi1_send_bytes+0x18>
	{
		SPDR1 = pdata[i]; // start transmission
		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
	}
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 5da:	e0 ec       	ldi	r30, 0xC0	; 192
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	90 81       	ld	r25, Z
 5e0:	95 ff       	sbrs	r25, 5
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <usart0_send_char+0x4>
 5e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5e8:	08 95       	ret

000005ea <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 5ea:	98 e9       	ldi	r25, 0x98	; 152
 5ec:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 5f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5fa:	08 95       	ret

000005fc <__divmodhi4>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	07 2e       	mov	r0, r23
 600:	16 f4       	brtc	.+4      	; 0x606 <__divmodhi4+0xa>
 602:	00 94       	com	r0
 604:	07 d0       	rcall	.+14     	; 0x614 <__divmodhi4_neg1>
 606:	77 fd       	sbrc	r23, 7
 608:	09 d0       	rcall	.+18     	; 0x61c <__divmodhi4_neg2>
 60a:	0e 94 12 03 	call	0x624	; 0x624 <__udivmodhi4>
 60e:	07 fc       	sbrc	r0, 7
 610:	05 d0       	rcall	.+10     	; 0x61c <__divmodhi4_neg2>
 612:	3e f4       	brtc	.+14     	; 0x622 <__divmodhi4_exit>

00000614 <__divmodhi4_neg1>:
 614:	90 95       	com	r25
 616:	81 95       	neg	r24
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__divmodhi4_neg2>:
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255

00000622 <__divmodhi4_exit>:
 622:	08 95       	ret

00000624 <__udivmodhi4>:
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	51 e1       	ldi	r21, 0x11	; 17
 62a:	07 c0       	rjmp	.+14     	; 0x63a <__udivmodhi4_ep>

0000062c <__udivmodhi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	a6 17       	cp	r26, r22
 632:	b7 07       	cpc	r27, r23
 634:	10 f0       	brcs	.+4      	; 0x63a <__udivmodhi4_ep>
 636:	a6 1b       	sub	r26, r22
 638:	b7 0b       	sbc	r27, r23

0000063a <__udivmodhi4_ep>:
 63a:	88 1f       	adc	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	5a 95       	dec	r21
 640:	a9 f7       	brne	.-22     	; 0x62c <__udivmodhi4_loop>
 642:	80 95       	com	r24
 644:	90 95       	com	r25
 646:	bc 01       	movw	r22, r24
 648:	cd 01       	movw	r24, r26
 64a:	08 95       	ret

0000064c <__itoa_ncheck>:
 64c:	bb 27       	eor	r27, r27
 64e:	4a 30       	cpi	r20, 0x0A	; 10
 650:	31 f4       	brne	.+12     	; 0x65e <__itoa_ncheck+0x12>
 652:	99 23       	and	r25, r25
 654:	22 f4       	brpl	.+8      	; 0x65e <__itoa_ncheck+0x12>
 656:	bd e2       	ldi	r27, 0x2D	; 45
 658:	90 95       	com	r25
 65a:	81 95       	neg	r24
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	0c 94 32 03 	jmp	0x664	; 0x664 <__utoa_common>

00000662 <__utoa_ncheck>:
 662:	bb 27       	eor	r27, r27

00000664 <__utoa_common>:
 664:	fb 01       	movw	r30, r22
 666:	55 27       	eor	r21, r21
 668:	aa 27       	eor	r26, r26
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	aa 1f       	adc	r26, r26
 670:	a4 17       	cp	r26, r20
 672:	10 f0       	brcs	.+4      	; 0x678 <__utoa_common+0x14>
 674:	a4 1b       	sub	r26, r20
 676:	83 95       	inc	r24
 678:	50 51       	subi	r21, 0x10	; 16
 67a:	b9 f7       	brne	.-18     	; 0x66a <__utoa_common+0x6>
 67c:	a0 5d       	subi	r26, 0xD0	; 208
 67e:	aa 33       	cpi	r26, 0x3A	; 58
 680:	08 f0       	brcs	.+2      	; 0x684 <__utoa_common+0x20>
 682:	a9 5d       	subi	r26, 0xD9	; 217
 684:	a1 93       	st	Z+, r26
 686:	00 97       	sbiw	r24, 0x00	; 0
 688:	79 f7       	brne	.-34     	; 0x668 <__utoa_common+0x4>
 68a:	b1 11       	cpse	r27, r1
 68c:	b1 93       	st	Z+, r27
 68e:	11 92       	st	Z+, r1
 690:	cb 01       	movw	r24, r22
 692:	0c 94 4b 03 	jmp	0x696	; 0x696 <strrev>

00000696 <strrev>:
 696:	dc 01       	movw	r26, r24
 698:	fc 01       	movw	r30, r24
 69a:	67 2f       	mov	r22, r23
 69c:	71 91       	ld	r23, Z+
 69e:	77 23       	and	r23, r23
 6a0:	e1 f7       	brne	.-8      	; 0x69a <strrev+0x4>
 6a2:	32 97       	sbiw	r30, 0x02	; 2
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <strrev+0x18>
 6a6:	7c 91       	ld	r23, X
 6a8:	6d 93       	st	X+, r22
 6aa:	70 83       	st	Z, r23
 6ac:	62 91       	ld	r22, -Z
 6ae:	ae 17       	cp	r26, r30
 6b0:	bf 07       	cpc	r27, r31
 6b2:	c8 f3       	brcs	.-14     	; 0x6a6 <strrev+0x10>
 6b4:	08 95       	ret

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
