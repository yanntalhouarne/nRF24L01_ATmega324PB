
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000009ae  00000a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080012e  0080012e  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024eb  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001005  00000000  00000000  000031eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c3  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d8  00000000  00000000  000054b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000910  00000000  00000000  00005a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c45  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00007fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee ea       	ldi	r30, 0xAE	; 174
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 32       	cpi	r26, 0x2E	; 46
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e2       	ldi	r26, 0x2E	; 46
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a1 33       	cpi	r26, 0x31	; 49
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 aa 00 	call	0x154	; 0x154 <main>
 102:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
}

void move_motor_backward()
{
	IN1_PORT &= ~(1<<IN1);
	IN2_PORT |= (1<<IN2);
 10a:	20 9a       	sbi	0x04, 0	; 4
 10c:	08 95       	ret

0000010e <setup_pwm>:
 10e:	84 b5       	in	r24, 0x24	; 36
 110:	83 68       	ori	r24, 0x83	; 131
 112:	84 bd       	out	0x24, r24	; 36
 114:	85 b5       	in	r24, 0x25	; 37
 116:	81 60       	ori	r24, 0x01	; 1
 118:	85 bd       	out	0x25, r24	; 37
 11a:	08 95       	ret

0000011c <set_duty_cycle>:
 11c:	bc 01       	movw	r22, r24
 11e:	99 0f       	add	r25, r25
 120:	88 0b       	sbc	r24, r24
 122:	99 0b       	sbc	r25, r25
 124:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatsisf>
 128:	2a e0       	ldi	r18, 0x0A	; 10
 12a:	37 ed       	ldi	r19, 0xD7	; 215
 12c:	43 e2       	ldi	r20, 0x23	; 35
 12e:	50 e4       	ldi	r21, 0x40	; 64
 130:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	5f e3       	ldi	r21, 0x3F	; 63
 13c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__subsf3>
 140:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
 144:	67 bd       	out	0x27, r22	; 39
 146:	08 95       	ret

00000148 <move_motor_forward>:
 148:	29 9a       	sbi	0x05, 1	; 5
 14a:	2a 98       	cbi	0x05, 2	; 5
 14c:	08 95       	ret

0000014e <motor_off>:
}

void motor_off()
{
	PORTD |= (1<<IN1);
 14e:	59 9a       	sbi	0x0b, 1	; 11
	PORTC |= (1<<IN2);
 150:	42 9a       	sbi	0x08, 2	; 8
 152:	08 95       	ret

00000154 <main>:

uint8_t status = 0;

int main(void)
{
	setup_gpios();
 154:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 15e:	0e 94 8c 02 	call	0x518	; 0x518 <spi1_master_initialize>
	setup_pwm();
 162:	0e 94 87 00 	call	0x10e	; 0x10e <setup_pwm>
	mirf_init();
 166:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f e7       	ldi	r18, 0x7F	; 127
 16c:	38 e3       	ldi	r19, 0x38	; 56
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x1c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x26>
 17a:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	98 27       	eor	r25, r24
 182:	95 b9       	out	0x05, r25	; 5
 184:	9f ef       	ldi	r25, 0xFF	; 255
 186:	20 e7       	ldi	r18, 0x70	; 112
 188:	32 e0       	ldi	r19, 0x02	; 2
 18a:	91 50       	subi	r25, 0x01	; 1
 18c:	20 40       	sbci	r18, 0x00	; 0
 18e:	30 40       	sbci	r19, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x36>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x40>
 194:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 196:	95 b1       	in	r25, 0x05	; 5
 198:	98 27       	eor	r25, r24
 19a:	95 b9       	out	0x05, r25	; 5
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	20 e7       	ldi	r18, 0x70	; 112
 1a0:	32 e0       	ldi	r19, 0x02	; 2
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x4e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x58>
 1ac:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	98 27       	eor	r25, r24
 1b2:	95 b9       	out	0x05, r25	; 5
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	20 e7       	ldi	r18, 0x70	; 112
 1b8:	32 e0       	ldi	r19, 0x02	; 2
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x66>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x70>
 1c4:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	98 27       	eor	r25, r24
 1ca:	95 b9       	out	0x05, r25	; 5
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	20 e7       	ldi	r18, 0x70	; 112
 1d0:	32 e0       	ldi	r19, 0x02	; 2
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	20 40       	sbci	r18, 0x00	; 0
 1d6:	30 40       	sbci	r19, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x7e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x88>
 1dc:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	98 27       	eor	r25, r24
 1e2:	95 b9       	out	0x05, r25	; 5
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	20 e7       	ldi	r18, 0x70	; 112
 1e8:	32 e0       	ldi	r19, 0x02	; 2
 1ea:	91 50       	subi	r25, 0x01	; 1
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	30 40       	sbci	r19, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xa0>
 1f4:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1f6:	95 b1       	in	r25, 0x05	; 5
 1f8:	98 27       	eor	r25, r24
 1fa:	95 b9       	out	0x05, r25	; 5
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
 1fe:	20 e7       	ldi	r18, 0x70	; 112
 200:	32 e0       	ldi	r19, 0x02	; 2
 202:	91 50       	subi	r25, 0x01	; 1
 204:	20 40       	sbci	r18, 0x00	; 0
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0xae>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xb8>
 20c:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	98 27       	eor	r25, r24
 212:	95 b9       	out	0x05, r25	; 5
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	20 e7       	ldi	r18, 0x70	; 112
 218:	32 e0       	ldi	r19, 0x02	; 2
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xc6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xd0>
 224:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 226:	95 b1       	in	r25, 0x05	; 5
 228:	89 27       	eor	r24, r25
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	99 e6       	ldi	r25, 0x69	; 105
 230:	28 e1       	ldi	r18, 0x18	; 24
 232:	81 50       	subi	r24, 0x01	; 1
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0xde>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xe8>
 23c:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 23e:	78 94       	sei
	
	mirf_config();
 240:	0e 94 83 01 	call	0x306	; 0x306 <mirf_config>

	println_0("nRF24L01 initialized...;");
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 10 02 	call	0x420	; 0x420 <println_0>
 24c:	8f e1       	ldi	r24, 0x1F	; 31
 24e:	9e e4       	ldi	r25, 0x4E	; 78
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0xfc>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x102>
 256:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 258:	11 e0       	ldi	r17, 0x01	; 1
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	81 27       	eor	r24, r17
 25e:	85 b9       	out	0x05, r24	; 5
		
		while(!mirf_data_ready())
 260:	04 c0       	rjmp	.+8      	; 0x26a <main+0x116>
		{
			mirf_config_register(STATUS, (1 << MAX_RT)); // Reset status register
 262:	60 e1       	ldi	r22, 0x10	; 16
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>

    while (1) 
    {
		TOGGLE_LED;
		
		while(!mirf_data_ready())
 26a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mirf_data_ready>
 26e:	88 23       	and	r24, r24
 270:	c1 f3       	breq	.-16     	; 0x262 <main+0x10e>
		{
			mirf_config_register(STATUS, (1 << MAX_RT)); // Reset status register
		}
		
		mirf_get_data(buffer);
 272:	8e e2       	ldi	r24, 0x2E	; 46
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 97 01 	call	0x32e	; 0x32e <mirf_get_data>
		
		set_duty_cycle(buffer[0]);	
 27a:	ce e2       	ldi	r28, 0x2E	; 46
 27c:	d1 e0       	ldi	r29, 0x01	; 1
 27e:	88 81       	ld	r24, Y
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 8e 00 	call	0x11c	; 0x11c <set_duty_cycle>
		
		if ((buffer[0] < -100) || (buffer[0] > 100) || (buffer[0] == 0))
 286:	88 81       	ld	r24, Y
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	98 0f       	add	r25, r24
 28c:	94 36       	cpi	r25, 0x64	; 100
 28e:	18 f0       	brcs	.+6      	; 0x296 <main+0x142>
		{
			motor_off();
 290:	0e 94 a7 00 	call	0x14e	; 0x14e <motor_off>
 294:	e2 cf       	rjmp	.-60     	; 0x25a <main+0x106>
		}
		else if (buffer[0]>0)
 296:	88 23       	and	r24, r24
 298:	01 f3       	breq	.-64     	; 0x25a <main+0x106>
		{
			set_duty_cycle(buffer[0]);
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 8e 00 	call	0x11c	; 0x11c <set_duty_cycle>
			move_motor_forward();	
 2a0:	0e 94 a4 00 	call	0x148	; 0x148 <move_motor_forward>
 2a4:	da cf       	rjmp	.-76     	; 0x25a <main+0x106>

000002a6 <mirf_init>:
	spi1_send_bytes(value, len);      // Write payload
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select

	mirf_CE_hi; // Start transmission
}
 2a6:	54 9a       	sbi	0x0a, 4	; 10
 2a8:	56 9a       	sbi	0x0a, 6	; 10
 2aa:	5c 98       	cbi	0x0b, 4	; 11
 2ac:	5e 9a       	sbi	0x0b, 6	; 11
 2ae:	e8 98       	cbi	0x1d, 0	; 29
 2b0:	e9 e6       	ldi	r30, 0x69	; 105
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	80 83       	st	Z, r24
 2ba:	e8 9a       	sbi	0x1d, 0	; 29
 2bc:	0e 94 8c 02 	call	0x518	; 0x518 <spi1_master_initialize>
 2c0:	08 95       	ret

000002c2 <mirf_data_ready>:
 2c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 2c6:	81 11       	cpse	r24, r1
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <mirf_data_ready+0x16>
 2ca:	5e 98       	cbi	0x0b, 6	; 11
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	0e 94 9b 02 	call	0x536	; 0x536 <spi1_exchange_char>
 2d2:	5e 9a       	sbi	0x0b, 6	; 11
 2d4:	80 74       	andi	r24, 0x40	; 64
 2d6:	08 95       	ret
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <mirf_config_register>:
 2dc:	cf 93       	push	r28
 2de:	c6 2f       	mov	r28, r22
 2e0:	5e 98       	cbi	0x0b, 6	; 11
 2e2:	8f 71       	andi	r24, 0x1F	; 31
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	0e 94 93 02 	call	0x526	; 0x526 <spi1_send_char>
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	8a 95       	dec	r24
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <mirf_config_register+0x10>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <mirf_config_register+0x16>
 2f2:	8c 2f       	mov	r24, r28
 2f4:	0e 94 93 02 	call	0x526	; 0x526 <spi1_send_char>
 2f8:	5e 9a       	sbi	0x0b, 6	; 11
 2fa:	82 e4       	ldi	r24, 0x42	; 66
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <mirf_config_register+0x20>
 300:	00 c0       	rjmp	.+0      	; 0x302 <mirf_config_register+0x26>
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <mirf_config>:
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
 316:	62 e0       	ldi	r22, 0x02	; 2
 318:	81 e1       	ldi	r24, 0x11	; 17
 31a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
 31e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
 322:	6b e4       	ldi	r22, 0x4B	; 75
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
 32a:	5c 9a       	sbi	0x0b, 4	; 11
 32c:	08 95       	ret

0000032e <mirf_get_data>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
 334:	5e 98       	cbi	0x0b, 6	; 11
 336:	81 e6       	ldi	r24, 0x61	; 97
 338:	0e 94 93 02 	call	0x526	; 0x526 <spi1_send_char>
 33c:	42 e0       	ldi	r20, 0x02	; 2
 33e:	be 01       	movw	r22, r28
 340:	ce 01       	movw	r24, r28
 342:	0e 94 a5 02 	call	0x54a	; 0x54a <spi1_exchange_bytes>
 346:	5e 9a       	sbi	0x0b, 6	; 11
 348:	60 e4       	ldi	r22, 0x40	; 64
 34a:	87 e0       	ldi	r24, 0x07	; 7
 34c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	cf 93       	push	r28
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
	char status;
	// If still in transmitting mode then finish transmission
	if (PTX)
 37a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <PTX>
 37e:	88 23       	and	r24, r24
 380:	d1 f0       	breq	.+52     	; 0x3b6 <__vector_1+0x60>
	{
	// Read MiRF status
	mirf_CSN_lo;                     // Pull down chip select
 382:	5e 98       	cbi	0x0b, 6	; 11
	status = spi1_exchange_char(NOP); // Read status register
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	0e 94 9b 02 	call	0x536	; 0x536 <spi1_exchange_char>
 38a:	c8 2f       	mov	r28, r24
	print_0("STATUS: ;");
 38c:	84 e2       	ldi	r24, 0x24	; 36
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 ed 01 	call	0x3da	; 0x3da <print_0>
	println_int_0(status);
 394:	8c 2f       	mov	r24, r28
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 36 02 	call	0x46c	; 0x46c <println_int_0>
	mirf_CSN_hi;                     // Pull up chip select
 39c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	82 e4       	ldi	r24, 0x42	; 66
 3a0:	8a 95       	dec	r24
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <__vector_1+0x4a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <__vector_1+0x50>
	_delay_us(25);
	mirf_CE_lo;                             // Deactivate transreceiver
 3a6:	5c 98       	cbi	0x0b, 4	; 11
	RX_POWERUP;                             // Power up in receiving mode
 3a8:	6b e4       	ldi	r22, 0x4B	; 75
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mirf_config_register>
	mirf_CE_hi;                             // Listening for pakets
 3b0:	5c 9a       	sbi	0x0b, 4	; 11
	PTX = 0;                                // Set to receiving mode
 3b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <PTX>
	// Reset status register for further interaction
	//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	cf 91       	pop	r28
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <print_0>:

	for (int i=0; i<num_digit ; i++)
	{
		usart0_send_char(char_array[i]);
	}
}
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	8a 30       	cpi	r24, 0x0A	; 10
 3e8:	b1 f0       	breq	.+44     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ea:	8b 33       	cpi	r24, 0x3B	; 59
 3ec:	61 f4       	brne	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ee:	13 c0       	rjmp	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f0:	89 91       	ld	r24, Y+
 3f2:	8a 30       	cpi	r24, 0x0A	; 10
 3f4:	81 f0       	breq	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f6:	8b 33       	cpi	r24, 0x3B	; 59
 3f8:	71 f0       	breq	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3fa:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
 3fe:	0c 17       	cp	r16, r28
 400:	1d 07       	cpc	r17, r29
 402:	b1 f7       	brne	.-20     	; 0x3f0 <print_0+0x16>
 404:	08 c0       	rjmp	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 406:	8f 01       	movw	r16, r30
 408:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
 40c:	e8 01       	movw	r28, r16
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	08 53       	subi	r16, 0x38	; 56
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	ed cf       	rjmp	.-38     	; 0x3f0 <print_0+0x16>
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <println_0>:
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	8c 01       	movw	r16, r24
 42a:	fc 01       	movw	r30, r24
 42c:	80 81       	ld	r24, Z
 42e:	8a 30       	cpi	r24, 0x0A	; 10
 430:	69 f0       	breq	.+26     	; 0x44c <println_0+0x2c>
 432:	8b 33       	cpi	r24, 0x3B	; 59
 434:	79 f4       	brne	.+30     	; 0x454 <println_0+0x34>
 436:	0a c0       	rjmp	.+20     	; 0x44c <println_0+0x2c>
 438:	89 91       	ld	r24, Y+
 43a:	8a 30       	cpi	r24, 0x0A	; 10
 43c:	39 f0       	breq	.+14     	; 0x44c <println_0+0x2c>
 43e:	8b 33       	cpi	r24, 0x3B	; 59
 440:	29 f0       	breq	.+10     	; 0x44c <println_0+0x2c>
 442:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
 446:	0c 17       	cp	r16, r28
 448:	1d 07       	cpc	r17, r29
 44a:	b1 f7       	brne	.-20     	; 0x438 <println_0+0x18>
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
 452:	07 c0       	rjmp	.+14     	; 0x462 <println_0+0x42>
 454:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
 458:	e8 01       	movw	r28, r16
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	08 53       	subi	r16, 0x38	; 56
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
 460:	eb cf       	rjmp	.-42     	; 0x438 <println_0+0x18>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <println_int_0>:

void println_int_0(int number)
{
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	e2 97       	sbiw	r28, 0x32	; 50
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	8c 01       	movw	r16, r24
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	89 f1       	breq	.+98     	; 0x4f0 <println_int_0+0x84>
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
	{
		temp = temp /10;
 492:	ea e0       	ldi	r30, 0x0A	; 10
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	01 c0       	rjmp	.+2      	; 0x49a <println_int_0+0x2e>
		num_digit++;
 498:	97 01       	movw	r18, r14
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
	{
		temp = temp /10;
 49a:	bf 01       	movw	r22, r30
 49c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodhi4>
 4a0:	cb 01       	movw	r24, r22
		num_digit++;
 4a2:	79 01       	movw	r14, r18
 4a4:	4f ef       	ldi	r20, 0xFF	; 255
 4a6:	e4 1a       	sub	r14, r20
 4a8:	f4 0a       	sbc	r15, r20
void println_int_0(int number)
{
	int temp = number;
	int num_digit = 0;
	
	while (temp != 0)
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	a9 f7       	brne	.-22     	; 0x498 <println_int_0+0x2c>
	{
		temp = temp /10;
		num_digit++;
	}
	if (number<0) num_digit++;
 4ae:	11 23       	and	r17, r17
 4b0:	24 f4       	brge	.+8      	; 0x4ba <println_int_0+0x4e>
 4b2:	79 01       	movw	r14, r18
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	e8 0e       	add	r14, r24
 4b8:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4ba:	4a e0       	ldi	r20, 0x0A	; 10
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	c8 01       	movw	r24, r16
 4c4:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 4c8:	1e 14       	cp	r1, r14
 4ca:	1f 04       	cpc	r1, r15
 4cc:	6c f4       	brge	.+26     	; 0x4e8 <println_int_0+0x7c>
 4ce:	8e 01       	movw	r16, r28
 4d0:	0f 5f       	subi	r16, 0xFF	; 255
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	e0 0e       	add	r14, r16
 4d6:	f1 1e       	adc	r15, r17
	{
		usart0_send_char(char_array[i]);
 4d8:	f8 01       	movw	r30, r16
 4da:	81 91       	ld	r24, Z+
 4dc:	8f 01       	movw	r16, r30
 4de:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
	}
	if (number<0) num_digit++;
	char char_array[MAX_STRING_SIZE];
	itoa(number, char_array,10);

	for (int i=0; i<num_digit ; i++)
 4e2:	0e 15       	cp	r16, r14
 4e4:	1f 05       	cpc	r17, r15
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <println_int_0+0x6c>
	{
		usart0_send_char(char_array[i]);
	}
	usart0_send_char(0x0A); // NL
 4e8:	8a e0       	ldi	r24, 0x0A	; 10
 4ea:	0e 94 c9 02 	call	0x592	; 0x592 <usart0_send_char>
}
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <println_int_0+0x92>
 4f0:	4a e0       	ldi	r20, 0x0A	; 10
 4f2:	be 01       	movw	r22, r28
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 4fc:	f5 cf       	rjmp	.-22     	; 0x4e8 <println_int_0+0x7c>
 4fe:	e2 96       	adiw	r28, 0x32	; 50
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	08 95       	ret

00000518 <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 518:	6b 9a       	sbi	0x0d, 3	; 13
 51a:	57 9a       	sbi	0x0a, 7	; 10
 51c:	56 9a       	sbi	0x0a, 6	; 10
 51e:	82 e5       	ldi	r24, 0x52	; 82
 520:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 524:	08 95       	ret

00000526 <spi1_send_char>:
 526:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 52a:	ed ea       	ldi	r30, 0xAD	; 173
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	ec f7       	brge	.-6      	; 0x52e <spi1_send_char+0x8>
 534:	08 95       	ret

00000536 <spi1_exchange_char>:
 536:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 53a:	ed ea       	ldi	r30, 0xAD	; 173
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	ec f7       	brge	.-6      	; 0x53e <spi1_exchange_char+0x8>
 544:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 548:	08 95       	ret

0000054a <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 552:	44 23       	and	r20, r20
 554:	c9 f0       	breq	.+50     	; 0x588 <spi1_exchange_bytes+0x3e>
 556:	dc 01       	movw	r26, r24
 558:	06 2f       	mov	r16, r22
 55a:	17 2f       	mov	r17, r23
 55c:	9c 01       	movw	r18, r24
 55e:	24 0f       	add	r18, r20
 560:	31 1d       	adc	r19, r1
 562:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 564:	2e ea       	ldi	r18, 0xAE	; 174
 566:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 568:	ed ea       	ldi	r30, 0xAD	; 173
 56a:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 56c:	9d 91       	ld	r25, X+
 56e:	e9 01       	movw	r28, r18
 570:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 572:	90 81       	ld	r25, Z
 574:	99 23       	and	r25, r25
 576:	ec f7       	brge	.-6      	; 0x572 <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 578:	e9 01       	movw	r28, r18
 57a:	98 81       	ld	r25, Y
 57c:	e8 01       	movw	r28, r16
 57e:	99 93       	st	Y+, r25
 580:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 582:	a4 17       	cp	r26, r20
 584:	b5 07       	cpc	r27, r21
 586:	91 f7       	brne	.-28     	; 0x56c <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 592:	e0 ec       	ldi	r30, 0xC0	; 192
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	90 81       	ld	r25, Z
 598:	95 ff       	sbrs	r25, 5
 59a:	fd cf       	rjmp	.-6      	; 0x596 <usart0_send_char+0x4>
 59c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5a0:	08 95       	ret

000005a2 <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 5a2:	98 e9       	ldi	r25, 0x98	; 152
 5a4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 5a8:	96 e0       	ldi	r25, 0x06	; 6
 5aa:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 5ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5b2:	08 95       	ret

000005b4 <__subsf3>:
 5b4:	50 58       	subi	r21, 0x80	; 128

000005b6 <__addsf3>:
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__addsf3x>
 5be:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_round>
 5c2:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_pscA>
 5c6:	38 f0       	brcs	.+14     	; 0x5d6 <__addsf3+0x20>
 5c8:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_pscB>
 5cc:	20 f0       	brcs	.+8      	; 0x5d6 <__addsf3+0x20>
 5ce:	39 f4       	brne	.+14     	; 0x5de <__addsf3+0x28>
 5d0:	9f 3f       	cpi	r25, 0xFF	; 255
 5d2:	19 f4       	brne	.+6      	; 0x5da <__addsf3+0x24>
 5d4:	26 f4       	brtc	.+8      	; 0x5de <__addsf3+0x28>
 5d6:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_nan>
 5da:	0e f4       	brtc	.+2      	; 0x5de <__addsf3+0x28>
 5dc:	e0 95       	com	r30
 5de:	e7 fb       	bst	r30, 7
 5e0:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_inf>

000005e4 <__addsf3x>:
 5e4:	e9 2f       	mov	r30, r25
 5e6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_split3>
 5ea:	58 f3       	brcs	.-42     	; 0x5c2 <__addsf3+0xc>
 5ec:	ba 17       	cp	r27, r26
 5ee:	62 07       	cpc	r22, r18
 5f0:	73 07       	cpc	r23, r19
 5f2:	84 07       	cpc	r24, r20
 5f4:	95 07       	cpc	r25, r21
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__addsf3x+0x1c>
 5f8:	79 f4       	brne	.+30     	; 0x618 <__addsf3x+0x34>
 5fa:	a6 f5       	brtc	.+104    	; 0x664 <__addsf3x+0x80>
 5fc:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_zero>
 600:	0e f4       	brtc	.+2      	; 0x604 <__addsf3x+0x20>
 602:	e0 95       	com	r30
 604:	0b 2e       	mov	r0, r27
 606:	ba 2f       	mov	r27, r26
 608:	a0 2d       	mov	r26, r0
 60a:	0b 01       	movw	r0, r22
 60c:	b9 01       	movw	r22, r18
 60e:	90 01       	movw	r18, r0
 610:	0c 01       	movw	r0, r24
 612:	ca 01       	movw	r24, r20
 614:	a0 01       	movw	r20, r0
 616:	11 24       	eor	r1, r1
 618:	ff 27       	eor	r31, r31
 61a:	59 1b       	sub	r21, r25
 61c:	99 f0       	breq	.+38     	; 0x644 <__addsf3x+0x60>
 61e:	59 3f       	cpi	r21, 0xF9	; 249
 620:	50 f4       	brcc	.+20     	; 0x636 <__addsf3x+0x52>
 622:	50 3e       	cpi	r21, 0xE0	; 224
 624:	68 f1       	brcs	.+90     	; 0x680 <__addsf3x+0x9c>
 626:	1a 16       	cp	r1, r26
 628:	f0 40       	sbci	r31, 0x00	; 0
 62a:	a2 2f       	mov	r26, r18
 62c:	23 2f       	mov	r18, r19
 62e:	34 2f       	mov	r19, r20
 630:	44 27       	eor	r20, r20
 632:	58 5f       	subi	r21, 0xF8	; 248
 634:	f3 cf       	rjmp	.-26     	; 0x61c <__addsf3x+0x38>
 636:	46 95       	lsr	r20
 638:	37 95       	ror	r19
 63a:	27 95       	ror	r18
 63c:	a7 95       	ror	r26
 63e:	f0 40       	sbci	r31, 0x00	; 0
 640:	53 95       	inc	r21
 642:	c9 f7       	brne	.-14     	; 0x636 <__addsf3x+0x52>
 644:	7e f4       	brtc	.+30     	; 0x664 <__addsf3x+0x80>
 646:	1f 16       	cp	r1, r31
 648:	ba 0b       	sbc	r27, r26
 64a:	62 0b       	sbc	r22, r18
 64c:	73 0b       	sbc	r23, r19
 64e:	84 0b       	sbc	r24, r20
 650:	ba f0       	brmi	.+46     	; 0x680 <__addsf3x+0x9c>
 652:	91 50       	subi	r25, 0x01	; 1
 654:	a1 f0       	breq	.+40     	; 0x67e <__addsf3x+0x9a>
 656:	ff 0f       	add	r31, r31
 658:	bb 1f       	adc	r27, r27
 65a:	66 1f       	adc	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	c2 f7       	brpl	.-16     	; 0x652 <__addsf3x+0x6e>
 662:	0e c0       	rjmp	.+28     	; 0x680 <__addsf3x+0x9c>
 664:	ba 0f       	add	r27, r26
 666:	62 1f       	adc	r22, r18
 668:	73 1f       	adc	r23, r19
 66a:	84 1f       	adc	r24, r20
 66c:	48 f4       	brcc	.+18     	; 0x680 <__addsf3x+0x9c>
 66e:	87 95       	ror	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f7 95       	ror	r31
 678:	9e 3f       	cpi	r25, 0xFE	; 254
 67a:	08 f0       	brcs	.+2      	; 0x67e <__addsf3x+0x9a>
 67c:	b0 cf       	rjmp	.-160    	; 0x5de <__addsf3+0x28>
 67e:	93 95       	inc	r25
 680:	88 0f       	add	r24, r24
 682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0xa2>
 684:	99 27       	eor	r25, r25
 686:	ee 0f       	add	r30, r30
 688:	97 95       	ror	r25
 68a:	87 95       	ror	r24
 68c:	08 95       	ret

0000068e <__fixsfsi>:
 68e:	0e 94 4e 03 	call	0x69c	; 0x69c <__fixunssfsi>
 692:	68 94       	set
 694:	b1 11       	cpse	r27, r1
 696:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_szero>
 69a:	08 95       	ret

0000069c <__fixunssfsi>:
 69c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__fp_splitA>
 6a0:	88 f0       	brcs	.+34     	; 0x6c4 <__fixunssfsi+0x28>
 6a2:	9f 57       	subi	r25, 0x7F	; 127
 6a4:	98 f0       	brcs	.+38     	; 0x6cc <__fixunssfsi+0x30>
 6a6:	b9 2f       	mov	r27, r25
 6a8:	99 27       	eor	r25, r25
 6aa:	b7 51       	subi	r27, 0x17	; 23
 6ac:	b0 f0       	brcs	.+44     	; 0x6da <__fixunssfsi+0x3e>
 6ae:	e1 f0       	breq	.+56     	; 0x6e8 <__fixunssfsi+0x4c>
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	1a f0       	brmi	.+6      	; 0x6c0 <__fixunssfsi+0x24>
 6ba:	ba 95       	dec	r27
 6bc:	c9 f7       	brne	.-14     	; 0x6b0 <__fixunssfsi+0x14>
 6be:	14 c0       	rjmp	.+40     	; 0x6e8 <__fixunssfsi+0x4c>
 6c0:	b1 30       	cpi	r27, 0x01	; 1
 6c2:	91 f0       	breq	.+36     	; 0x6e8 <__fixunssfsi+0x4c>
 6c4:	0e 94 04 04 	call	0x808	; 0x808 <__fp_zero>
 6c8:	b1 e0       	ldi	r27, 0x01	; 1
 6ca:	08 95       	ret
 6cc:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_zero>
 6d0:	67 2f       	mov	r22, r23
 6d2:	78 2f       	mov	r23, r24
 6d4:	88 27       	eor	r24, r24
 6d6:	b8 5f       	subi	r27, 0xF8	; 248
 6d8:	39 f0       	breq	.+14     	; 0x6e8 <__fixunssfsi+0x4c>
 6da:	b9 3f       	cpi	r27, 0xF9	; 249
 6dc:	cc f3       	brlt	.-14     	; 0x6d0 <__fixunssfsi+0x34>
 6de:	86 95       	lsr	r24
 6e0:	77 95       	ror	r23
 6e2:	67 95       	ror	r22
 6e4:	b3 95       	inc	r27
 6e6:	d9 f7       	brne	.-10     	; 0x6de <__fixunssfsi+0x42>
 6e8:	3e f4       	brtc	.+14     	; 0x6f8 <__fixunssfsi+0x5c>
 6ea:	90 95       	com	r25
 6ec:	80 95       	com	r24
 6ee:	70 95       	com	r23
 6f0:	61 95       	neg	r22
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__floatunsisf>:
 6fa:	e8 94       	clt
 6fc:	09 c0       	rjmp	.+18     	; 0x710 <__floatsisf+0x12>

000006fe <__floatsisf>:
 6fe:	97 fb       	bst	r25, 7
 700:	3e f4       	brtc	.+14     	; 0x710 <__floatsisf+0x12>
 702:	90 95       	com	r25
 704:	80 95       	com	r24
 706:	70 95       	com	r23
 708:	61 95       	neg	r22
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	99 23       	and	r25, r25
 712:	a9 f0       	breq	.+42     	; 0x73e <__floatsisf+0x40>
 714:	f9 2f       	mov	r31, r25
 716:	96 e9       	ldi	r25, 0x96	; 150
 718:	bb 27       	eor	r27, r27
 71a:	93 95       	inc	r25
 71c:	f6 95       	lsr	r31
 71e:	87 95       	ror	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f1 11       	cpse	r31, r1
 728:	f8 cf       	rjmp	.-16     	; 0x71a <__floatsisf+0x1c>
 72a:	fa f4       	brpl	.+62     	; 0x76a <__floatsisf+0x6c>
 72c:	bb 0f       	add	r27, r27
 72e:	11 f4       	brne	.+4      	; 0x734 <__floatsisf+0x36>
 730:	60 ff       	sbrs	r22, 0
 732:	1b c0       	rjmp	.+54     	; 0x76a <__floatsisf+0x6c>
 734:	6f 5f       	subi	r22, 0xFF	; 255
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	8f 4f       	sbci	r24, 0xFF	; 255
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	16 c0       	rjmp	.+44     	; 0x76a <__floatsisf+0x6c>
 73e:	88 23       	and	r24, r24
 740:	11 f0       	breq	.+4      	; 0x746 <__floatsisf+0x48>
 742:	96 e9       	ldi	r25, 0x96	; 150
 744:	11 c0       	rjmp	.+34     	; 0x768 <__floatsisf+0x6a>
 746:	77 23       	and	r23, r23
 748:	21 f0       	breq	.+8      	; 0x752 <__floatsisf+0x54>
 74a:	9e e8       	ldi	r25, 0x8E	; 142
 74c:	87 2f       	mov	r24, r23
 74e:	76 2f       	mov	r23, r22
 750:	05 c0       	rjmp	.+10     	; 0x75c <__floatsisf+0x5e>
 752:	66 23       	and	r22, r22
 754:	71 f0       	breq	.+28     	; 0x772 <__floatsisf+0x74>
 756:	96 e8       	ldi	r25, 0x86	; 134
 758:	86 2f       	mov	r24, r22
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	2a f0       	brmi	.+10     	; 0x76a <__floatsisf+0x6c>
 760:	9a 95       	dec	r25
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	da f7       	brpl	.-10     	; 0x760 <__floatsisf+0x62>
 76a:	88 0f       	add	r24, r24
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <__fp_inf>:
 774:	97 f9       	bld	r25, 7
 776:	9f 67       	ori	r25, 0x7F	; 127
 778:	80 e8       	ldi	r24, 0x80	; 128
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	08 95       	ret

00000780 <__fp_nan>:
 780:	9f ef       	ldi	r25, 0xFF	; 255
 782:	80 ec       	ldi	r24, 0xC0	; 192
 784:	08 95       	ret

00000786 <__fp_pscA>:
 786:	00 24       	eor	r0, r0
 788:	0a 94       	dec	r0
 78a:	16 16       	cp	r1, r22
 78c:	17 06       	cpc	r1, r23
 78e:	18 06       	cpc	r1, r24
 790:	09 06       	cpc	r0, r25
 792:	08 95       	ret

00000794 <__fp_pscB>:
 794:	00 24       	eor	r0, r0
 796:	0a 94       	dec	r0
 798:	12 16       	cp	r1, r18
 79a:	13 06       	cpc	r1, r19
 79c:	14 06       	cpc	r1, r20
 79e:	05 06       	cpc	r0, r21
 7a0:	08 95       	ret

000007a2 <__fp_round>:
 7a2:	09 2e       	mov	r0, r25
 7a4:	03 94       	inc	r0
 7a6:	00 0c       	add	r0, r0
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__fp_round+0xc>
 7aa:	88 23       	and	r24, r24
 7ac:	52 f0       	brmi	.+20     	; 0x7c2 <__fp_round+0x20>
 7ae:	bb 0f       	add	r27, r27
 7b0:	40 f4       	brcc	.+16     	; 0x7c2 <__fp_round+0x20>
 7b2:	bf 2b       	or	r27, r31
 7b4:	11 f4       	brne	.+4      	; 0x7ba <__fp_round+0x18>
 7b6:	60 ff       	sbrs	r22, 0
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__fp_round+0x20>
 7ba:	6f 5f       	subi	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	08 95       	ret

000007c4 <__fp_split3>:
 7c4:	57 fd       	sbrc	r21, 7
 7c6:	90 58       	subi	r25, 0x80	; 128
 7c8:	44 0f       	add	r20, r20
 7ca:	55 1f       	adc	r21, r21
 7cc:	59 f0       	breq	.+22     	; 0x7e4 <__fp_splitA+0x10>
 7ce:	5f 3f       	cpi	r21, 0xFF	; 255
 7d0:	71 f0       	breq	.+28     	; 0x7ee <__fp_splitA+0x1a>
 7d2:	47 95       	ror	r20

000007d4 <__fp_splitA>:
 7d4:	88 0f       	add	r24, r24
 7d6:	97 fb       	bst	r25, 7
 7d8:	99 1f       	adc	r25, r25
 7da:	61 f0       	breq	.+24     	; 0x7f4 <__fp_splitA+0x20>
 7dc:	9f 3f       	cpi	r25, 0xFF	; 255
 7de:	79 f0       	breq	.+30     	; 0x7fe <__fp_splitA+0x2a>
 7e0:	87 95       	ror	r24
 7e2:	08 95       	ret
 7e4:	12 16       	cp	r1, r18
 7e6:	13 06       	cpc	r1, r19
 7e8:	14 06       	cpc	r1, r20
 7ea:	55 1f       	adc	r21, r21
 7ec:	f2 cf       	rjmp	.-28     	; 0x7d2 <__fp_split3+0xe>
 7ee:	46 95       	lsr	r20
 7f0:	f1 df       	rcall	.-30     	; 0x7d4 <__fp_splitA>
 7f2:	08 c0       	rjmp	.+16     	; 0x804 <__fp_splitA+0x30>
 7f4:	16 16       	cp	r1, r22
 7f6:	17 06       	cpc	r1, r23
 7f8:	18 06       	cpc	r1, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	f1 cf       	rjmp	.-30     	; 0x7e0 <__fp_splitA+0xc>
 7fe:	86 95       	lsr	r24
 800:	71 05       	cpc	r23, r1
 802:	61 05       	cpc	r22, r1
 804:	08 94       	sec
 806:	08 95       	ret

00000808 <__fp_zero>:
 808:	e8 94       	clt

0000080a <__fp_szero>:
 80a:	bb 27       	eor	r27, r27
 80c:	66 27       	eor	r22, r22
 80e:	77 27       	eor	r23, r23
 810:	cb 01       	movw	r24, r22
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__mulsf3>:
 816:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3x>
 81a:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_round>
 81e:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_pscA>
 822:	38 f0       	brcs	.+14     	; 0x832 <__mulsf3+0x1c>
 824:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_pscB>
 828:	20 f0       	brcs	.+8      	; 0x832 <__mulsf3+0x1c>
 82a:	95 23       	and	r25, r21
 82c:	11 f0       	breq	.+4      	; 0x832 <__mulsf3+0x1c>
 82e:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_inf>
 832:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_nan>
 836:	11 24       	eor	r1, r1
 838:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_szero>

0000083c <__mulsf3x>:
 83c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_split3>
 840:	70 f3       	brcs	.-36     	; 0x81e <__mulsf3+0x8>

00000842 <__mulsf3_pse>:
 842:	95 9f       	mul	r25, r21
 844:	c1 f3       	breq	.-16     	; 0x836 <__mulsf3+0x20>
 846:	95 0f       	add	r25, r21
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	55 1f       	adc	r21, r21
 84c:	62 9f       	mul	r22, r18
 84e:	f0 01       	movw	r30, r0
 850:	72 9f       	mul	r23, r18
 852:	bb 27       	eor	r27, r27
 854:	f0 0d       	add	r31, r0
 856:	b1 1d       	adc	r27, r1
 858:	63 9f       	mul	r22, r19
 85a:	aa 27       	eor	r26, r26
 85c:	f0 0d       	add	r31, r0
 85e:	b1 1d       	adc	r27, r1
 860:	aa 1f       	adc	r26, r26
 862:	64 9f       	mul	r22, r20
 864:	66 27       	eor	r22, r22
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	66 1f       	adc	r22, r22
 86c:	82 9f       	mul	r24, r18
 86e:	22 27       	eor	r18, r18
 870:	b0 0d       	add	r27, r0
 872:	a1 1d       	adc	r26, r1
 874:	62 1f       	adc	r22, r18
 876:	73 9f       	mul	r23, r19
 878:	b0 0d       	add	r27, r0
 87a:	a1 1d       	adc	r26, r1
 87c:	62 1f       	adc	r22, r18
 87e:	83 9f       	mul	r24, r19
 880:	a0 0d       	add	r26, r0
 882:	61 1d       	adc	r22, r1
 884:	22 1f       	adc	r18, r18
 886:	74 9f       	mul	r23, r20
 888:	33 27       	eor	r19, r19
 88a:	a0 0d       	add	r26, r0
 88c:	61 1d       	adc	r22, r1
 88e:	23 1f       	adc	r18, r19
 890:	84 9f       	mul	r24, r20
 892:	60 0d       	add	r22, r0
 894:	21 1d       	adc	r18, r1
 896:	82 2f       	mov	r24, r18
 898:	76 2f       	mov	r23, r22
 89a:	6a 2f       	mov	r22, r26
 89c:	11 24       	eor	r1, r1
 89e:	9f 57       	subi	r25, 0x7F	; 127
 8a0:	50 40       	sbci	r21, 0x00	; 0
 8a2:	9a f0       	brmi	.+38     	; 0x8ca <__mulsf3_pse+0x88>
 8a4:	f1 f0       	breq	.+60     	; 0x8e2 <__mulsf3_pse+0xa0>
 8a6:	88 23       	and	r24, r24
 8a8:	4a f0       	brmi	.+18     	; 0x8bc <__mulsf3_pse+0x7a>
 8aa:	ee 0f       	add	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	bb 1f       	adc	r27, r27
 8b0:	66 1f       	adc	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	91 50       	subi	r25, 0x01	; 1
 8b8:	50 40       	sbci	r21, 0x00	; 0
 8ba:	a9 f7       	brne	.-22     	; 0x8a6 <__mulsf3_pse+0x64>
 8bc:	9e 3f       	cpi	r25, 0xFE	; 254
 8be:	51 05       	cpc	r21, r1
 8c0:	80 f0       	brcs	.+32     	; 0x8e2 <__mulsf3_pse+0xa0>
 8c2:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_inf>
 8c6:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_szero>
 8ca:	5f 3f       	cpi	r21, 0xFF	; 255
 8cc:	e4 f3       	brlt	.-8      	; 0x8c6 <__mulsf3_pse+0x84>
 8ce:	98 3e       	cpi	r25, 0xE8	; 232
 8d0:	d4 f3       	brlt	.-12     	; 0x8c6 <__mulsf3_pse+0x84>
 8d2:	86 95       	lsr	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f7 95       	ror	r31
 8dc:	e7 95       	ror	r30
 8de:	9f 5f       	subi	r25, 0xFF	; 255
 8e0:	c1 f7       	brne	.-16     	; 0x8d2 <__mulsf3_pse+0x90>
 8e2:	fe 2b       	or	r31, r30
 8e4:	88 0f       	add	r24, r24
 8e6:	91 1d       	adc	r25, r1
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	97 f9       	bld	r25, 7
 8ee:	08 95       	ret

000008f0 <__divmodhi4>:
 8f0:	97 fb       	bst	r25, 7
 8f2:	07 2e       	mov	r0, r23
 8f4:	16 f4       	brtc	.+4      	; 0x8fa <__divmodhi4+0xa>
 8f6:	00 94       	com	r0
 8f8:	07 d0       	rcall	.+14     	; 0x908 <__divmodhi4_neg1>
 8fa:	77 fd       	sbrc	r23, 7
 8fc:	09 d0       	rcall	.+18     	; 0x910 <__divmodhi4_neg2>
 8fe:	0e 94 8c 04 	call	0x918	; 0x918 <__udivmodhi4>
 902:	07 fc       	sbrc	r0, 7
 904:	05 d0       	rcall	.+10     	; 0x910 <__divmodhi4_neg2>
 906:	3e f4       	brtc	.+14     	; 0x916 <__divmodhi4_exit>

00000908 <__divmodhi4_neg1>:
 908:	90 95       	com	r25
 90a:	81 95       	neg	r24
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__divmodhi4_neg2>:
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255

00000916 <__divmodhi4_exit>:
 916:	08 95       	ret

00000918 <__udivmodhi4>:
 918:	aa 1b       	sub	r26, r26
 91a:	bb 1b       	sub	r27, r27
 91c:	51 e1       	ldi	r21, 0x11	; 17
 91e:	07 c0       	rjmp	.+14     	; 0x92e <__udivmodhi4_ep>

00000920 <__udivmodhi4_loop>:
 920:	aa 1f       	adc	r26, r26
 922:	bb 1f       	adc	r27, r27
 924:	a6 17       	cp	r26, r22
 926:	b7 07       	cpc	r27, r23
 928:	10 f0       	brcs	.+4      	; 0x92e <__udivmodhi4_ep>
 92a:	a6 1b       	sub	r26, r22
 92c:	b7 0b       	sbc	r27, r23

0000092e <__udivmodhi4_ep>:
 92e:	88 1f       	adc	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	5a 95       	dec	r21
 934:	a9 f7       	brne	.-22     	; 0x920 <__udivmodhi4_loop>
 936:	80 95       	com	r24
 938:	90 95       	com	r25
 93a:	bc 01       	movw	r22, r24
 93c:	cd 01       	movw	r24, r26
 93e:	08 95       	ret

00000940 <__itoa_ncheck>:
 940:	bb 27       	eor	r27, r27
 942:	4a 30       	cpi	r20, 0x0A	; 10
 944:	31 f4       	brne	.+12     	; 0x952 <__itoa_ncheck+0x12>
 946:	99 23       	and	r25, r25
 948:	22 f4       	brpl	.+8      	; 0x952 <__itoa_ncheck+0x12>
 94a:	bd e2       	ldi	r27, 0x2D	; 45
 94c:	90 95       	com	r25
 94e:	81 95       	neg	r24
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	0c 94 ac 04 	jmp	0x958	; 0x958 <__utoa_common>

00000956 <__utoa_ncheck>:
 956:	bb 27       	eor	r27, r27

00000958 <__utoa_common>:
 958:	fb 01       	movw	r30, r22
 95a:	55 27       	eor	r21, r21
 95c:	aa 27       	eor	r26, r26
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	aa 1f       	adc	r26, r26
 964:	a4 17       	cp	r26, r20
 966:	10 f0       	brcs	.+4      	; 0x96c <__utoa_common+0x14>
 968:	a4 1b       	sub	r26, r20
 96a:	83 95       	inc	r24
 96c:	50 51       	subi	r21, 0x10	; 16
 96e:	b9 f7       	brne	.-18     	; 0x95e <__utoa_common+0x6>
 970:	a0 5d       	subi	r26, 0xD0	; 208
 972:	aa 33       	cpi	r26, 0x3A	; 58
 974:	08 f0       	brcs	.+2      	; 0x978 <__utoa_common+0x20>
 976:	a9 5d       	subi	r26, 0xD9	; 217
 978:	a1 93       	st	Z+, r26
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	79 f7       	brne	.-34     	; 0x95c <__utoa_common+0x4>
 97e:	b1 11       	cpse	r27, r1
 980:	b1 93       	st	Z+, r27
 982:	11 92       	st	Z+, r1
 984:	cb 01       	movw	r24, r22
 986:	0c 94 c5 04 	jmp	0x98a	; 0x98a <strrev>

0000098a <strrev>:
 98a:	dc 01       	movw	r26, r24
 98c:	fc 01       	movw	r30, r24
 98e:	67 2f       	mov	r22, r23
 990:	71 91       	ld	r23, Z+
 992:	77 23       	and	r23, r23
 994:	e1 f7       	brne	.-8      	; 0x98e <strrev+0x4>
 996:	32 97       	sbiw	r30, 0x02	; 2
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <strrev+0x18>
 99a:	7c 91       	ld	r23, X
 99c:	6d 93       	st	X+, r22
 99e:	70 83       	st	Z, r23
 9a0:	62 91       	ld	r22, -Z
 9a2:	ae 17       	cp	r26, r30
 9a4:	bf 07       	cpc	r27, r31
 9a6:	c8 f3       	brcs	.-14     	; 0x99a <strrev+0x10>
 9a8:	08 95       	ret

000009aa <_exit>:
 9aa:	f8 94       	cli

000009ac <__stop_program>:
 9ac:	ff cf       	rjmp	.-2      	; 0x9ac <__stop_program>
