
nRF24L01_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000008d0  00000964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800124  00800124  00000988  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f2  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001005  00000000  00000000  0000320a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001311  00000000  00000000  0000420f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00005520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091f  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c14  00000000  00000000  0000641f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00008033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 ed       	ldi	r30, 0xD0	; 208
  e0:	f8 e0       	ldi	r31, 0x08	; 8
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 32       	cpi	r26, 0x24	; 36
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e2       	ldi	r26, 0x24	; 36
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a7 32       	cpi	r26, 0x27	; 39
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
 102:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <setup_gpios>:
}

void move_motor_backward()
{
	IN1_PORT &= ~(1<<IN1);
	IN2_PORT |= (1<<IN2);
 10a:	6c 9a       	sbi	0x0d, 4	; 13
 10c:	21 9a       	sbi	0x04, 1	; 4
 10e:	22 9a       	sbi	0x04, 2	; 4
 110:	55 9a       	sbi	0x0a, 5	; 10
 112:	08 95       	ret

00000114 <setup_pwm>:
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 6c       	ori	r24, 0xC1	; 193
 11c:	80 83       	st	Z, r24
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	89 60       	ori	r24, 0x09	; 9
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <set_duty_cycle>:
 12a:	bc 01       	movw	r22, r24
 12c:	99 0f       	add	r25, r25
 12e:	88 0b       	sbc	r24, r24
 130:	99 0b       	sbc	r25, r25
 132:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatsisf>
 136:	2a e0       	ldi	r18, 0x0A	; 10
 138:	37 ed       	ldi	r19, 0xD7	; 215
 13a:	43 e2       	ldi	r20, 0x23	; 35
 13c:	50 e4       	ldi	r21, 0x40	; 64
 13e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	5f e3       	ldi	r21, 0x3F	; 63
 14a:	0e 94 c8 02 	call	0x590	; 0x590 <__subsf3>
 14e:	0e 94 35 03 	call	0x66a	; 0x66a <__fixsfsi>
 152:	77 27       	eor	r23, r23
 154:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 158:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 15c:	08 95       	ret

0000015e <move_motor_forward>:
 15e:	29 9a       	sbi	0x05, 1	; 5
 160:	2a 98       	cbi	0x05, 2	; 5
 162:	08 95       	ret

00000164 <motor_off>:
}

void motor_off()
{
	IN1_PORT |= (1<<IN1);
 164:	29 9a       	sbi	0x05, 1	; 5
	IN2_PORT |= (1<<IN2);
 166:	2a 9a       	sbi	0x05, 2	; 5
 168:	08 95       	ret

0000016a <main>:
uint8_t status = 0;


int main(void)
{
	setup_gpios();
 16a:	0e 94 85 00 	call	0x10a	; 0x10a <setup_gpios>
	setup_usart0(BR_500000); // for FTDI debugging (terminal)
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 bf 02 	call	0x57e	; 0x57e <setup_usart0>
	spi1_master_initialize(); // setup device as master for SPI com with nRF24L01
 174:	0e 94 63 02 	call	0x4c6	; 0x4c6 <spi1_master_initialize>
	mirf_init();
 178:	0e 94 5f 01 	call	0x2be	; 0x2be <mirf_init>
	setup_pwm();
 17c:	0e 94 8a 00 	call	0x114	; 0x114 <setup_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f e7       	ldi	r18, 0x7F	; 127
 182:	38 e3       	ldi	r19, 0x38	; 56
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	21 50       	subi	r18, 0x01	; 1
 188:	30 40       	sbci	r19, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x1c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x26>
 190:	00 00       	nop
	_delay_ms(50);	
	
	TOGGLE_LED;
 192:	9e b1       	in	r25, 0x0e	; 14
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	98 27       	eor	r25, r24
 198:	9e b9       	out	0x0e, r25	; 14
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	20 e7       	ldi	r18, 0x70	; 112
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x36>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x40>
 1aa:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1ac:	9e b1       	in	r25, 0x0e	; 14
 1ae:	98 27       	eor	r25, r24
 1b0:	9e b9       	out	0x0e, r25	; 14
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	20 e7       	ldi	r18, 0x70	; 112
 1b6:	32 e0       	ldi	r19, 0x02	; 2
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x4e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x58>
 1c2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1c4:	9e b1       	in	r25, 0x0e	; 14
 1c6:	98 27       	eor	r25, r24
 1c8:	9e b9       	out	0x0e, r25	; 14
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	20 e7       	ldi	r18, 0x70	; 112
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x66>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x70>
 1da:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1dc:	9e b1       	in	r25, 0x0e	; 14
 1de:	98 27       	eor	r25, r24
 1e0:	9e b9       	out	0x0e, r25	; 14
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	20 e7       	ldi	r18, 0x70	; 112
 1e6:	32 e0       	ldi	r19, 0x02	; 2
 1e8:	91 50       	subi	r25, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x7e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x88>
 1f2:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 1f4:	9e b1       	in	r25, 0x0e	; 14
 1f6:	98 27       	eor	r25, r24
 1f8:	9e b9       	out	0x0e, r25	; 14
 1fa:	9f ef       	ldi	r25, 0xFF	; 255
 1fc:	20 e7       	ldi	r18, 0x70	; 112
 1fe:	32 e0       	ldi	r19, 0x02	; 2
 200:	91 50       	subi	r25, 0x01	; 1
 202:	20 40       	sbci	r18, 0x00	; 0
 204:	30 40       	sbci	r19, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x96>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xa0>
 20a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 20c:	9e b1       	in	r25, 0x0e	; 14
 20e:	98 27       	eor	r25, r24
 210:	9e b9       	out	0x0e, r25	; 14
 212:	9f ef       	ldi	r25, 0xFF	; 255
 214:	20 e7       	ldi	r18, 0x70	; 112
 216:	32 e0       	ldi	r19, 0x02	; 2
 218:	91 50       	subi	r25, 0x01	; 1
 21a:	20 40       	sbci	r18, 0x00	; 0
 21c:	30 40       	sbci	r19, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0xae>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0xb8>
 222:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED;
 224:	9e b1       	in	r25, 0x0e	; 14
 226:	98 27       	eor	r25, r24
 228:	9e b9       	out	0x0e, r25	; 14
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	20 e7       	ldi	r18, 0x70	; 112
 22e:	32 e0       	ldi	r19, 0x02	; 2
 230:	91 50       	subi	r25, 0x01	; 1
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	30 40       	sbci	r19, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0xc6>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0xd0>
 23a:	00 00       	nop
	_delay_ms(100);
	TOGGLE_LED
 23c:	9e b1       	in	r25, 0x0e	; 14
 23e:	89 27       	eor	r24, r25
 240:	8e b9       	out	0x0e, r24	; 14
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	99 e6       	ldi	r25, 0x69	; 105
 246:	28 e1       	ldi	r18, 0x18	; 24
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xde>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xe8>
 252:	00 00       	nop
	
	
	_delay_ms(1000);
	
	sei(); // enable global interrupts
 254:	78 94       	sei
	
	//mirf_config_register(EN_AA, (0<<0)); // disable auto ACK for pipe 0
	//mirf_config_register(EN_AA, (0<<1));

	mirf_config();
 256:	0e 94 8f 01 	call	0x31e	; 0x31e <mirf_config>
	
	mirf_set_TADDR(tx_address);
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <mirf_set_TADDR>
	mirf_set_RADDR(rx_address);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 f7 01 	call	0x3ee	; 0x3ee <mirf_set_RADDR>

	println_0("nRF24L01 initialized...;");
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 3d 02 	call	0x47a	; 0x47a <println_0>
 272:	8f e1       	ldi	r24, 0x1F	; 31
 274:	9e e4       	ldi	r25, 0x4E	; 78
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x10c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x112>
 27c:	00 00       	nop
	_delay_ms(10);

    while (1) 
    {
		TOGGLE_LED;
 27e:	c0 e1       	ldi	r28, 0x10	; 16
 280:	8e b1       	in	r24, 0x0e	; 14
 282:	8c 27       	eor	r24, r28
 284:	8e b9       	out	0x0e, r24	; 14
		//buffer[0]++;
		//buffer[1] = 2;
		//println_0("Sending data...;");
		//_delay_ms(1);
		//mirf_send(buffer, mirf_PAYLOAD);
		while(!mirf_data_ready());
 286:	0e 94 6d 01 	call	0x2da	; 0x2da <mirf_data_ready>
 28a:	88 23       	and	r24, r24
 28c:	e1 f3       	breq	.-8      	; 0x286 <main+0x11c>
		mirf_get_data(buffer);
 28e:	84 e2       	ldi	r24, 0x24	; 36
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 cc 01 	call	0x398	; 0x398 <mirf_get_data>
		
		//while(1);
		
		//println_int_0(buffer[0]);
		
		if ((buffer[0] < -100) || (buffer[0] > 100))
 296:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 29a:	85 36       	cpi	r24, 0x65	; 101
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <main+0x13a>
		{
			motor_off();
 29e:	0e 94 b2 00 	call	0x164	; 0x164 <motor_off>
 2a2:	ee cf       	rjmp	.-36     	; 0x280 <main+0x116>
		}
		else if ( (buffer[0]<6)) // deadband
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <main+0x144>
		{
			motor_off();
 2a8:	0e 94 b2 00 	call	0x164	; 0x164 <motor_off>
 2ac:	e9 cf       	rjmp	.-46     	; 0x280 <main+0x116>
		}
		else if (buffer[0]>6)
 2ae:	87 30       	cpi	r24, 0x07	; 7
 2b0:	38 f3       	brcs	.-50     	; 0x280 <main+0x116>
		{
			set_duty_cycle(buffer[0]);
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 95 00 	call	0x12a	; 0x12a <set_duty_cycle>
			move_motor_forward();
 2b8:	0e 94 af 00 	call	0x15e	; 0x15e <move_motor_forward>
 2bc:	e1 cf       	rjmp	.-62     	; 0x280 <main+0x116>

000002be <mirf_init>:
	spi1_send_bytes(value, len);      // Write payload
	_delay_us(25);
	mirf_CSN_hi;                     // Pull up chip select

	mirf_CE_hi; // Start transmission
}
 2be:	54 9a       	sbi	0x0a, 4	; 10
 2c0:	56 9a       	sbi	0x0a, 6	; 10
 2c2:	5c 98       	cbi	0x0b, 4	; 11
 2c4:	5e 9a       	sbi	0x0b, 6	; 11
 2c6:	e8 98       	cbi	0x1d, 0	; 29
 2c8:	e9 e6       	ldi	r30, 0x69	; 105
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	80 83       	st	Z, r24
 2d2:	e8 9a       	sbi	0x1d, 0	; 29
 2d4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <spi1_master_initialize>
 2d8:	08 95       	ret

000002da <mirf_data_ready>:
 2da:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <PTX>
 2de:	81 11       	cpse	r24, r1
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <mirf_data_ready+0x16>
 2e2:	5e 98       	cbi	0x0b, 6	; 11
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spi1_exchange_char>
 2ea:	5e 9a       	sbi	0x0b, 6	; 11
 2ec:	80 74       	andi	r24, 0x40	; 64
 2ee:	08 95       	ret
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <mirf_config_register>:
 2f4:	cf 93       	push	r28
 2f6:	c6 2f       	mov	r28, r22
 2f8:	5e 98       	cbi	0x0b, 6	; 11
 2fa:	8f 71       	andi	r24, 0x1F	; 31
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <spi1_send_char>
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <mirf_config_register+0x10>
 308:	00 c0       	rjmp	.+0      	; 0x30a <mirf_config_register+0x16>
 30a:	8c 2f       	mov	r24, r28
 30c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <spi1_send_char>
 310:	5e 9a       	sbi	0x0b, 6	; 11
 312:	82 e4       	ldi	r24, 0x42	; 66
 314:	8a 95       	dec	r24
 316:	f1 f7       	brne	.-4      	; 0x314 <mirf_config_register+0x20>
 318:	00 c0       	rjmp	.+0      	; 0x31a <mirf_config_register+0x26>
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <mirf_config>:
 31e:	6c e6       	ldi	r22, 0x6C	; 108
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	81 e1       	ldi	r24, 0x11	; 17
 32a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	82 e1       	ldi	r24, 0x12	; 18
 332:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	83 e1       	ldi	r24, 0x13	; 19
 33a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	84 e1       	ldi	r24, 0x14	; 20
 342:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	85 e1       	ldi	r24, 0x15	; 21
 34a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	86 e1       	ldi	r24, 0x16	; 22
 352:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 356:	66 e2       	ldi	r22, 0x26	; 38
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 36e:	6f e4       	ldi	r22, 0x4F	; 79
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 376:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <PTX>
 37a:	60 e7       	ldi	r22, 0x70	; 112
 37c:	87 e0       	ldi	r24, 0x07	; 7
 37e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 382:	5e 98       	cbi	0x0b, 6	; 11
 384:	81 ee       	ldi	r24, 0xE1	; 225
 386:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <spi1_send_char>
 38a:	5e 9a       	sbi	0x0b, 6	; 11
 38c:	6b e5       	ldi	r22, 0x5B	; 91
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 394:	5c 9a       	sbi	0x0b, 4	; 11
 396:	08 95       	ret

00000398 <mirf_get_data>:
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
 39e:	5e 98       	cbi	0x0b, 6	; 11
 3a0:	81 e6       	ldi	r24, 0x61	; 97
 3a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <spi1_send_char>
 3a6:	42 e0       	ldi	r20, 0x02	; 2
 3a8:	be 01       	movw	r22, r28
 3aa:	ce 01       	movw	r24, r28
 3ac:	0e 94 93 02 	call	0x526	; 0x526 <spi1_exchange_bytes>
 3b0:	5e 9a       	sbi	0x0b, 6	; 11
 3b2:	60 e4       	ldi	r22, 0x40	; 64
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <mirf_write_register>:
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	eb 01       	movw	r28, r22
 3c8:	14 2f       	mov	r17, r20
 3ca:	5e 98       	cbi	0x0b, 6	; 11
 3cc:	8f 71       	andi	r24, 0x1F	; 31
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <spi1_send_char>
 3d4:	61 2f       	mov	r22, r17
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spi1_send_bytes>
 3dc:	5e 9a       	sbi	0x0b, 6	; 11
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <mirf_write_register+0x20>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <mirf_write_register+0x26>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	08 95       	ret

000003ee <mirf_set_RADDR>:
 3ee:	5c 98       	cbi	0x0b, 4	; 11
 3f0:	45 e0       	ldi	r20, 0x05	; 5
 3f2:	bc 01       	movw	r22, r24
 3f4:	8b e0       	ldi	r24, 0x0B	; 11
 3f6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <mirf_write_register>
 3fa:	5c 9a       	sbi	0x0b, 4	; 11
 3fc:	08 95       	ret

000003fe <mirf_set_TADDR>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
 404:	45 e0       	ldi	r20, 0x05	; 5
 406:	bc 01       	movw	r22, r24
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <mirf_write_register>
 40e:	45 e0       	ldi	r20, 0x05	; 5
 410:	be 01       	movw	r22, r28
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <mirf_write_register>
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <__vector_1>:

ISR(INT0_vect) // Interrupt handler
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	//char status;
	// If still in transmitting mode then finish transmission
	
	if (PTX)
 440:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <PTX>
 444:	88 23       	and	r24, r24
 446:	41 f0       	breq	.+16     	; 0x458 <__vector_1+0x3a>
		//status = spi1_exchange_char(NOP); // Read status register
		//print_0("STATUS: ;");
		//println_int_0(status);
		//mirf_CSN_hi;                     // Pull up chip select
		//_delay_us(25);
		mirf_CE_lo;                             // Deactivate transreceiver
 448:	5c 98       	cbi	0x0b, 4	; 11
		RX_POWERUP;                             // Power up in receiving mode
 44a:	6b e5       	ldi	r22, 0x5B	; 91
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mirf_config_register>
		mirf_CE_hi;                             // Listening for packets
 452:	5c 9a       	sbi	0x0b, 4	; 11
		PTX = 0;                                // Set to receiving mode
 454:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <PTX>
		// Reset status register for further interaction
		//mirf_config_register(STATUS, (1 << TX_DS) | (1 << MAX_RT)); // Reset status register
	}
	
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <println_0>:
		usart0_send_char(char_array[i]);
	}
}

void println_0(char char_array[]) // prints to usart
{
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	8c 01       	movw	r16, r24
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
 484:	fc 01       	movw	r30, r24
 486:	80 81       	ld	r24, Z
 488:	8a 30       	cpi	r24, 0x0A	; 10
 48a:	69 f0       	breq	.+26     	; 0x4a6 <println_0+0x2c>
 48c:	8b 33       	cpi	r24, 0x3B	; 59
 48e:	79 f4       	brne	.+30     	; 0x4ae <println_0+0x34>
 490:	0a c0       	rjmp	.+20     	; 0x4a6 <println_0+0x2c>
 492:	89 91       	ld	r24, Y+
 494:	8a 30       	cpi	r24, 0x0A	; 10
 496:	39 f0       	breq	.+14     	; 0x4a6 <println_0+0x2c>
 498:	8b 33       	cpi	r24, 0x3B	; 59
 49a:	29 f0       	breq	.+10     	; 0x4a6 <println_0+0x2c>
			break;
		usart0_send_char(char_array[i]);
 49c:	0e 94 b7 02 	call	0x56e	; 0x56e <usart0_send_char>
	}
}

void println_0(char char_array[]) // prints to usart
{
	for (int i=0; i<200 ; i++)
 4a0:	0c 17       	cp	r16, r28
 4a2:	1d 07       	cpc	r17, r29
 4a4:	b1 f7       	brne	.-20     	; 0x492 <println_0+0x18>
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
		
	}
	usart0_send_char(0x0A); // NL
 4a6:	8a e0       	ldi	r24, 0x0A	; 10
 4a8:	0e 94 b7 02 	call	0x56e	; 0x56e <usart0_send_char>
}
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <println_0+0x42>
{
	for (int i=0; i<200 ; i++)
	{
		if( (char_array[i] == NL) || (char_array[i] == EOT) )
			break;
		usart0_send_char(char_array[i]);
 4ae:	0e 94 b7 02 	call	0x56e	; 0x56e <usart0_send_char>
 4b2:	e8 01       	movw	r28, r16
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	08 53       	subi	r16, 0x38	; 56
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	eb cf       	rjmp	.-42     	; 0x492 <println_0+0x18>
		
	}
	usart0_send_char(0x0A); // NL
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <spi1_master_initialize>:

void spi0_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 4c6:	6b 9a       	sbi	0x0d, 3	; 13
 4c8:	57 9a       	sbi	0x0a, 7	; 10
 4ca:	56 9a       	sbi	0x0a, 6	; 10
 4cc:	82 e5       	ldi	r24, 0x52	; 82
 4ce:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 4d2:	08 95       	ret

000004d4 <spi1_send_char>:
 4d4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4d8:	ed ea       	ldi	r30, 0xAD	; 173
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	88 23       	and	r24, r24
 4e0:	ec f7       	brge	.-6      	; 0x4dc <spi1_send_char+0x8>
 4e2:	08 95       	ret

000004e4 <spi1_exchange_char>:
 4e4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4e8:	ed ea       	ldi	r30, 0xAD	; 173
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	88 23       	and	r24, r24
 4f0:	ec f7       	brge	.-6      	; 0x4ec <spi1_exchange_char+0x8>
 4f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4f6:	08 95       	ret

000004f8 <spi1_send_bytes>:
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	66 23       	and	r22, r22
 4fe:	81 f0       	breq	.+32     	; 0x520 <spi1_send_bytes+0x28>
 500:	dc 01       	movw	r26, r24
 502:	9c 01       	movw	r18, r24
 504:	26 0f       	add	r18, r22
 506:	31 1d       	adc	r19, r1
 508:	ce ea       	ldi	r28, 0xAE	; 174
 50a:	d0 e0       	ldi	r29, 0x00	; 0
 50c:	ed ea       	ldi	r30, 0xAD	; 173
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	9d 91       	ld	r25, X+
 512:	98 83       	st	Y, r25
 514:	90 81       	ld	r25, Z
 516:	99 23       	and	r25, r25
 518:	ec f7       	brge	.-6      	; 0x514 <spi1_send_bytes+0x1c>
 51a:	a2 17       	cp	r26, r18
 51c:	b3 07       	cpc	r27, r19
 51e:	c1 f7       	brne	.-16     	; 0x510 <spi1_send_bytes+0x18>
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <spi1_exchange_bytes>:
		; // wait for transmission complete
		miso[i] = SPDR0;
	}
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
	int i;

	for (i = 0; i < bytes; i++)
 52e:	44 23       	and	r20, r20
 530:	c9 f0       	breq	.+50     	; 0x564 <spi1_exchange_bytes+0x3e>
 532:	dc 01       	movw	r26, r24
 534:	06 2f       	mov	r16, r22
 536:	17 2f       	mov	r17, r23
 538:	9c 01       	movw	r18, r24
 53a:	24 0f       	add	r18, r20
 53c:	31 1d       	adc	r19, r1
 53e:	a9 01       	movw	r20, r18
	{
		SPDR1 = mosi[i]; // start transmission
 540:	2e ea       	ldi	r18, 0xAE	; 174
 542:	30 e0       	ldi	r19, 0x00	; 0

		while (!(SPSR1 & (1 << SPIF)))
 544:	ed ea       	ldi	r30, 0xAD	; 173
 546:	f0 e0       	ldi	r31, 0x00	; 0
{
	int i;

	for (i = 0; i < bytes; i++)
	{
		SPDR1 = mosi[i]; // start transmission
 548:	9d 91       	ld	r25, X+
 54a:	e9 01       	movw	r28, r18
 54c:	98 83       	st	Y, r25

		while (!(SPSR1 & (1 << SPIF)))
 54e:	90 81       	ld	r25, Z
 550:	99 23       	and	r25, r25
 552:	ec f7       	brge	.-6      	; 0x54e <spi1_exchange_bytes+0x28>
		; // wait for transmission complete
		miso[i] = SPDR1;
 554:	e9 01       	movw	r28, r18
 556:	98 81       	ld	r25, Y
 558:	e8 01       	movw	r28, r16
 55a:	99 93       	st	Y+, r25
 55c:	8e 01       	movw	r16, r28
}
void spi1_exchange_bytes(char *mosi, char *miso, char bytes)
{
	int i;

	for (i = 0; i < bytes; i++)
 55e:	a4 17       	cp	r26, r20
 560:	b5 07       	cpc	r27, r21
 562:	91 f7       	brne	.-28     	; 0x548 <spi1_exchange_bytes+0x22>

		while (!(SPSR1 & (1 << SPIF)))
		; // wait for transmission complete
		miso[i] = SPDR1;
	}
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <usart0_send_char>:
unsigned char usart0_receive_char()
{
	while (!(UCSR0A & (1 << RXC))) // RXCn is set when there are unread data in the receive buffer and cleared when the receive buffer is empty
	;
	return UDR0;
}
 56e:	e0 ec       	ldi	r30, 0xC0	; 192
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	90 81       	ld	r25, Z
 574:	95 ff       	sbrs	r25, 5
 576:	fd cf       	rjmp	.-6      	; 0x572 <usart0_send_char+0x4>
 578:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 57c:	08 95       	ret

0000057e <setup_usart0>:


void setup_usart0(unsigned char BR)
{
	UCSR0B = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // enable USART1
 57e:	98 e9       	ldi	r25, 0x98	; 152
 580:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit character size
 584:	96 e0       	ldi	r25, 0x06	; 6
 586:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = BR;                                        // 51 for 9600 baud rate at 8Mhz
 58a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 58e:	08 95       	ret

00000590 <__subsf3>:
 590:	50 58       	subi	r21, 0x80	; 128

00000592 <__addsf3>:
 592:	bb 27       	eor	r27, r27
 594:	aa 27       	eor	r26, r26
 596:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__addsf3x>
 59a:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_round>
 59e:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_pscA>
 5a2:	38 f0       	brcs	.+14     	; 0x5b2 <__addsf3+0x20>
 5a4:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscB>
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__addsf3+0x20>
 5aa:	39 f4       	brne	.+14     	; 0x5ba <__addsf3+0x28>
 5ac:	9f 3f       	cpi	r25, 0xFF	; 255
 5ae:	19 f4       	brne	.+6      	; 0x5b6 <__addsf3+0x24>
 5b0:	26 f4       	brtc	.+8      	; 0x5ba <__addsf3+0x28>
 5b2:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_nan>
 5b6:	0e f4       	brtc	.+2      	; 0x5ba <__addsf3+0x28>
 5b8:	e0 95       	com	r30
 5ba:	e7 fb       	bst	r30, 7
 5bc:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_inf>

000005c0 <__addsf3x>:
 5c0:	e9 2f       	mov	r30, r25
 5c2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_split3>
 5c6:	58 f3       	brcs	.-42     	; 0x59e <__addsf3+0xc>
 5c8:	ba 17       	cp	r27, r26
 5ca:	62 07       	cpc	r22, r18
 5cc:	73 07       	cpc	r23, r19
 5ce:	84 07       	cpc	r24, r20
 5d0:	95 07       	cpc	r25, r21
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__addsf3x+0x1c>
 5d4:	79 f4       	brne	.+30     	; 0x5f4 <__addsf3x+0x34>
 5d6:	a6 f5       	brtc	.+104    	; 0x640 <__addsf3x+0x80>
 5d8:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_zero>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3x+0x20>
 5de:	e0 95       	com	r30
 5e0:	0b 2e       	mov	r0, r27
 5e2:	ba 2f       	mov	r27, r26
 5e4:	a0 2d       	mov	r26, r0
 5e6:	0b 01       	movw	r0, r22
 5e8:	b9 01       	movw	r22, r18
 5ea:	90 01       	movw	r18, r0
 5ec:	0c 01       	movw	r0, r24
 5ee:	ca 01       	movw	r24, r20
 5f0:	a0 01       	movw	r20, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	ff 27       	eor	r31, r31
 5f6:	59 1b       	sub	r21, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <__addsf3x+0x60>
 5fa:	59 3f       	cpi	r21, 0xF9	; 249
 5fc:	50 f4       	brcc	.+20     	; 0x612 <__addsf3x+0x52>
 5fe:	50 3e       	cpi	r21, 0xE0	; 224
 600:	68 f1       	brcs	.+90     	; 0x65c <__addsf3x+0x9c>
 602:	1a 16       	cp	r1, r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	a2 2f       	mov	r26, r18
 608:	23 2f       	mov	r18, r19
 60a:	34 2f       	mov	r19, r20
 60c:	44 27       	eor	r20, r20
 60e:	58 5f       	subi	r21, 0xF8	; 248
 610:	f3 cf       	rjmp	.-26     	; 0x5f8 <__addsf3x+0x38>
 612:	46 95       	lsr	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
 618:	a7 95       	ror	r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	53 95       	inc	r21
 61e:	c9 f7       	brne	.-14     	; 0x612 <__addsf3x+0x52>
 620:	7e f4       	brtc	.+30     	; 0x640 <__addsf3x+0x80>
 622:	1f 16       	cp	r1, r31
 624:	ba 0b       	sbc	r27, r26
 626:	62 0b       	sbc	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	ba f0       	brmi	.+46     	; 0x65c <__addsf3x+0x9c>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	a1 f0       	breq	.+40     	; 0x65a <__addsf3x+0x9a>
 632:	ff 0f       	add	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	c2 f7       	brpl	.-16     	; 0x62e <__addsf3x+0x6e>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__addsf3x+0x9c>
 640:	ba 0f       	add	r27, r26
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
 646:	84 1f       	adc	r24, r20
 648:	48 f4       	brcc	.+18     	; 0x65c <__addsf3x+0x9c>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x9a>
 658:	b0 cf       	rjmp	.-160    	; 0x5ba <__addsf3+0x28>
 65a:	93 95       	inc	r25
 65c:	88 0f       	add	r24, r24
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0xa2>
 660:	99 27       	eor	r25, r25
 662:	ee 0f       	add	r30, r30
 664:	97 95       	ror	r25
 666:	87 95       	ror	r24
 668:	08 95       	ret

0000066a <__fixsfsi>:
 66a:	0e 94 3c 03 	call	0x678	; 0x678 <__fixunssfsi>
 66e:	68 94       	set
 670:	b1 11       	cpse	r27, r1
 672:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_szero>
 676:	08 95       	ret

00000678 <__fixunssfsi>:
 678:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_splitA>
 67c:	88 f0       	brcs	.+34     	; 0x6a0 <__fixunssfsi+0x28>
 67e:	9f 57       	subi	r25, 0x7F	; 127
 680:	98 f0       	brcs	.+38     	; 0x6a8 <__fixunssfsi+0x30>
 682:	b9 2f       	mov	r27, r25
 684:	99 27       	eor	r25, r25
 686:	b7 51       	subi	r27, 0x17	; 23
 688:	b0 f0       	brcs	.+44     	; 0x6b6 <__fixunssfsi+0x3e>
 68a:	e1 f0       	breq	.+56     	; 0x6c4 <__fixunssfsi+0x4c>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	1a f0       	brmi	.+6      	; 0x69c <__fixunssfsi+0x24>
 696:	ba 95       	dec	r27
 698:	c9 f7       	brne	.-14     	; 0x68c <__fixunssfsi+0x14>
 69a:	14 c0       	rjmp	.+40     	; 0x6c4 <__fixunssfsi+0x4c>
 69c:	b1 30       	cpi	r27, 0x01	; 1
 69e:	91 f0       	breq	.+36     	; 0x6c4 <__fixunssfsi+0x4c>
 6a0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_zero>
 6a4:	b1 e0       	ldi	r27, 0x01	; 1
 6a6:	08 95       	ret
 6a8:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_zero>
 6ac:	67 2f       	mov	r22, r23
 6ae:	78 2f       	mov	r23, r24
 6b0:	88 27       	eor	r24, r24
 6b2:	b8 5f       	subi	r27, 0xF8	; 248
 6b4:	39 f0       	breq	.+14     	; 0x6c4 <__fixunssfsi+0x4c>
 6b6:	b9 3f       	cpi	r27, 0xF9	; 249
 6b8:	cc f3       	brlt	.-14     	; 0x6ac <__fixunssfsi+0x34>
 6ba:	86 95       	lsr	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b3 95       	inc	r27
 6c2:	d9 f7       	brne	.-10     	; 0x6ba <__fixunssfsi+0x42>
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__fixunssfsi+0x5c>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__floatunsisf>:
 6d6:	e8 94       	clt
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__floatsisf+0x12>

000006da <__floatsisf>:
 6da:	97 fb       	bst	r25, 7
 6dc:	3e f4       	brtc	.+14     	; 0x6ec <__floatsisf+0x12>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	99 23       	and	r25, r25
 6ee:	a9 f0       	breq	.+42     	; 0x71a <__floatsisf+0x40>
 6f0:	f9 2f       	mov	r31, r25
 6f2:	96 e9       	ldi	r25, 0x96	; 150
 6f4:	bb 27       	eor	r27, r27
 6f6:	93 95       	inc	r25
 6f8:	f6 95       	lsr	r31
 6fa:	87 95       	ror	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f1 11       	cpse	r31, r1
 704:	f8 cf       	rjmp	.-16     	; 0x6f6 <__floatsisf+0x1c>
 706:	fa f4       	brpl	.+62     	; 0x746 <__floatsisf+0x6c>
 708:	bb 0f       	add	r27, r27
 70a:	11 f4       	brne	.+4      	; 0x710 <__floatsisf+0x36>
 70c:	60 ff       	sbrs	r22, 0
 70e:	1b c0       	rjmp	.+54     	; 0x746 <__floatsisf+0x6c>
 710:	6f 5f       	subi	r22, 0xFF	; 255
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	16 c0       	rjmp	.+44     	; 0x746 <__floatsisf+0x6c>
 71a:	88 23       	and	r24, r24
 71c:	11 f0       	breq	.+4      	; 0x722 <__floatsisf+0x48>
 71e:	96 e9       	ldi	r25, 0x96	; 150
 720:	11 c0       	rjmp	.+34     	; 0x744 <__floatsisf+0x6a>
 722:	77 23       	and	r23, r23
 724:	21 f0       	breq	.+8      	; 0x72e <__floatsisf+0x54>
 726:	9e e8       	ldi	r25, 0x8E	; 142
 728:	87 2f       	mov	r24, r23
 72a:	76 2f       	mov	r23, r22
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__floatsisf+0x5e>
 72e:	66 23       	and	r22, r22
 730:	71 f0       	breq	.+28     	; 0x74e <__floatsisf+0x74>
 732:	96 e8       	ldi	r25, 0x86	; 134
 734:	86 2f       	mov	r24, r22
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	2a f0       	brmi	.+10     	; 0x746 <__floatsisf+0x6c>
 73c:	9a 95       	dec	r25
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	da f7       	brpl	.-10     	; 0x73c <__floatsisf+0x62>
 746:	88 0f       	add	r24, r24
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <__fp_inf>:
 750:	97 f9       	bld	r25, 7
 752:	9f 67       	ori	r25, 0x7F	; 127
 754:	80 e8       	ldi	r24, 0x80	; 128
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	08 95       	ret

0000075c <__fp_nan>:
 75c:	9f ef       	ldi	r25, 0xFF	; 255
 75e:	80 ec       	ldi	r24, 0xC0	; 192
 760:	08 95       	ret

00000762 <__fp_pscA>:
 762:	00 24       	eor	r0, r0
 764:	0a 94       	dec	r0
 766:	16 16       	cp	r1, r22
 768:	17 06       	cpc	r1, r23
 76a:	18 06       	cpc	r1, r24
 76c:	09 06       	cpc	r0, r25
 76e:	08 95       	ret

00000770 <__fp_pscB>:
 770:	00 24       	eor	r0, r0
 772:	0a 94       	dec	r0
 774:	12 16       	cp	r1, r18
 776:	13 06       	cpc	r1, r19
 778:	14 06       	cpc	r1, r20
 77a:	05 06       	cpc	r0, r21
 77c:	08 95       	ret

0000077e <__fp_round>:
 77e:	09 2e       	mov	r0, r25
 780:	03 94       	inc	r0
 782:	00 0c       	add	r0, r0
 784:	11 f4       	brne	.+4      	; 0x78a <__fp_round+0xc>
 786:	88 23       	and	r24, r24
 788:	52 f0       	brmi	.+20     	; 0x79e <__fp_round+0x20>
 78a:	bb 0f       	add	r27, r27
 78c:	40 f4       	brcc	.+16     	; 0x79e <__fp_round+0x20>
 78e:	bf 2b       	or	r27, r31
 790:	11 f4       	brne	.+4      	; 0x796 <__fp_round+0x18>
 792:	60 ff       	sbrs	r22, 0
 794:	04 c0       	rjmp	.+8      	; 0x79e <__fp_round+0x20>
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	08 95       	ret

000007a0 <__fp_split3>:
 7a0:	57 fd       	sbrc	r21, 7
 7a2:	90 58       	subi	r25, 0x80	; 128
 7a4:	44 0f       	add	r20, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	59 f0       	breq	.+22     	; 0x7c0 <__fp_splitA+0x10>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	71 f0       	breq	.+28     	; 0x7ca <__fp_splitA+0x1a>
 7ae:	47 95       	ror	r20

000007b0 <__fp_splitA>:
 7b0:	88 0f       	add	r24, r24
 7b2:	97 fb       	bst	r25, 7
 7b4:	99 1f       	adc	r25, r25
 7b6:	61 f0       	breq	.+24     	; 0x7d0 <__fp_splitA+0x20>
 7b8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ba:	79 f0       	breq	.+30     	; 0x7da <__fp_splitA+0x2a>
 7bc:	87 95       	ror	r24
 7be:	08 95       	ret
 7c0:	12 16       	cp	r1, r18
 7c2:	13 06       	cpc	r1, r19
 7c4:	14 06       	cpc	r1, r20
 7c6:	55 1f       	adc	r21, r21
 7c8:	f2 cf       	rjmp	.-28     	; 0x7ae <__fp_split3+0xe>
 7ca:	46 95       	lsr	r20
 7cc:	f1 df       	rcall	.-30     	; 0x7b0 <__fp_splitA>
 7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <__fp_splitA+0x30>
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	18 06       	cpc	r1, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	f1 cf       	rjmp	.-30     	; 0x7bc <__fp_splitA+0xc>
 7da:	86 95       	lsr	r24
 7dc:	71 05       	cpc	r23, r1
 7de:	61 05       	cpc	r22, r1
 7e0:	08 94       	sec
 7e2:	08 95       	ret

000007e4 <__fp_zero>:
 7e4:	e8 94       	clt

000007e6 <__fp_szero>:
 7e6:	bb 27       	eor	r27, r27
 7e8:	66 27       	eor	r22, r22
 7ea:	77 27       	eor	r23, r23
 7ec:	cb 01       	movw	r24, r22
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__mulsf3>:
 7f2:	0e 94 0c 04 	call	0x818	; 0x818 <__mulsf3x>
 7f6:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_round>
 7fa:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_pscA>
 7fe:	38 f0       	brcs	.+14     	; 0x80e <__mulsf3+0x1c>
 800:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscB>
 804:	20 f0       	brcs	.+8      	; 0x80e <__mulsf3+0x1c>
 806:	95 23       	and	r25, r21
 808:	11 f0       	breq	.+4      	; 0x80e <__mulsf3+0x1c>
 80a:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_inf>
 80e:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_nan>
 812:	11 24       	eor	r1, r1
 814:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_szero>

00000818 <__mulsf3x>:
 818:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_split3>
 81c:	70 f3       	brcs	.-36     	; 0x7fa <__mulsf3+0x8>

0000081e <__mulsf3_pse>:
 81e:	95 9f       	mul	r25, r21
 820:	c1 f3       	breq	.-16     	; 0x812 <__mulsf3+0x20>
 822:	95 0f       	add	r25, r21
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	55 1f       	adc	r21, r21
 828:	62 9f       	mul	r22, r18
 82a:	f0 01       	movw	r30, r0
 82c:	72 9f       	mul	r23, r18
 82e:	bb 27       	eor	r27, r27
 830:	f0 0d       	add	r31, r0
 832:	b1 1d       	adc	r27, r1
 834:	63 9f       	mul	r22, r19
 836:	aa 27       	eor	r26, r26
 838:	f0 0d       	add	r31, r0
 83a:	b1 1d       	adc	r27, r1
 83c:	aa 1f       	adc	r26, r26
 83e:	64 9f       	mul	r22, r20
 840:	66 27       	eor	r22, r22
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	66 1f       	adc	r22, r22
 848:	82 9f       	mul	r24, r18
 84a:	22 27       	eor	r18, r18
 84c:	b0 0d       	add	r27, r0
 84e:	a1 1d       	adc	r26, r1
 850:	62 1f       	adc	r22, r18
 852:	73 9f       	mul	r23, r19
 854:	b0 0d       	add	r27, r0
 856:	a1 1d       	adc	r26, r1
 858:	62 1f       	adc	r22, r18
 85a:	83 9f       	mul	r24, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	22 1f       	adc	r18, r18
 862:	74 9f       	mul	r23, r20
 864:	33 27       	eor	r19, r19
 866:	a0 0d       	add	r26, r0
 868:	61 1d       	adc	r22, r1
 86a:	23 1f       	adc	r18, r19
 86c:	84 9f       	mul	r24, r20
 86e:	60 0d       	add	r22, r0
 870:	21 1d       	adc	r18, r1
 872:	82 2f       	mov	r24, r18
 874:	76 2f       	mov	r23, r22
 876:	6a 2f       	mov	r22, r26
 878:	11 24       	eor	r1, r1
 87a:	9f 57       	subi	r25, 0x7F	; 127
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	9a f0       	brmi	.+38     	; 0x8a6 <__mulsf3_pse+0x88>
 880:	f1 f0       	breq	.+60     	; 0x8be <__mulsf3_pse+0xa0>
 882:	88 23       	and	r24, r24
 884:	4a f0       	brmi	.+18     	; 0x898 <__mulsf3_pse+0x7a>
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	bb 1f       	adc	r27, r27
 88c:	66 1f       	adc	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	91 50       	subi	r25, 0x01	; 1
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	a9 f7       	brne	.-22     	; 0x882 <__mulsf3_pse+0x64>
 898:	9e 3f       	cpi	r25, 0xFE	; 254
 89a:	51 05       	cpc	r21, r1
 89c:	80 f0       	brcs	.+32     	; 0x8be <__mulsf3_pse+0xa0>
 89e:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_inf>
 8a2:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_szero>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	e4 f3       	brlt	.-8      	; 0x8a2 <__mulsf3_pse+0x84>
 8aa:	98 3e       	cpi	r25, 0xE8	; 232
 8ac:	d4 f3       	brlt	.-12     	; 0x8a2 <__mulsf3_pse+0x84>
 8ae:	86 95       	lsr	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	e7 95       	ror	r30
 8ba:	9f 5f       	subi	r25, 0xFF	; 255
 8bc:	c1 f7       	brne	.-16     	; 0x8ae <__mulsf3_pse+0x90>
 8be:	fe 2b       	or	r31, r30
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
